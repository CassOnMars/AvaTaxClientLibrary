<?php 
namespace Avalara;
/*
 * AvaTax API Client Library
 *
 * (c) 2004-2016 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @@category   AvaTax client libraries
 * @@package    Avalara.AvaTaxClient
 * @@author     Ted Spence <ted.spence@@avalara.com>
 * @@author     Bob Maidens <bob.maidens@@avalara.com>
 * @@copyright  2004-2016 Avalara, Inc.
 * @@license    https://www.apache.org/licenses/LICENSE-2.0
 * @@version    2.16.12-30
 * @@link       https://github.com/avadev/AvaTaxClientLibrary
 */

include_once __DIR__."vendor/autoload.php";

use Guzzle\Http\Client;

/**
 * An AvaTaxClient object that handles connectivity to the AvaTax v2 API server.
 */
class AvaTaxClient 
{
    /**
     * @@var GuzzleHttp\Client;
     */
    private $client;

@foreach(var m in SwaggerModel.Methods) {
    var paramlist = new System.Text.StringBuilder();
    var guzzleparamlist = new System.Text.StringBuilder();
    var paramcomments = new System.Collections.Generic.List<string>();
    string payload = "null";
    foreach (var p in m.Params) {
        paramlist.Append("$");
        paramlist.Append(p.CleanParamName);
        paramlist.Append(", ");
    }
    foreach (var p in m.QueryParams) {
        paramlist.Append("$");
        paramlist.Append(p.CleanParamName);
        paramlist.Append(", ");
        guzzleparamlist.Append("'" + p.ParamName + "' => $" + p.CleanParamName + ", ");
        paramcomments.Add("\r\n     * @param " + p.TypeName + " $" + p.CleanParamName + " " + p.Comment.Replace("\r\n", " "));
    }
    if (m.BodyParam != null) {
        paramlist.Append("$");
        paramlist.Append(m.BodyParam.CleanParamName);
        paramlist.Append(", ");
        payload = "$" + m.BodyParam.CleanParamName;
        paramcomments.Add("\r\n     * @param " + m.BodyParam.TypeName + " $" + m.BodyParam.CleanParamName + " " + m.BodyParam.Comment.Replace("\r\n", " "));
    }
    if (paramlist.Length > 0) paramlist.Length -= 2;
    if (guzzleparamlist.Length > 0) guzzleparamlist.Length -= 2;

<text>
    /**
     * @m.Comment
     * </text>@foreach (var pc in paramcomments) { Write(pc);}<text>
     * @@return @m.TypeName
     */
    public function @{Write(FirstCharLower(m.Name) + "(" + paramlist.ToString() + ")");}
    {
        $path = "@m.URI.Replace("{", "{$")";
        $guzzleParams = [
            'query' => [@guzzleparamlist.ToString()],
            'body' => @payload
        ];
        return $this->restCall($path, '@m.HttpVerb.ToUpper()', $guzzleParams);
    }
</text>}

    /**
     * Construct a new AvaTaxClient 
     *
     * @@param string $environment Indicates which server to use; acceptable values are "sandbox" or "production"
     */
    public function __construct($environment)
    {
        // Configure the HTTP client
        $this->client = new Client();
        if ($environment == "sandbox") {
            $this->client->setBaseUri('https://sandbox-rest.avatax.com');
        } else {
            $this->client->setBaseUri('https://rest.avatax.com');
        }
        $this->client->setDefaultOption('headers', array('Accept' => 'application/json'));
    }

    /**
     * Make a single REST call to the AvaTax v2 API server
     *
     * @@param string $apiUrl The relative path of the API on the server
     * @@param string $method The HTTP verb being used in this request
     * @@param string $guzzleParams The Guzzle parameters for this request, including query string and body parameters
     */
    private function restCall($apiUrl, $method, $guzzleParams)
    {
        try {
            $response = $this->client->request($method, $apiUrl, $guzzleParams);
            $body = $response->getBody();
            return json_decode($body);

        } catch (\Exception $e) {
            return $e->getMessage();
        }
    }
}
