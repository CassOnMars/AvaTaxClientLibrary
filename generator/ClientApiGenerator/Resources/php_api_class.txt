<?php 
namespace Avalara;
/*
 * AvaTax API Client Library
 *
 * (c) 2004-2016 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @@category   AvaTax client libraries
 * @@package    Avalara.AvaTaxClient
 * @@author     Ted Spence <ted.spence@@avalara.com>
 * @@author     Bob Maidens <bob.maidens@@avalara.com>
 * @@copyright  2004-2016 Avalara, Inc.
 * @@license    https://www.apache.org/licenses/LICENSE-2.0
 * @@version    @SwaggerModel.ApiVersion
 * @@link       https://github.com/avadev/AvaTaxClientLibrary
 */

include_once __DIR__."/vendor/autoload.php";

use GuzzleHttp\Client;

/*****************************************************************************
 *                              API Section                                  *
 *****************************************************************************/

/**
 * An AvaTaxClient object that handles connectivity to the AvaTax v2 API server.
 */
class AvaTaxClient 
{
    /**
     * @@var Client     The Guzzle client to use to connect to AvaTax.
     */
    private $client;

    /**
     * @@var array      The authentication credentials to use to connect to AvaTax.
     */
    private $auth;

    /**
     * Construct a new AvaTaxClient 
     *
     * @@param string $environment  Indicates which server to use; acceptable values are "sandbox" or "production"
     * @@param string $appName      Specify the name of your application here.  Should not contain any semicolons.
     * @@param string $appVersion   Specify the version number of your application here.  Should not contain any semicolons.
     * @@param string $machineName  Specify the machine name of the machine on which this code is executing here.  Should not contain any semicolons.
     */
    public function __construct($environment, $appName, $appVersion, $machineName)
    {
        // Determine startup environment
        $env = 'https://rest.avatax.com';
        if ($environment == "sandbox") {
            $env = 'https://sandbox-rest.avatax.com';
        }

        // Configure the HTTP client
        $this->client = new Client([
            'base_url' => $env
        ]);
        
        // Set client options
        $this->client->setDefaultOption('headers', array(
            'Accept' => 'application/json',
            'X-Avalara-Client' => "{$appName}; {$appVersion}; PhpRestClient; @SwaggerModel.ApiVersion; {$machineName}"));
            
        // For some reason, Guzzle reports that 'https://sandbox-rest.avatax.com' is a self signed certificate, even though Verisign issued it
        if ($environment == "sandbox") {
            $this->client->setDefaultOption('verify', false);
        }
    }

    /**
     * Configure this client to use the specified username/password security settings
     *
     * @@param string $username     The username for your AvaTax user account
     * @@param string $password     The password for your AvaTax user account
     * @@return AvaTaxClient
     */
    public function withSecurity($username, $password)
    {
        $this->auth = [$username, $password];
        return $this;
    }

    /**
     * Configure this client to use Account ID / License Key security
     *
     * @@param int $accountId       The account ID for your AvaTax account
     * @@param string $licenseKey   The private license key for your AvaTax account
     * @@return AvaTaxClient
     */
    public function withLicenseKey($accountId, $licenseKey)
    {
        $this->auth = [$accountId, $licenseKey];
        return $this;
    }


@foreach(var m in SwaggerModel.Methods) {
    var paramlist = new System.Text.StringBuilder();
    var guzzleparamlist = new System.Text.StringBuilder();
    var paramcomments = new System.Collections.Generic.List<string>();
    string payload = "null";
    foreach (var p in m.Params) {
        paramlist.Append("$");
        paramlist.Append(p.CleanParamName);
        paramlist.Append(", ");
    }
    foreach (var p in m.QueryParams) {
        paramlist.Append("$");
        paramlist.Append(p.CleanParamName);
        paramlist.Append(", ");
        guzzleparamlist.Append("'" + p.ParamName + "' => $" + p.CleanParamName + ", ");
        paramcomments.Add("\r\n     * @param " + p.TypeName + " $" + p.CleanParamName + " " + p.Comment.Replace("\r\n", " "));
    }
    if (m.BodyParam != null) {
        paramlist.Append("$");
        paramlist.Append(m.BodyParam.CleanParamName);
        paramlist.Append(", ");
        payload = "$" + m.BodyParam.CleanParamName;
        paramcomments.Add("\r\n     * @param " + m.BodyParam.TypeName + " $" + m.BodyParam.CleanParamName + " " + m.BodyParam.Comment.Replace("\r\n", " "));
    }
    if (paramlist.Length > 0) paramlist.Length -= 2;
    if (guzzleparamlist.Length > 0) guzzleparamlist.Length -= 2;

<text>
    /**
     * @m.Comment
     * </text>@foreach (var pc in paramcomments) { Write(pc);}<text>
     * @@return @m.TypeName
     */
    public function @{Write(FirstCharLower(m.Name) + "(" + paramlist.ToString() + ")");}
    {
        $path = "@m.URI.Replace("{", "{$")";
        $guzzleParams = [
            'auth' => $this->auth,
            'query' => [@guzzleparamlist.ToString()],
            'body' => @payload
        ];
        return $this->restCall($path, '@m.HttpVerb.ToUpper()', $guzzleParams);
    }
</text>}

    /**
     * Make a single REST call to the AvaTax v2 API server
     *
     * @@param string $apiUrl           The relative path of the API on the server
     * @@param string $verb             The HTTP verb being used in this request
     * @@param string $guzzleParams     The Guzzle parameters for this request, including query string and body parameters
     */
    private function restCall($apiUrl, $verb, $guzzleParams)
    {
        try {
            $request = $this->client->createRequest($verb, $apiUrl, $guzzleParams);
            $response = $this->client->send($request);
            $body = $response->getBody();
            return json_decode($body);

        } catch (\Exception $e) {
            return $e->getMessage();
        }
    }
}

/*****************************************************************************
 *                              Enumerated constants                         *
 *****************************************************************************/

/**
 * Lists of constants defined for use in AvaTax API calls
 */
class Constants
{
@foreach(var i in SwaggerModel.Enums) {
<text>
    /**
     * Enumerated values defined for @i.EnumDataType
     */
</text>
    foreach (var v in i.Items) {
        Write("    const " + i.EnumDataType + "_" + v.Value + " = \"" + v.Value + "\";\r\n");
    }
}
}