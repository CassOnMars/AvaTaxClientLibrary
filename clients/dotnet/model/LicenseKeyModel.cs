/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a license key for this account.
    /// </summary>
    [DataContract]
    public partial class LicenseKeyModel :  IEquatable<LicenseKeyModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseKeyModel" /> class.
        /// </summary>
        /// <param name="AccountId">The primary key of the account.</param>
        /// <param name="PrivateLicenseKey">This is your private license key.  You must record this license key for safekeeping.              If you lose this key, you must contact the ResetLicenseKey API in order to request a new one.              Each account can only have one license key at a time..</param>
        /// <param name="HttpRequestHeader">If your software allows you to specify the HTTP Authorization header directly, this is the header string you               should use when contacting Avalara to make API calls with this license key..</param>
        public LicenseKeyModel(int? AccountId = null, string PrivateLicenseKey = null, string HttpRequestHeader = null)
        {
            this.AccountId = AccountId;
            this.PrivateLicenseKey = PrivateLicenseKey;
            this.HttpRequestHeader = HttpRequestHeader;
        }
        
        /// <summary>
        /// The primary key of the account
        /// </summary>
        /// <value>The primary key of the account</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// This is your private license key.  You must record this license key for safekeeping.              If you lose this key, you must contact the ResetLicenseKey API in order to request a new one.              Each account can only have one license key at a time.
        /// </summary>
        /// <value>This is your private license key.  You must record this license key for safekeeping.              If you lose this key, you must contact the ResetLicenseKey API in order to request a new one.              Each account can only have one license key at a time.</value>
        [DataMember(Name="privateLicenseKey", EmitDefaultValue=false)]
        public string PrivateLicenseKey { get; set; }
        /// <summary>
        /// If your software allows you to specify the HTTP Authorization header directly, this is the header string you               should use when contacting Avalara to make API calls with this license key.
        /// </summary>
        /// <value>If your software allows you to specify the HTTP Authorization header directly, this is the header string you               should use when contacting Avalara to make API calls with this license key.</value>
        [DataMember(Name="httpRequestHeader", EmitDefaultValue=false)]
        public string HttpRequestHeader { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseKeyModel {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  PrivateLicenseKey: ").Append(PrivateLicenseKey).Append("\n");
            sb.Append("  HttpRequestHeader: ").Append(HttpRequestHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LicenseKeyModel);
        }

        /// <summary>
        /// Returns true if LicenseKeyModel instances are equal
        /// </summary>
        /// <param name="other">Instance of LicenseKeyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseKeyModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.PrivateLicenseKey == other.PrivateLicenseKey ||
                    this.PrivateLicenseKey != null &&
                    this.PrivateLicenseKey.Equals(other.PrivateLicenseKey)
                ) && 
                (
                    this.HttpRequestHeader == other.HttpRequestHeader ||
                    this.HttpRequestHeader != null &&
                    this.HttpRequestHeader.Equals(other.HttpRequestHeader)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.PrivateLicenseKey != null)
                    hash = hash * 59 + this.PrivateLicenseKey.GetHashCode();
                if (this.HttpRequestHeader != null)
                    hash = hash * 59 + this.HttpRequestHeader.GetHashCode();
                return hash;
            }
        }
    }

}
