/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Company Initialization Model
    /// </summary>
    [DataContract]
    public partial class CompanyInitializationModel :  IEquatable<CompanyInitializationModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInitializationModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyInitializationModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInitializationModel" /> class.
        /// </summary>
        /// <param name="Name">Company Name (required).</param>
        /// <param name="CompanyCode">Company Code - used to distinguish between companies within your accounting system (required).</param>
        /// <param name="VatRegistrationId">Vat Registration Id - leave blank if not known..</param>
        /// <param name="TaxpayerIdNumber">United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your Social Security Number if you are an individual..</param>
        /// <param name="Line1">Address Line1 (required).</param>
        /// <param name="Line2">Line2.</param>
        /// <param name="Line3">Line3.</param>
        /// <param name="City">City (required).</param>
        /// <param name="Region">Two character ISO 3166 Region code for this company&#39;s primary business location. (required).</param>
        /// <param name="PostalCode">Postal Code (required).</param>
        /// <param name="Country">Two character ISO 3166 Country code for this company&#39;s primary business location. (required).</param>
        /// <param name="FirstName">First Name (required).</param>
        /// <param name="LastName">Last Name (required).</param>
        /// <param name="Title">Title.</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="PhoneNumber">Phone Number (required).</param>
        /// <param name="MobileNumber">Mobile Number.</param>
        /// <param name="FaxNumber">Fax Number.</param>
        public CompanyInitializationModel(string Name = null, string CompanyCode = null, string VatRegistrationId = null, string TaxpayerIdNumber = null, string Line1 = null, string Line2 = null, string Line3 = null, string City = null, string Region = null, string PostalCode = null, string Country = null, string FirstName = null, string LastName = null, string Title = null, string Email = null, string PhoneNumber = null, string MobileNumber = null, string FaxNumber = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "CompanyCode" is required (not null)
            if (CompanyCode == null)
            {
                throw new InvalidDataException("CompanyCode is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.CompanyCode = CompanyCode;
            }
            // to ensure "Line1" is required (not null)
            if (Line1 == null)
            {
                throw new InvalidDataException("Line1 is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.Line1 = Line1;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "Region" is required (not null)
            if (Region == null)
            {
                throw new InvalidDataException("Region is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.Region = Region;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostalCode == null)
            {
                throw new InvalidDataException("PostalCode is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.PostalCode = PostalCode;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "PhoneNumber" is required (not null)
            if (PhoneNumber == null)
            {
                throw new InvalidDataException("PhoneNumber is a required property for CompanyInitializationModel and cannot be null");
            }
            else
            {
                this.PhoneNumber = PhoneNumber;
            }
            this.VatRegistrationId = VatRegistrationId;
            this.TaxpayerIdNumber = TaxpayerIdNumber;
            this.Line2 = Line2;
            this.Line3 = Line3;
            this.Title = Title;
            this.MobileNumber = MobileNumber;
            this.FaxNumber = FaxNumber;
        }
        
        /// <summary>
        /// Company Name
        /// </summary>
        /// <value>Company Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Company Code - used to distinguish between companies within your accounting system
        /// </summary>
        /// <value>Company Code - used to distinguish between companies within your accounting system</value>
        [DataMember(Name="companyCode", EmitDefaultValue=false)]
        public string CompanyCode { get; set; }
        /// <summary>
        /// Vat Registration Id - leave blank if not known.
        /// </summary>
        /// <value>Vat Registration Id - leave blank if not known.</value>
        [DataMember(Name="vatRegistrationId", EmitDefaultValue=false)]
        public string VatRegistrationId { get; set; }
        /// <summary>
        /// United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your Social Security Number if you are an individual.
        /// </summary>
        /// <value>United States Taxpayer ID number, usually your Employer Identification Number if you are a business or your Social Security Number if you are an individual.</value>
        [DataMember(Name="taxpayerIdNumber", EmitDefaultValue=false)]
        public string TaxpayerIdNumber { get; set; }
        /// <summary>
        /// Address Line1
        /// </summary>
        /// <value>Address Line1</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// Line2
        /// </summary>
        /// <value>Line2</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// Line3
        /// </summary>
        /// <value>Line3</value>
        [DataMember(Name="line3", EmitDefaultValue=false)]
        public string Line3 { get; set; }
        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Two character ISO 3166 Region code for this company&#39;s primary business location.
        /// </summary>
        /// <value>Two character ISO 3166 Region code for this company&#39;s primary business location.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// Postal Code
        /// </summary>
        /// <value>Postal Code</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// Two character ISO 3166 Country code for this company&#39;s primary business location.
        /// </summary>
        /// <value>Two character ISO 3166 Country code for this company&#39;s primary business location.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// First Name
        /// </summary>
        /// <value>First Name</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Last Name
        /// </summary>
        /// <value>Last Name</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Phone Number
        /// </summary>
        /// <value>Phone Number</value>
        [DataMember(Name="phoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Mobile Number
        /// </summary>
        /// <value>Mobile Number</value>
        [DataMember(Name="mobileNumber", EmitDefaultValue=false)]
        public string MobileNumber { get; set; }
        /// <summary>
        /// Fax Number
        /// </summary>
        /// <value>Fax Number</value>
        [DataMember(Name="faxNumber", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyInitializationModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  VatRegistrationId: ").Append(VatRegistrationId).Append("\n");
            sb.Append("  TaxpayerIdNumber: ").Append(TaxpayerIdNumber).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyInitializationModel);
        }

        /// <summary>
        /// Returns true if CompanyInitializationModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyInitializationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInitializationModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CompanyCode == other.CompanyCode ||
                    this.CompanyCode != null &&
                    this.CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    this.VatRegistrationId == other.VatRegistrationId ||
                    this.VatRegistrationId != null &&
                    this.VatRegistrationId.Equals(other.VatRegistrationId)
                ) && 
                (
                    this.TaxpayerIdNumber == other.TaxpayerIdNumber ||
                    this.TaxpayerIdNumber != null &&
                    this.TaxpayerIdNumber.Equals(other.TaxpayerIdNumber)
                ) && 
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Line3 == other.Line3 ||
                    this.Line3 != null &&
                    this.Line3.Equals(other.Line3)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.MobileNumber == other.MobileNumber ||
                    this.MobileNumber != null &&
                    this.MobileNumber.Equals(other.MobileNumber)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CompanyCode != null)
                    hash = hash * 59 + this.CompanyCode.GetHashCode();
                if (this.VatRegistrationId != null)
                    hash = hash * 59 + this.VatRegistrationId.GetHashCode();
                if (this.TaxpayerIdNumber != null)
                    hash = hash * 59 + this.TaxpayerIdNumber.GetHashCode();
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Line3 != null)
                    hash = hash * 59 + this.Line3.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.MobileNumber != null)
                    hash = hash * 59 + this.MobileNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                return hash;
            }
        }
    }

}
