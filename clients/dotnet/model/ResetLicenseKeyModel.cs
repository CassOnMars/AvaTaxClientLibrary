/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a license key reset request.
    /// </summary>
    [DataContract]
    public partial class ResetLicenseKeyModel :  IEquatable<ResetLicenseKeyModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResetLicenseKeyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResetLicenseKeyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResetLicenseKeyModel" /> class.
        /// </summary>
        /// <param name="AccountId">The primary key of the account ID to reset (required).</param>
        /// <param name="ConfirmResetLicenseKey">Set this value to true to reset the license key for this account.              This license key reset function will only work when called using the credentials of the account administrator of this account. (required).</param>
        public ResetLicenseKeyModel(int? AccountId = null, bool? ConfirmResetLicenseKey = null)
        {
            // to ensure "AccountId" is required (not null)
            if (AccountId == null)
            {
                throw new InvalidDataException("AccountId is a required property for ResetLicenseKeyModel and cannot be null");
            }
            else
            {
                this.AccountId = AccountId;
            }
            // to ensure "ConfirmResetLicenseKey" is required (not null)
            if (ConfirmResetLicenseKey == null)
            {
                throw new InvalidDataException("ConfirmResetLicenseKey is a required property for ResetLicenseKeyModel and cannot be null");
            }
            else
            {
                this.ConfirmResetLicenseKey = ConfirmResetLicenseKey;
            }
        }
        
        /// <summary>
        /// The primary key of the account ID to reset
        /// </summary>
        /// <value>The primary key of the account ID to reset</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }
        /// <summary>
        /// Set this value to true to reset the license key for this account.              This license key reset function will only work when called using the credentials of the account administrator of this account.
        /// </summary>
        /// <value>Set this value to true to reset the license key for this account.              This license key reset function will only work when called using the credentials of the account administrator of this account.</value>
        [DataMember(Name="confirmResetLicenseKey", EmitDefaultValue=false)]
        public bool? ConfirmResetLicenseKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResetLicenseKeyModel {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ConfirmResetLicenseKey: ").Append(ConfirmResetLicenseKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ResetLicenseKeyModel);
        }

        /// <summary>
        /// Returns true if ResetLicenseKeyModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ResetLicenseKeyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResetLicenseKeyModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ConfirmResetLicenseKey == other.ConfirmResetLicenseKey ||
                    this.ConfirmResetLicenseKey != null &&
                    this.ConfirmResetLicenseKey.Equals(other.ConfirmResetLicenseKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ConfirmResetLicenseKey != null)
                    hash = hash * 59 + this.ConfirmResetLicenseKey.GetHashCode();
                return hash;
            }
        }
    }

}
