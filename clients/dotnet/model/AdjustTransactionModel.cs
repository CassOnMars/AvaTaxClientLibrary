/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// A request to adjust tax for a previously existing transaction
    /// </summary>
    [DataContract]
    public partial class AdjustTransactionModel :  IEquatable<AdjustTransactionModel>
    {
        /// <summary>
        /// A reason code indicating why this adjustment was made
        /// </summary>
        /// <value>A reason code indicating why this adjustment was made</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdjustmentReasonEnum
        {
            
            /// <summary>
            /// Enum NotAdjusted for "NotAdjusted"
            /// </summary>
            [EnumMember(Value = "NotAdjusted")]
            NotAdjusted,
            
            /// <summary>
            /// Enum SourcingIssue for "SourcingIssue"
            /// </summary>
            [EnumMember(Value = "SourcingIssue")]
            SourcingIssue,
            
            /// <summary>
            /// Enum ReconciledWithGeneralLedger for "ReconciledWithGeneralLedger"
            /// </summary>
            [EnumMember(Value = "ReconciledWithGeneralLedger")]
            ReconciledWithGeneralLedger,
            
            /// <summary>
            /// Enum ExemptCertApplied for "ExemptCertApplied"
            /// </summary>
            [EnumMember(Value = "ExemptCertApplied")]
            ExemptCertApplied,
            
            /// <summary>
            /// Enum PriceAdjusted for "PriceAdjusted"
            /// </summary>
            [EnumMember(Value = "PriceAdjusted")]
            PriceAdjusted,
            
            /// <summary>
            /// Enum ProductReturned for "ProductReturned"
            /// </summary>
            [EnumMember(Value = "ProductReturned")]
            ProductReturned,
            
            /// <summary>
            /// Enum ProductExchanged for "ProductExchanged"
            /// </summary>
            [EnumMember(Value = "ProductExchanged")]
            ProductExchanged,
            
            /// <summary>
            /// Enum BadDebt for "BadDebt"
            /// </summary>
            [EnumMember(Value = "BadDebt")]
            BadDebt,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other,
            
            /// <summary>
            /// Enum Offline for "Offline"
            /// </summary>
            [EnumMember(Value = "Offline")]
            Offline
        }

        /// <summary>
        /// A reason code indicating why this adjustment was made
        /// </summary>
        /// <value>A reason code indicating why this adjustment was made</value>
        [DataMember(Name="adjustmentReason", EmitDefaultValue=false)]
        public AdjustmentReasonEnum? AdjustmentReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustTransactionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdjustTransactionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdjustTransactionModel" /> class.
        /// </summary>
        /// <param name="AdjustmentReason">A reason code indicating why this adjustment was made (required).</param>
        /// <param name="AdjustmentDescription">If the AdjustmentReason is \&quot;Other\&quot;, specify the reason here.</param>
        /// <param name="NewTransaction">Replace the current transaction with tax data calculated for this new transaction (required).</param>
        public AdjustTransactionModel(AdjustmentReasonEnum? AdjustmentReason = null, string AdjustmentDescription = null, CreateTransactionModel NewTransaction = null)
        {
            // to ensure "AdjustmentReason" is required (not null)
            if (AdjustmentReason == null)
            {
                throw new InvalidDataException("AdjustmentReason is a required property for AdjustTransactionModel and cannot be null");
            }
            else
            {
                this.AdjustmentReason = AdjustmentReason;
            }
            // to ensure "NewTransaction" is required (not null)
            if (NewTransaction == null)
            {
                throw new InvalidDataException("NewTransaction is a required property for AdjustTransactionModel and cannot be null");
            }
            else
            {
                this.NewTransaction = NewTransaction;
            }
            this.AdjustmentDescription = AdjustmentDescription;
        }
        
        /// <summary>
        /// If the AdjustmentReason is \&quot;Other\&quot;, specify the reason here
        /// </summary>
        /// <value>If the AdjustmentReason is \&quot;Other\&quot;, specify the reason here</value>
        [DataMember(Name="adjustmentDescription", EmitDefaultValue=false)]
        public string AdjustmentDescription { get; set; }
        /// <summary>
        /// Replace the current transaction with tax data calculated for this new transaction
        /// </summary>
        /// <value>Replace the current transaction with tax data calculated for this new transaction</value>
        [DataMember(Name="newTransaction", EmitDefaultValue=false)]
        public CreateTransactionModel NewTransaction { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdjustTransactionModel {\n");
            sb.Append("  AdjustmentReason: ").Append(AdjustmentReason).Append("\n");
            sb.Append("  AdjustmentDescription: ").Append(AdjustmentDescription).Append("\n");
            sb.Append("  NewTransaction: ").Append(NewTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdjustTransactionModel);
        }

        /// <summary>
        /// Returns true if AdjustTransactionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AdjustTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdjustTransactionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AdjustmentReason == other.AdjustmentReason ||
                    this.AdjustmentReason != null &&
                    this.AdjustmentReason.Equals(other.AdjustmentReason)
                ) && 
                (
                    this.AdjustmentDescription == other.AdjustmentDescription ||
                    this.AdjustmentDescription != null &&
                    this.AdjustmentDescription.Equals(other.AdjustmentDescription)
                ) && 
                (
                    this.NewTransaction == other.NewTransaction ||
                    this.NewTransaction != null &&
                    this.NewTransaction.Equals(other.NewTransaction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AdjustmentReason != null)
                    hash = hash * 59 + this.AdjustmentReason.GetHashCode();
                if (this.AdjustmentDescription != null)
                    hash = hash * 59 + this.AdjustmentDescription.GetHashCode();
                if (this.NewTransaction != null)
                    hash = hash * 59 + this.NewTransaction.GetHashCode();
                return hash;
            }
        }
    }

}
