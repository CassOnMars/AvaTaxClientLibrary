/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a region, province, or state within a country
    /// </summary>
    [DataContract]
    public partial class IsoRegionModel :  IEquatable<IsoRegionModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IsoRegionModel" /> class.
        /// </summary>
        /// <param name="CountryCode">The two-character ISO 3166 country code this region belongs to.</param>
        /// <param name="Code">The three character ISO 3166 region code.</param>
        /// <param name="Name">The full name, using localized characters, for this region.</param>
        /// <param name="Classification">The word in the local language that classifies what type of a region this represents.</param>
        public IsoRegionModel(string CountryCode = null, string Code = null, string Name = null, string Classification = null)
        {
            this.CountryCode = CountryCode;
            this.Code = Code;
            this.Name = Name;
            this.Classification = Classification;
        }
        
        /// <summary>
        /// The two-character ISO 3166 country code this region belongs to
        /// </summary>
        /// <value>The two-character ISO 3166 country code this region belongs to</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// The three character ISO 3166 region code
        /// </summary>
        /// <value>The three character ISO 3166 region code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// The full name, using localized characters, for this region
        /// </summary>
        /// <value>The full name, using localized characters, for this region</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The word in the local language that classifies what type of a region this represents
        /// </summary>
        /// <value>The word in the local language that classifies what type of a region this represents</value>
        [DataMember(Name="classification", EmitDefaultValue=false)]
        public string Classification { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IsoRegionModel {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IsoRegionModel);
        }

        /// <summary>
        /// Returns true if IsoRegionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of IsoRegionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IsoRegionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Classification == other.Classification ||
                    this.Classification != null &&
                    this.Classification.Equals(other.Classification)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Classification != null)
                    hash = hash * 59 + this.Classification.GetHashCode();
                return hash;
            }
        }
    }

}
