/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// An extra property that can change the behavior of tax transactions.
    /// </summary>
    [DataContract]
    public partial class ParameterModel :  IEquatable<ParameterModel>
    {
        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            
            /// <summary>
            /// Enum String for "String"
            /// </summary>
            [EnumMember(Value = "String")]
            String,
            
            /// <summary>
            /// Enum Boolean for "Boolean"
            /// </summary>
            [EnumMember(Value = "Boolean")]
            Boolean,
            
            /// <summary>
            /// Enum Numeric for "Numeric"
            /// </summary>
            [EnumMember(Value = "Numeric")]
            Numeric
        }

        /// <summary>
        /// The data type of the property.
        /// </summary>
        /// <value>The data type of the property.</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterModel" /> class.
        /// </summary>
        /// <param name="Id">The unique ID number of this property..</param>
        /// <param name="Category">The service category of this property.  Some properties may require that you subscribe to certain features of avatax before they can be used..</param>
        /// <param name="Name">The name of the property.  To use this property, add a field on the \&quot;properties\&quot; object of a /api/v2/companies/(code)/transactions/create call..</param>
        /// <param name="DataType">The data type of the property..</param>
        /// <param name="Description">A full description of this property..</param>
        public ParameterModel(long? Id = null, string Category = null, string Name = null, DataTypeEnum? DataType = null, string Description = null)
        {
            this.Id = Id;
            this.Category = Category;
            this.Name = Name;
            this.DataType = DataType;
            this.Description = Description;
        }
        
        /// <summary>
        /// The unique ID number of this property.
        /// </summary>
        /// <value>The unique ID number of this property.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// The service category of this property.  Some properties may require that you subscribe to certain features of avatax before they can be used.
        /// </summary>
        /// <value>The service category of this property.  Some properties may require that you subscribe to certain features of avatax before they can be used.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// The name of the property.  To use this property, add a field on the \&quot;properties\&quot; object of a /api/v2/companies/(code)/transactions/create call.
        /// </summary>
        /// <value>The name of the property.  To use this property, add a field on the \&quot;properties\&quot; object of a /api/v2/companies/(code)/transactions/create call.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// A full description of this property.
        /// </summary>
        /// <value>A full description of this property.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParameterModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ParameterModel);
        }

        /// <summary>
        /// Returns true if ParameterModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ParameterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.DataType == other.DataType ||
                    this.DataType != null &&
                    this.DataType.Equals(other.DataType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.DataType != null)
                    hash = hash * 59 + this.DataType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }
    }

}
