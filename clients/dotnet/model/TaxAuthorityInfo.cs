/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Tax Authority Info
    /// </summary>
    [DataContract]
    public partial class TaxAuthorityInfo :  IEquatable<TaxAuthorityInfo>
    {
        /// <summary>
        /// Jurisdiction Type
        /// </summary>
        /// <value>Jurisdiction Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionTypeEnum
        {
            
            /// <summary>
            /// Enum Country for "Country"
            /// </summary>
            [EnumMember(Value = "Country")]
            Country,
            
            /// <summary>
            /// Enum Composite for "Composite"
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum County for "County"
            /// </summary>
            [EnumMember(Value = "County")]
            County,
            
            /// <summary>
            /// Enum City for "City"
            /// </summary>
            [EnumMember(Value = "City")]
            City,
            
            /// <summary>
            /// Enum Special for "Special"
            /// </summary>
            [EnumMember(Value = "Special")]
            Special
        }

        /// <summary>
        /// Jurisdiction Type
        /// </summary>
        /// <value>Jurisdiction Type</value>
        [DataMember(Name="jurisdictionType", EmitDefaultValue=false)]
        public JurisdictionTypeEnum? JurisdictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxAuthorityInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxAuthorityInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxAuthorityInfo" /> class.
        /// </summary>
        /// <param name="AvalaraId">Avalara Id.</param>
        /// <param name="JurisdictionName">Jurisdiction Name (required).</param>
        /// <param name="JurisdictionType">Jurisdiction Type.</param>
        /// <param name="SignatureCode">Signature Code.</param>
        public TaxAuthorityInfo(string AvalaraId = null, string JurisdictionName = null, JurisdictionTypeEnum? JurisdictionType = null, string SignatureCode = null)
        {
            // to ensure "JurisdictionName" is required (not null)
            if (JurisdictionName == null)
            {
                throw new InvalidDataException("JurisdictionName is a required property for TaxAuthorityInfo and cannot be null");
            }
            else
            {
                this.JurisdictionName = JurisdictionName;
            }
            this.AvalaraId = AvalaraId;
            this.JurisdictionType = JurisdictionType;
            this.SignatureCode = SignatureCode;
        }
        
        /// <summary>
        /// Avalara Id
        /// </summary>
        /// <value>Avalara Id</value>
        [DataMember(Name="avalaraId", EmitDefaultValue=false)]
        public string AvalaraId { get; set; }
        /// <summary>
        /// Jurisdiction Name
        /// </summary>
        /// <value>Jurisdiction Name</value>
        [DataMember(Name="jurisdictionName", EmitDefaultValue=false)]
        public string JurisdictionName { get; set; }
        /// <summary>
        /// Signature Code
        /// </summary>
        /// <value>Signature Code</value>
        [DataMember(Name="signatureCode", EmitDefaultValue=false)]
        public string SignatureCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxAuthorityInfo {\n");
            sb.Append("  AvalaraId: ").Append(AvalaraId).Append("\n");
            sb.Append("  JurisdictionName: ").Append(JurisdictionName).Append("\n");
            sb.Append("  JurisdictionType: ").Append(JurisdictionType).Append("\n");
            sb.Append("  SignatureCode: ").Append(SignatureCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxAuthorityInfo);
        }

        /// <summary>
        /// Returns true if TaxAuthorityInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxAuthorityInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxAuthorityInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AvalaraId == other.AvalaraId ||
                    this.AvalaraId != null &&
                    this.AvalaraId.Equals(other.AvalaraId)
                ) && 
                (
                    this.JurisdictionName == other.JurisdictionName ||
                    this.JurisdictionName != null &&
                    this.JurisdictionName.Equals(other.JurisdictionName)
                ) && 
                (
                    this.JurisdictionType == other.JurisdictionType ||
                    this.JurisdictionType != null &&
                    this.JurisdictionType.Equals(other.JurisdictionType)
                ) && 
                (
                    this.SignatureCode == other.SignatureCode ||
                    this.SignatureCode != null &&
                    this.SignatureCode.Equals(other.SignatureCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AvalaraId != null)
                    hash = hash * 59 + this.AvalaraId.GetHashCode();
                if (this.JurisdictionName != null)
                    hash = hash * 59 + this.JurisdictionName.GetHashCode();
                if (this.JurisdictionType != null)
                    hash = hash * 59 + this.JurisdictionType.GetHashCode();
                if (this.SignatureCode != null)
                    hash = hash * 59 + this.SignatureCode.GetHashCode();
                return hash;
            }
        }
    }

}
