/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// A location where this company does business.              Some jurisdictions may require you to list all locations where your company does business.
    /// </summary>
    [DataContract]
    public partial class LocationModel :  IEquatable<LocationModel>
    {
        /// <summary>
        /// Indicates whether this location is a physical place of business or a temporary salesperson location.
        /// </summary>
        /// <value>Indicates whether this location is a physical place of business or a temporary salesperson location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeIdEnum
        {
            
            /// <summary>
            /// Enum Location for "Location"
            /// </summary>
            [EnumMember(Value = "Location")]
            Location,
            
            /// <summary>
            /// Enum Salesperson for "Salesperson"
            /// </summary>
            [EnumMember(Value = "Salesperson")]
            Salesperson
        }

        /// <summary>
        /// Indicates the type of place of business represented by this location.
        /// </summary>
        /// <value>Indicates the type of place of business represented by this location.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressCategoryIdEnum
        {
            
            /// <summary>
            /// Enum Storefront for "Storefront"
            /// </summary>
            [EnumMember(Value = "Storefront")]
            Storefront,
            
            /// <summary>
            /// Enum MainOffice for "MainOffice"
            /// </summary>
            [EnumMember(Value = "MainOffice")]
            MainOffice,
            
            /// <summary>
            /// Enum Warehouse for "Warehouse"
            /// </summary>
            [EnumMember(Value = "Warehouse")]
            Warehouse,
            
            /// <summary>
            /// Enum Salesperson for "Salesperson"
            /// </summary>
            [EnumMember(Value = "Salesperson")]
            Salesperson,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other
        }

        /// <summary>
        /// Indicates whether this location is a physical place of business or a temporary salesperson location.
        /// </summary>
        /// <value>Indicates whether this location is a physical place of business or a temporary salesperson location.</value>
        [DataMember(Name="addressTypeId", EmitDefaultValue=false)]
        public AddressTypeIdEnum? AddressTypeId { get; set; }
        /// <summary>
        /// Indicates the type of place of business represented by this location.
        /// </summary>
        /// <value>Indicates the type of place of business represented by this location.</value>
        [DataMember(Name="addressCategoryId", EmitDefaultValue=false)]
        public AddressCategoryIdEnum? AddressCategoryId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationModel" /> class.
        /// </summary>
        /// <param name="LocationCode">A code that identifies this location.  Must be unique within your company. (required).</param>
        /// <param name="Description">A friendly name for this location..</param>
        /// <param name="AddressTypeId">Indicates whether this location is a physical place of business or a temporary salesperson location. (required).</param>
        /// <param name="AddressCategoryId">Indicates the type of place of business represented by this location. (required).</param>
        /// <param name="Line1">The first line of the physical address of this location. (required).</param>
        /// <param name="Line2">The second line of the physical address of this location..</param>
        /// <param name="Line3">The third line of the physical address of this location..</param>
        /// <param name="City">The city of the physical address of this location..</param>
        /// <param name="County">The county name of the physical address of this location.  Not required..</param>
        /// <param name="Region">The state, region, or province of the physical address of this location..</param>
        /// <param name="PostalCode">The postal code or zip code of the physical address of this location. (required).</param>
        /// <param name="Country">The two character ISO-3166 country code of the physical address of this location..</param>
        /// <param name="IsDefault">Set this flag to true to indicate that this is the default location for this company..</param>
        /// <param name="IsRegistered">Set this flag to true to indicate that this location has been registered with a tax authority..</param>
        /// <param name="DbaName">If this location has a different business name from its legal entity name, specify the \&quot;Doing Business As\&quot; name for this location..</param>
        /// <param name="OutletName">A friendly name for this location..</param>
        /// <param name="EffectiveDate">The date when this location was opened for business, or null if not known..</param>
        /// <param name="EndDate">If this place of business has closed, the date when this location closed business..</param>
        /// <param name="RegisteredDate">The date when this location was registered with a tax authority.  Not required..</param>
        /// <param name="Settings">Extra information required by certain jurisdictions for filing.              For a list of settings recognized by Avalara, query the endpoint \&quot;/api/v2/definitions/locationquestions\&quot;.               To determine the list of settings required for this location, query the endpoint \&quot;/api/v2/companies/(id)/locations/(id)/validate\&quot;..</param>
        public LocationModel(string LocationCode = null, string Description = null, AddressTypeIdEnum? AddressTypeId = null, AddressCategoryIdEnum? AddressCategoryId = null, string Line1 = null, string Line2 = null, string Line3 = null, string City = null, string County = null, string Region = null, string PostalCode = null, string Country = null, bool? IsDefault = null, bool? IsRegistered = null, string DbaName = null, string OutletName = null, DateTime? EffectiveDate = null, DateTime? EndDate = null, DateTime? RegisteredDate = null, List<LocationSettingModel> Settings = null)
        {
            // to ensure "LocationCode" is required (not null)
            if (LocationCode == null)
            {
                throw new InvalidDataException("LocationCode is a required property for LocationModel and cannot be null");
            }
            else
            {
                this.LocationCode = LocationCode;
            }
            // to ensure "AddressTypeId" is required (not null)
            if (AddressTypeId == null)
            {
                throw new InvalidDataException("AddressTypeId is a required property for LocationModel and cannot be null");
            }
            else
            {
                this.AddressTypeId = AddressTypeId;
            }
            // to ensure "AddressCategoryId" is required (not null)
            if (AddressCategoryId == null)
            {
                throw new InvalidDataException("AddressCategoryId is a required property for LocationModel and cannot be null");
            }
            else
            {
                this.AddressCategoryId = AddressCategoryId;
            }
            // to ensure "Line1" is required (not null)
            if (Line1 == null)
            {
                throw new InvalidDataException("Line1 is a required property for LocationModel and cannot be null");
            }
            else
            {
                this.Line1 = Line1;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostalCode == null)
            {
                throw new InvalidDataException("PostalCode is a required property for LocationModel and cannot be null");
            }
            else
            {
                this.PostalCode = PostalCode;
            }
            this.Description = Description;
            this.Line2 = Line2;
            this.Line3 = Line3;
            this.City = City;
            this.County = County;
            this.Region = Region;
            this.Country = Country;
            this.IsDefault = IsDefault;
            this.IsRegistered = IsRegistered;
            this.DbaName = DbaName;
            this.OutletName = OutletName;
            this.EffectiveDate = EffectiveDate;
            this.EndDate = EndDate;
            this.RegisteredDate = RegisteredDate;
            this.Settings = Settings;
        }
        
        /// <summary>
        /// The unique ID number of this location.
        /// </summary>
        /// <value>The unique ID number of this location.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the company that operates at this location.
        /// </summary>
        /// <value>The unique ID number of the company that operates at this location.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; private set; }
        /// <summary>
        /// A code that identifies this location.  Must be unique within your company.
        /// </summary>
        /// <value>A code that identifies this location.  Must be unique within your company.</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }
        /// <summary>
        /// A friendly name for this location.
        /// </summary>
        /// <value>A friendly name for this location.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The first line of the physical address of this location.
        /// </summary>
        /// <value>The first line of the physical address of this location.</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// The second line of the physical address of this location.
        /// </summary>
        /// <value>The second line of the physical address of this location.</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// The third line of the physical address of this location.
        /// </summary>
        /// <value>The third line of the physical address of this location.</value>
        [DataMember(Name="line3", EmitDefaultValue=false)]
        public string Line3 { get; set; }
        /// <summary>
        /// The city of the physical address of this location.
        /// </summary>
        /// <value>The city of the physical address of this location.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The county name of the physical address of this location.  Not required.
        /// </summary>
        /// <value>The county name of the physical address of this location.  Not required.</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// The state, region, or province of the physical address of this location.
        /// </summary>
        /// <value>The state, region, or province of the physical address of this location.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The postal code or zip code of the physical address of this location.
        /// </summary>
        /// <value>The postal code or zip code of the physical address of this location.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The two character ISO-3166 country code of the physical address of this location.
        /// </summary>
        /// <value>The two character ISO-3166 country code of the physical address of this location.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Set this flag to true to indicate that this is the default location for this company.
        /// </summary>
        /// <value>Set this flag to true to indicate that this is the default location for this company.</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// Set this flag to true to indicate that this location has been registered with a tax authority.
        /// </summary>
        /// <value>Set this flag to true to indicate that this location has been registered with a tax authority.</value>
        [DataMember(Name="isRegistered", EmitDefaultValue=false)]
        public bool? IsRegistered { get; set; }
        /// <summary>
        /// If this location has a different business name from its legal entity name, specify the \&quot;Doing Business As\&quot; name for this location.
        /// </summary>
        /// <value>If this location has a different business name from its legal entity name, specify the \&quot;Doing Business As\&quot; name for this location.</value>
        [DataMember(Name="dbaName", EmitDefaultValue=false)]
        public string DbaName { get; set; }
        /// <summary>
        /// A friendly name for this location.
        /// </summary>
        /// <value>A friendly name for this location.</value>
        [DataMember(Name="outletName", EmitDefaultValue=false)]
        public string OutletName { get; set; }
        /// <summary>
        /// The date when this location was opened for business, or null if not known.
        /// </summary>
        /// <value>The date when this location was opened for business, or null if not known.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }
        /// <summary>
        /// If this place of business has closed, the date when this location closed business.
        /// </summary>
        /// <value>If this place of business has closed, the date when this location closed business.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// The most recent date when a transaction was processed for this location.  Set by AvaTax.
        /// </summary>
        /// <value>The most recent date when a transaction was processed for this location.  Set by AvaTax.</value>
        [DataMember(Name="lastTransactionDate", EmitDefaultValue=false)]
        public DateTime? LastTransactionDate { get; private set; }
        /// <summary>
        /// The date when this location was registered with a tax authority.  Not required.
        /// </summary>
        /// <value>The date when this location was registered with a tax authority.  Not required.</value>
        [DataMember(Name="registeredDate", EmitDefaultValue=false)]
        public DateTime? RegisteredDate { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Extra information required by certain jurisdictions for filing.              For a list of settings recognized by Avalara, query the endpoint \&quot;/api/v2/definitions/locationquestions\&quot;.               To determine the list of settings required for this location, query the endpoint \&quot;/api/v2/companies/(id)/locations/(id)/validate\&quot;.
        /// </summary>
        /// <value>Extra information required by certain jurisdictions for filing.              For a list of settings recognized by Avalara, query the endpoint \&quot;/api/v2/definitions/locationquestions\&quot;.               To determine the list of settings required for this location, query the endpoint \&quot;/api/v2/companies/(id)/locations/(id)/validate\&quot;.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<LocationSettingModel> Settings { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AddressTypeId: ").Append(AddressTypeId).Append("\n");
            sb.Append("  AddressCategoryId: ").Append(AddressCategoryId).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsRegistered: ").Append(IsRegistered).Append("\n");
            sb.Append("  DbaName: ").Append(DbaName).Append("\n");
            sb.Append("  OutletName: ").Append(OutletName).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LastTransactionDate: ").Append(LastTransactionDate).Append("\n");
            sb.Append("  RegisteredDate: ").Append(RegisteredDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LocationModel);
        }

        /// <summary>
        /// Returns true if LocationModel instances are equal
        /// </summary>
        /// <param name="other">Instance of LocationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.LocationCode == other.LocationCode ||
                    this.LocationCode != null &&
                    this.LocationCode.Equals(other.LocationCode)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.AddressTypeId == other.AddressTypeId ||
                    this.AddressTypeId != null &&
                    this.AddressTypeId.Equals(other.AddressTypeId)
                ) && 
                (
                    this.AddressCategoryId == other.AddressCategoryId ||
                    this.AddressCategoryId != null &&
                    this.AddressCategoryId.Equals(other.AddressCategoryId)
                ) && 
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Line3 == other.Line3 ||
                    this.Line3 != null &&
                    this.Line3.Equals(other.Line3)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.IsRegistered == other.IsRegistered ||
                    this.IsRegistered != null &&
                    this.IsRegistered.Equals(other.IsRegistered)
                ) && 
                (
                    this.DbaName == other.DbaName ||
                    this.DbaName != null &&
                    this.DbaName.Equals(other.DbaName)
                ) && 
                (
                    this.OutletName == other.OutletName ||
                    this.OutletName != null &&
                    this.OutletName.Equals(other.OutletName)
                ) && 
                (
                    this.EffectiveDate == other.EffectiveDate ||
                    this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.LastTransactionDate == other.LastTransactionDate ||
                    this.LastTransactionDate != null &&
                    this.LastTransactionDate.Equals(other.LastTransactionDate)
                ) && 
                (
                    this.RegisteredDate == other.RegisteredDate ||
                    this.RegisteredDate != null &&
                    this.RegisteredDate.Equals(other.RegisteredDate)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.LocationCode != null)
                    hash = hash * 59 + this.LocationCode.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.AddressTypeId != null)
                    hash = hash * 59 + this.AddressTypeId.GetHashCode();
                if (this.AddressCategoryId != null)
                    hash = hash * 59 + this.AddressCategoryId.GetHashCode();
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Line3 != null)
                    hash = hash * 59 + this.Line3.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.IsRegistered != null)
                    hash = hash * 59 + this.IsRegistered.GetHashCode();
                if (this.DbaName != null)
                    hash = hash * 59 + this.DbaName.GetHashCode();
                if (this.OutletName != null)
                    hash = hash * 59 + this.OutletName.GetHashCode();
                if (this.EffectiveDate != null)
                    hash = hash * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.LastTransactionDate != null)
                    hash = hash * 59 + this.LastTransactionDate.GetHashCode();
                if (this.RegisteredDate != null)
                    hash = hash * 59 + this.RegisteredDate.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                return hash;
            }
        }
    }

}
