/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Settle this transaction with your ledger by executing one or many actions against that transaction.                You may use this endpoint to verify the transaction, change the transaction&#39;s code, and commit the transaction for reporting purposes.              This endpoint may be used to execute any or all of these actions at once.
    /// </summary>
    [DataContract]
    public partial class SettleTransactionModel :  IEquatable<SettleTransactionModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SettleTransactionModel" /> class.
        /// </summary>
        /// <param name="Verify">To use the \&quot;Settle\&quot; endpoint to verify a transaction, fill out this value..</param>
        /// <param name="ChangeCode">To use the \&quot;Settle\&quot; endpoint to change a transaction&#39;s code, fill out this value..</param>
        /// <param name="Commit">To use the \&quot;Settle\&quot; endpoint to commit a transaction for reporting purposes, fill out this value.                  If you use Avalara Returns, committing a transaction will cause that transaction to be filed..</param>
        public SettleTransactionModel(VerifyTransactionModel Verify = null, ChangeTransactionCodeModel ChangeCode = null, CommitTransactionModel Commit = null)
        {
            this.Verify = Verify;
            this.ChangeCode = ChangeCode;
            this.Commit = Commit;
        }
        
        /// <summary>
        /// To use the \&quot;Settle\&quot; endpoint to verify a transaction, fill out this value.
        /// </summary>
        /// <value>To use the \&quot;Settle\&quot; endpoint to verify a transaction, fill out this value.</value>
        [DataMember(Name="verify", EmitDefaultValue=false)]
        public VerifyTransactionModel Verify { get; set; }
        /// <summary>
        /// To use the \&quot;Settle\&quot; endpoint to change a transaction&#39;s code, fill out this value.
        /// </summary>
        /// <value>To use the \&quot;Settle\&quot; endpoint to change a transaction&#39;s code, fill out this value.</value>
        [DataMember(Name="changeCode", EmitDefaultValue=false)]
        public ChangeTransactionCodeModel ChangeCode { get; set; }
        /// <summary>
        /// To use the \&quot;Settle\&quot; endpoint to commit a transaction for reporting purposes, fill out this value.                  If you use Avalara Returns, committing a transaction will cause that transaction to be filed.
        /// </summary>
        /// <value>To use the \&quot;Settle\&quot; endpoint to commit a transaction for reporting purposes, fill out this value.                  If you use Avalara Returns, committing a transaction will cause that transaction to be filed.</value>
        [DataMember(Name="commit", EmitDefaultValue=false)]
        public CommitTransactionModel Commit { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SettleTransactionModel {\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("  ChangeCode: ").Append(ChangeCode).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SettleTransactionModel);
        }

        /// <summary>
        /// Returns true if SettleTransactionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SettleTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SettleTransactionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Verify == other.Verify ||
                    this.Verify != null &&
                    this.Verify.Equals(other.Verify)
                ) && 
                (
                    this.ChangeCode == other.ChangeCode ||
                    this.ChangeCode != null &&
                    this.ChangeCode.Equals(other.ChangeCode)
                ) && 
                (
                    this.Commit == other.Commit ||
                    this.Commit != null &&
                    this.Commit.Equals(other.Commit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Verify != null)
                    hash = hash * 59 + this.Verify.GetHashCode();
                if (this.ChangeCode != null)
                    hash = hash * 59 + this.ChangeCode.GetHashCode();
                if (this.Commit != null)
                    hash = hash * 59 + this.Commit.GetHashCode();
                return hash;
            }
        }
    }

}
