/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a tax rule that changes the behavior of Avalara&#39;s tax engine for certain products in certain jurisdictions.
    /// </summary>
    [DataContract]
    public partial class TaxRuleModel :  IEquatable<TaxRuleModel>
    {
        /// <summary>
        /// The type of the jurisdiction to which this tax rule applies.
        /// </summary>
        /// <value>The type of the jurisdiction to which this tax rule applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisTypeIdEnum
        {
            
            /// <summary>
            /// Enum STA for "STA"
            /// </summary>
            [EnumMember(Value = "STA")]
            STA,
            
            /// <summary>
            /// Enum CTY for "CTY"
            /// </summary>
            [EnumMember(Value = "CTY")]
            CTY,
            
            /// <summary>
            /// Enum CIT for "CIT"
            /// </summary>
            [EnumMember(Value = "CIT")]
            CIT,
            
            /// <summary>
            /// Enum STJ for "STJ"
            /// </summary>
            [EnumMember(Value = "STJ")]
            STJ,
            
            /// <summary>
            /// Enum CNT for "CNT"
            /// </summary>
            [EnumMember(Value = "CNT")]
            CNT
        }

        /// <summary>
        /// Indicates which tax types to which this rule applies.
        /// </summary>
        /// <value>Indicates which tax types to which this rule applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeIdEnum
        {
            
            /// <summary>
            /// Enum All for "All"
            /// </summary>
            [EnumMember(Value = "All")]
            All,
            
            /// <summary>
            /// Enum BothSalesAndUseTax for "BothSalesAndUseTax"
            /// </summary>
            [EnumMember(Value = "BothSalesAndUseTax")]
            BothSalesAndUseTax,
            
            /// <summary>
            /// Enum ConsumerUseTax for "ConsumerUseTax"
            /// </summary>
            [EnumMember(Value = "ConsumerUseTax")]
            ConsumerUseTax,
            
            /// <summary>
            /// Enum MedicalExcise for "MedicalExcise"
            /// </summary>
            [EnumMember(Value = "MedicalExcise")]
            MedicalExcise,
            
            /// <summary>
            /// Enum Fee for "Fee"
            /// </summary>
            [EnumMember(Value = "Fee")]
            Fee,
            
            /// <summary>
            /// Enum VATInputTax for "VATInputTax"
            /// </summary>
            [EnumMember(Value = "VATInputTax")]
            VATInputTax,
            
            /// <summary>
            /// Enum VATNonrecoverableInputTax for "VATNonrecoverableInputTax"
            /// </summary>
            [EnumMember(Value = "VATNonrecoverableInputTax")]
            VATNonrecoverableInputTax,
            
            /// <summary>
            /// Enum VATOutputTax for "VATOutputTax"
            /// </summary>
            [EnumMember(Value = "VATOutputTax")]
            VATOutputTax,
            
            /// <summary>
            /// Enum Rental for "Rental"
            /// </summary>
            [EnumMember(Value = "Rental")]
            Rental,
            
            /// <summary>
            /// Enum SalesTax for "SalesTax"
            /// </summary>
            [EnumMember(Value = "SalesTax")]
            SalesTax,
            
            /// <summary>
            /// Enum UseTax for "UseTax"
            /// </summary>
            [EnumMember(Value = "UseTax")]
            UseTax
        }

        /// <summary>
        /// Indicates the rate type to which this rule applies.
        /// </summary>
        /// <value>Indicates the rate type to which this rule applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RateTypeIdEnum
        {
            
            /// <summary>
            /// Enum ReducedA for "ReducedA"
            /// </summary>
            [EnumMember(Value = "ReducedA")]
            ReducedA,
            
            /// <summary>
            /// Enum ReducedB for "ReducedB"
            /// </summary>
            [EnumMember(Value = "ReducedB")]
            ReducedB,
            
            /// <summary>
            /// Enum Food for "Food"
            /// </summary>
            [EnumMember(Value = "Food")]
            Food,
            
            /// <summary>
            /// Enum General for "General"
            /// </summary>
            [EnumMember(Value = "General")]
            General,
            
            /// <summary>
            /// Enum IncreasedStandard for "IncreasedStandard"
            /// </summary>
            [EnumMember(Value = "IncreasedStandard")]
            IncreasedStandard,
            
            /// <summary>
            /// Enum LinenRental for "LinenRental"
            /// </summary>
            [EnumMember(Value = "LinenRental")]
            LinenRental,
            
            /// <summary>
            /// Enum Medical for "Medical"
            /// </summary>
            [EnumMember(Value = "Medical")]
            Medical,
            
            /// <summary>
            /// Enum Parking for "Parking"
            /// </summary>
            [EnumMember(Value = "Parking")]
            Parking,
            
            /// <summary>
            /// Enum SuperReduced for "SuperReduced"
            /// </summary>
            [EnumMember(Value = "SuperReduced")]
            SuperReduced,
            
            /// <summary>
            /// Enum ReducedR for "ReducedR"
            /// </summary>
            [EnumMember(Value = "ReducedR")]
            ReducedR,
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Zero for "Zero"
            /// </summary>
            [EnumMember(Value = "Zero")]
            Zero
        }

        /// <summary>
        /// This type value determines the behavior of the tax rule.              You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate               (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),               or other types of behavior.
        /// </summary>
        /// <value>This type value determines the behavior of the tax rule.              You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate               (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),               or other types of behavior.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxRuleTypeIdEnum
        {
            
            /// <summary>
            /// Enum RateRule for "RateRule"
            /// </summary>
            [EnumMember(Value = "RateRule")]
            RateRule,
            
            /// <summary>
            /// Enum RateOverrideRule for "RateOverrideRule"
            /// </summary>
            [EnumMember(Value = "RateOverrideRule")]
            RateOverrideRule,
            
            /// <summary>
            /// Enum BaseRule for "BaseRule"
            /// </summary>
            [EnumMember(Value = "BaseRule")]
            BaseRule,
            
            /// <summary>
            /// Enum ExemptEntityRule for "ExemptEntityRule"
            /// </summary>
            [EnumMember(Value = "ExemptEntityRule")]
            ExemptEntityRule,
            
            /// <summary>
            /// Enum ProductTaxabilityRule for "ProductTaxabilityRule"
            /// </summary>
            [EnumMember(Value = "ProductTaxabilityRule")]
            ProductTaxabilityRule,
            
            /// <summary>
            /// Enum NexusRule for "NexusRule"
            /// </summary>
            [EnumMember(Value = "NexusRule")]
            NexusRule
        }

        /// <summary>
        /// The sourcing types to which this rule applies.
        /// </summary>
        /// <value>The sourcing types to which this rule applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourcingEnum
        {
            
            /// <summary>
            /// Enum Destination for "Destination"
            /// </summary>
            [EnumMember(Value = "Destination")]
            Destination,
            
            /// <summary>
            /// Enum Origin for "Origin"
            /// </summary>
            [EnumMember(Value = "Origin")]
            Origin
        }

        /// <summary>
        /// The type of the jurisdiction to which this tax rule applies.
        /// </summary>
        /// <value>The type of the jurisdiction to which this tax rule applies.</value>
        [DataMember(Name="jurisTypeId", EmitDefaultValue=false)]
        public JurisTypeIdEnum? JurisTypeId { get; set; }
        /// <summary>
        /// Indicates which tax types to which this rule applies.
        /// </summary>
        /// <value>Indicates which tax types to which this rule applies.</value>
        [DataMember(Name="taxTypeId", EmitDefaultValue=false)]
        public TaxTypeIdEnum? TaxTypeId { get; set; }
        /// <summary>
        /// Indicates the rate type to which this rule applies.
        /// </summary>
        /// <value>Indicates the rate type to which this rule applies.</value>
        [DataMember(Name="rateTypeId", EmitDefaultValue=false)]
        public RateTypeIdEnum? RateTypeId { get; set; }
        /// <summary>
        /// This type value determines the behavior of the tax rule.              You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate               (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),               or other types of behavior.
        /// </summary>
        /// <value>This type value determines the behavior of the tax rule.              You can specify that this rule controls the product's taxability or exempt / nontaxable status, the product's rate               (for example, if you have been granted an official ruling for your product's rate that differs from the official rate),               or other types of behavior.</value>
        [DataMember(Name="taxRuleTypeId", EmitDefaultValue=false)]
        public TaxRuleTypeIdEnum? TaxRuleTypeId { get; set; }
        /// <summary>
        /// The sourcing types to which this rule applies.
        /// </summary>
        /// <value>The sourcing types to which this rule applies.</value>
        [DataMember(Name="sourcing", EmitDefaultValue=false)]
        public SourcingEnum? Sourcing { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRuleModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxRuleModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRuleModel" /> class.
        /// </summary>
        /// <param name="TaxCodeId">The unique ID number of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value..</param>
        /// <param name="TaxCode">The code string of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value..</param>
        /// <param name="StateFIPS">For U.S. tax rules, this is the state&#39;s Federal Information Processing Standard (FIPS) code..</param>
        /// <param name="JurisName">The name of the jurisdiction to which this tax rule applies..</param>
        /// <param name="JurisCode">The code of the jurisdiction to which this tax rule applies. (required).</param>
        /// <param name="JurisTypeId">The type of the jurisdiction to which this tax rule applies..</param>
        /// <param name="CustomerUsageType">The type of customer usage to which this rule applies..</param>
        /// <param name="TaxTypeId">Indicates which tax types to which this rule applies..</param>
        /// <param name="RateTypeId">Indicates the rate type to which this rule applies..</param>
        /// <param name="TaxRuleTypeId">This type value determines the behavior of the tax rule.              You can specify that this rule controls the product&#39;s taxability or exempt / nontaxable status, the product&#39;s rate               (for example, if you have been granted an official ruling for your product&#39;s rate that differs from the official rate),               or other types of behavior..</param>
        /// <param name="IsAllJuris">Set this value to true if this tax rule applies in all jurisdictions..</param>
        /// <param name="Value">The corrected rate for this tax rule..</param>
        /// <param name="Cap">The maximum cap for the price of this item according to this rule..</param>
        /// <param name="Threshold">The per-unit threshold that must be met before this rule applies..</param>
        /// <param name="Options">Custom option flags for this rule..</param>
        /// <param name="EffectiveDate">The first date at which this rule applies.  If null, this rule will apply to all dates prior to the end date..</param>
        /// <param name="EndDate">The last date for which this rule applies.  If null, this rule will apply to all dates after the effective date..</param>
        /// <param name="Description">A friendly name for this tax rule..</param>
        /// <param name="CountyFIPS">For U.S. tax rules, this is the county&#39;s Federal Information Processing Standard (FIPS) code..</param>
        /// <param name="IsSTPro">If true, indicates this rule is for Sales Tax Pro..</param>
        /// <param name="Country">The two character ISO 3166 country code for the locations where this rule applies. (required).</param>
        /// <param name="Region">The state, region, or province name for the locations where this rule applies. (required).</param>
        /// <param name="Sourcing">The sourcing types to which this rule applies..</param>
        public TaxRuleModel(int? TaxCodeId = null, string TaxCode = null, string StateFIPS = null, string JurisName = null, string JurisCode = null, JurisTypeIdEnum? JurisTypeId = null, string CustomerUsageType = null, TaxTypeIdEnum? TaxTypeId = null, RateTypeIdEnum? RateTypeId = null, TaxRuleTypeIdEnum? TaxRuleTypeId = null, bool? IsAllJuris = null, double? Value = null, double? Cap = null, double? Threshold = null, string Options = null, DateTime? EffectiveDate = null, DateTime? EndDate = null, string Description = null, string CountyFIPS = null, bool? IsSTPro = null, string Country = null, string Region = null, SourcingEnum? Sourcing = null)
        {
            // to ensure "JurisCode" is required (not null)
            if (JurisCode == null)
            {
                throw new InvalidDataException("JurisCode is a required property for TaxRuleModel and cannot be null");
            }
            else
            {
                this.JurisCode = JurisCode;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for TaxRuleModel and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "Region" is required (not null)
            if (Region == null)
            {
                throw new InvalidDataException("Region is a required property for TaxRuleModel and cannot be null");
            }
            else
            {
                this.Region = Region;
            }
            this.TaxCodeId = TaxCodeId;
            this.TaxCode = TaxCode;
            this.StateFIPS = StateFIPS;
            this.JurisName = JurisName;
            this.JurisTypeId = JurisTypeId;
            this.CustomerUsageType = CustomerUsageType;
            this.TaxTypeId = TaxTypeId;
            this.RateTypeId = RateTypeId;
            this.TaxRuleTypeId = TaxRuleTypeId;
            this.IsAllJuris = IsAllJuris;
            this.Value = Value;
            this.Cap = Cap;
            this.Threshold = Threshold;
            this.Options = Options;
            this.EffectiveDate = EffectiveDate;
            this.EndDate = EndDate;
            this.Description = Description;
            this.CountyFIPS = CountyFIPS;
            this.IsSTPro = IsSTPro;
            this.Sourcing = Sourcing;
        }
        
        /// <summary>
        /// The unique ID number of this tax rule.
        /// </summary>
        /// <value>The unique ID number of this tax rule.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the company that owns this tax rule.
        /// </summary>
        /// <value>The unique ID number of the company that owns this tax rule.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; private set; }
        /// <summary>
        /// The unique ID number of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value.
        /// </summary>
        /// <value>The unique ID number of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value.</value>
        [DataMember(Name="taxCodeId", EmitDefaultValue=false)]
        public int? TaxCodeId { get; set; }
        /// <summary>
        /// The code string of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value.
        /// </summary>
        /// <value>The code string of the tax code for this rule.              When creating or updating a tax rule, you may specify either the taxCodeId value or the taxCode value.</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }
        /// <summary>
        /// For U.S. tax rules, this is the state&#39;s Federal Information Processing Standard (FIPS) code.
        /// </summary>
        /// <value>For U.S. tax rules, this is the state&#39;s Federal Information Processing Standard (FIPS) code.</value>
        [DataMember(Name="stateFIPS", EmitDefaultValue=false)]
        public string StateFIPS { get; set; }
        /// <summary>
        /// The name of the jurisdiction to which this tax rule applies.
        /// </summary>
        /// <value>The name of the jurisdiction to which this tax rule applies.</value>
        [DataMember(Name="jurisName", EmitDefaultValue=false)]
        public string JurisName { get; set; }
        /// <summary>
        /// The code of the jurisdiction to which this tax rule applies.
        /// </summary>
        /// <value>The code of the jurisdiction to which this tax rule applies.</value>
        [DataMember(Name="jurisCode", EmitDefaultValue=false)]
        public string JurisCode { get; set; }
        /// <summary>
        /// The type of customer usage to which this rule applies.
        /// </summary>
        /// <value>The type of customer usage to which this rule applies.</value>
        [DataMember(Name="customerUsageType", EmitDefaultValue=false)]
        public string CustomerUsageType { get; set; }
        /// <summary>
        /// Set this value to true if this tax rule applies in all jurisdictions.
        /// </summary>
        /// <value>Set this value to true if this tax rule applies in all jurisdictions.</value>
        [DataMember(Name="isAllJuris", EmitDefaultValue=false)]
        public bool? IsAllJuris { get; set; }
        /// <summary>
        /// The corrected rate for this tax rule.
        /// </summary>
        /// <value>The corrected rate for this tax rule.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }
        /// <summary>
        /// The maximum cap for the price of this item according to this rule.
        /// </summary>
        /// <value>The maximum cap for the price of this item according to this rule.</value>
        [DataMember(Name="cap", EmitDefaultValue=false)]
        public double? Cap { get; set; }
        /// <summary>
        /// The per-unit threshold that must be met before this rule applies.
        /// </summary>
        /// <value>The per-unit threshold that must be met before this rule applies.</value>
        [DataMember(Name="threshold", EmitDefaultValue=false)]
        public double? Threshold { get; set; }
        /// <summary>
        /// Custom option flags for this rule.
        /// </summary>
        /// <value>Custom option flags for this rule.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public string Options { get; set; }
        /// <summary>
        /// The first date at which this rule applies.  If null, this rule will apply to all dates prior to the end date.
        /// </summary>
        /// <value>The first date at which this rule applies.  If null, this rule will apply to all dates prior to the end date.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }
        /// <summary>
        /// The last date for which this rule applies.  If null, this rule will apply to all dates after the effective date.
        /// </summary>
        /// <value>The last date for which this rule applies.  If null, this rule will apply to all dates after the effective date.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// A friendly name for this tax rule.
        /// </summary>
        /// <value>A friendly name for this tax rule.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// For U.S. tax rules, this is the county&#39;s Federal Information Processing Standard (FIPS) code.
        /// </summary>
        /// <value>For U.S. tax rules, this is the county&#39;s Federal Information Processing Standard (FIPS) code.</value>
        [DataMember(Name="countyFIPS", EmitDefaultValue=false)]
        public string CountyFIPS { get; set; }
        /// <summary>
        /// If true, indicates this rule is for Sales Tax Pro.
        /// </summary>
        /// <value>If true, indicates this rule is for Sales Tax Pro.</value>
        [DataMember(Name="isSTPro", EmitDefaultValue=false)]
        public bool? IsSTPro { get; set; }
        /// <summary>
        /// The two character ISO 3166 country code for the locations where this rule applies.
        /// </summary>
        /// <value>The two character ISO 3166 country code for the locations where this rule applies.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The state, region, or province name for the locations where this rule applies.
        /// </summary>
        /// <value>The state, region, or province name for the locations where this rule applies.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxRuleModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  TaxCodeId: ").Append(TaxCodeId).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  StateFIPS: ").Append(StateFIPS).Append("\n");
            sb.Append("  JurisName: ").Append(JurisName).Append("\n");
            sb.Append("  JurisCode: ").Append(JurisCode).Append("\n");
            sb.Append("  JurisTypeId: ").Append(JurisTypeId).Append("\n");
            sb.Append("  CustomerUsageType: ").Append(CustomerUsageType).Append("\n");
            sb.Append("  TaxTypeId: ").Append(TaxTypeId).Append("\n");
            sb.Append("  RateTypeId: ").Append(RateTypeId).Append("\n");
            sb.Append("  TaxRuleTypeId: ").Append(TaxRuleTypeId).Append("\n");
            sb.Append("  IsAllJuris: ").Append(IsAllJuris).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  Threshold: ").Append(Threshold).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CountyFIPS: ").Append(CountyFIPS).Append("\n");
            sb.Append("  IsSTPro: ").Append(IsSTPro).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Sourcing: ").Append(Sourcing).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxRuleModel);
        }

        /// <summary>
        /// Returns true if TaxRuleModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxRuleModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxRuleModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.TaxCodeId == other.TaxCodeId ||
                    this.TaxCodeId != null &&
                    this.TaxCodeId.Equals(other.TaxCodeId)
                ) && 
                (
                    this.TaxCode == other.TaxCode ||
                    this.TaxCode != null &&
                    this.TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    this.StateFIPS == other.StateFIPS ||
                    this.StateFIPS != null &&
                    this.StateFIPS.Equals(other.StateFIPS)
                ) && 
                (
                    this.JurisName == other.JurisName ||
                    this.JurisName != null &&
                    this.JurisName.Equals(other.JurisName)
                ) && 
                (
                    this.JurisCode == other.JurisCode ||
                    this.JurisCode != null &&
                    this.JurisCode.Equals(other.JurisCode)
                ) && 
                (
                    this.JurisTypeId == other.JurisTypeId ||
                    this.JurisTypeId != null &&
                    this.JurisTypeId.Equals(other.JurisTypeId)
                ) && 
                (
                    this.CustomerUsageType == other.CustomerUsageType ||
                    this.CustomerUsageType != null &&
                    this.CustomerUsageType.Equals(other.CustomerUsageType)
                ) && 
                (
                    this.TaxTypeId == other.TaxTypeId ||
                    this.TaxTypeId != null &&
                    this.TaxTypeId.Equals(other.TaxTypeId)
                ) && 
                (
                    this.RateTypeId == other.RateTypeId ||
                    this.RateTypeId != null &&
                    this.RateTypeId.Equals(other.RateTypeId)
                ) && 
                (
                    this.TaxRuleTypeId == other.TaxRuleTypeId ||
                    this.TaxRuleTypeId != null &&
                    this.TaxRuleTypeId.Equals(other.TaxRuleTypeId)
                ) && 
                (
                    this.IsAllJuris == other.IsAllJuris ||
                    this.IsAllJuris != null &&
                    this.IsAllJuris.Equals(other.IsAllJuris)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Cap == other.Cap ||
                    this.Cap != null &&
                    this.Cap.Equals(other.Cap)
                ) && 
                (
                    this.Threshold == other.Threshold ||
                    this.Threshold != null &&
                    this.Threshold.Equals(other.Threshold)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.Equals(other.Options)
                ) && 
                (
                    this.EffectiveDate == other.EffectiveDate ||
                    this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.CountyFIPS == other.CountyFIPS ||
                    this.CountyFIPS != null &&
                    this.CountyFIPS.Equals(other.CountyFIPS)
                ) && 
                (
                    this.IsSTPro == other.IsSTPro ||
                    this.IsSTPro != null &&
                    this.IsSTPro.Equals(other.IsSTPro)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.Sourcing == other.Sourcing ||
                    this.Sourcing != null &&
                    this.Sourcing.Equals(other.Sourcing)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.TaxCodeId != null)
                    hash = hash * 59 + this.TaxCodeId.GetHashCode();
                if (this.TaxCode != null)
                    hash = hash * 59 + this.TaxCode.GetHashCode();
                if (this.StateFIPS != null)
                    hash = hash * 59 + this.StateFIPS.GetHashCode();
                if (this.JurisName != null)
                    hash = hash * 59 + this.JurisName.GetHashCode();
                if (this.JurisCode != null)
                    hash = hash * 59 + this.JurisCode.GetHashCode();
                if (this.JurisTypeId != null)
                    hash = hash * 59 + this.JurisTypeId.GetHashCode();
                if (this.CustomerUsageType != null)
                    hash = hash * 59 + this.CustomerUsageType.GetHashCode();
                if (this.TaxTypeId != null)
                    hash = hash * 59 + this.TaxTypeId.GetHashCode();
                if (this.RateTypeId != null)
                    hash = hash * 59 + this.RateTypeId.GetHashCode();
                if (this.TaxRuleTypeId != null)
                    hash = hash * 59 + this.TaxRuleTypeId.GetHashCode();
                if (this.IsAllJuris != null)
                    hash = hash * 59 + this.IsAllJuris.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Cap != null)
                    hash = hash * 59 + this.Cap.GetHashCode();
                if (this.Threshold != null)
                    hash = hash * 59 + this.Threshold.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this.EffectiveDate != null)
                    hash = hash * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.CountyFIPS != null)
                    hash = hash * 59 + this.CountyFIPS.GetHashCode();
                if (this.IsSTPro != null)
                    hash = hash * 59 + this.IsSTPro.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.Sourcing != null)
                    hash = hash * 59 + this.Sourcing.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
