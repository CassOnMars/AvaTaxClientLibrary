/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// A contact person for a company.
    /// </summary>
    [DataContract]
    public partial class ContactModel :  IEquatable<ContactModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactModel" /> class.
        /// </summary>
        /// <param name="ContactCode">A unique code for this contact. (required).</param>
        /// <param name="FirstName">The first or given name of this contact..</param>
        /// <param name="MiddleName">The middle name of this contact..</param>
        /// <param name="LastName">The last or family name of this contact..</param>
        /// <param name="Title">Professional title of this contact..</param>
        /// <param name="Line1">The first line of the postal mailing address of this contact..</param>
        /// <param name="Line2">The second line of the postal mailing address of this contact..</param>
        /// <param name="Line3">The third line of the postal mailing address of this contact..</param>
        /// <param name="City">The city of the postal mailing address of this contact..</param>
        /// <param name="Region">The state, region, or province of the postal mailing address of this contact..</param>
        /// <param name="PostalCode">The postal code or zip code of the postal mailing address of this contact..</param>
        /// <param name="Country">The ISO 3166 two-character country code of the postal mailing address of this contact..</param>
        /// <param name="Email">The email address of this contact..</param>
        /// <param name="Phone">The main phone number for this contact..</param>
        /// <param name="Mobile">The mobile phone number for this contact..</param>
        /// <param name="Fax">The facsimile phone number for this contact..</param>
        public ContactModel(string ContactCode = null, string FirstName = null, string MiddleName = null, string LastName = null, string Title = null, string Line1 = null, string Line2 = null, string Line3 = null, string City = null, string Region = null, string PostalCode = null, string Country = null, string Email = null, string Phone = null, string Mobile = null, string Fax = null)
        {
            // to ensure "ContactCode" is required (not null)
            if (ContactCode == null)
            {
                throw new InvalidDataException("ContactCode is a required property for ContactModel and cannot be null");
            }
            else
            {
                this.ContactCode = ContactCode;
            }
            this.FirstName = FirstName;
            this.MiddleName = MiddleName;
            this.LastName = LastName;
            this.Title = Title;
            this.Line1 = Line1;
            this.Line2 = Line2;
            this.Line3 = Line3;
            this.City = City;
            this.Region = Region;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.Email = Email;
            this.Phone = Phone;
            this.Mobile = Mobile;
            this.Fax = Fax;
        }
        
        /// <summary>
        /// The unique ID number of this contact.
        /// </summary>
        /// <value>The unique ID number of this contact.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the company to which this contact belongs.
        /// </summary>
        /// <value>The unique ID number of the company to which this contact belongs.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; private set; }
        /// <summary>
        /// A unique code for this contact.
        /// </summary>
        /// <value>A unique code for this contact.</value>
        [DataMember(Name="contactCode", EmitDefaultValue=false)]
        public string ContactCode { get; set; }
        /// <summary>
        /// The first or given name of this contact.
        /// </summary>
        /// <value>The first or given name of this contact.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// The middle name of this contact.
        /// </summary>
        /// <value>The middle name of this contact.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }
        /// <summary>
        /// The last or family name of this contact.
        /// </summary>
        /// <value>The last or family name of this contact.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Professional title of this contact.
        /// </summary>
        /// <value>Professional title of this contact.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// The first line of the postal mailing address of this contact.
        /// </summary>
        /// <value>The first line of the postal mailing address of this contact.</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// The second line of the postal mailing address of this contact.
        /// </summary>
        /// <value>The second line of the postal mailing address of this contact.</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// The third line of the postal mailing address of this contact.
        /// </summary>
        /// <value>The third line of the postal mailing address of this contact.</value>
        [DataMember(Name="line3", EmitDefaultValue=false)]
        public string Line3 { get; set; }
        /// <summary>
        /// The city of the postal mailing address of this contact.
        /// </summary>
        /// <value>The city of the postal mailing address of this contact.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The state, region, or province of the postal mailing address of this contact.
        /// </summary>
        /// <value>The state, region, or province of the postal mailing address of this contact.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The postal code or zip code of the postal mailing address of this contact.
        /// </summary>
        /// <value>The postal code or zip code of the postal mailing address of this contact.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The ISO 3166 two-character country code of the postal mailing address of this contact.
        /// </summary>
        /// <value>The ISO 3166 two-character country code of the postal mailing address of this contact.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The email address of this contact.
        /// </summary>
        /// <value>The email address of this contact.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The main phone number for this contact.
        /// </summary>
        /// <value>The main phone number for this contact.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// The mobile phone number for this contact.
        /// </summary>
        /// <value>The mobile phone number for this contact.</value>
        [DataMember(Name="mobile", EmitDefaultValue=false)]
        public string Mobile { get; set; }
        /// <summary>
        /// The facsimile phone number for this contact.
        /// </summary>
        /// <value>The facsimile phone number for this contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactModel);
        }

        /// <summary>
        /// Returns true if ContactModel instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.ContactCode == other.ContactCode ||
                    this.ContactCode != null &&
                    this.ContactCode.Equals(other.ContactCode)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Line3 == other.Line3 ||
                    this.Line3 != null &&
                    this.Line3.Equals(other.Line3)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Mobile == other.Mobile ||
                    this.Mobile != null &&
                    this.Mobile.Equals(other.Mobile)
                ) && 
                (
                    this.Fax == other.Fax ||
                    this.Fax != null &&
                    this.Fax.Equals(other.Fax)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.ContactCode != null)
                    hash = hash * 59 + this.ContactCode.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Line3 != null)
                    hash = hash * 59 + this.Line3.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Mobile != null)
                    hash = hash * 59 + this.Mobile.GetHashCode();
                if (this.Fax != null)
                    hash = hash * 59 + this.Fax.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
