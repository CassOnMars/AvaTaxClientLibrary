/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents one line item in a transaction
    /// </summary>
    [DataContract]
    public partial class LineItemModel :  IEquatable<LineItemModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItemModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LineItemModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LineItemModel" /> class.
        /// </summary>
        /// <param name="Number">Line number within this document.</param>
        /// <param name="Quantity">Quantity of items in this line (required).</param>
        /// <param name="Amount">Total amount for this line (required).</param>
        /// <param name="Addresses">Addresses.</param>
        /// <param name="TaxCode">Tax Code - System or Custom Tax Code..</param>
        /// <param name="CustomerUsageType">Customer Usage Type - The client application customer or usage type..</param>
        /// <param name="ItemCode">Item Code (SKU).</param>
        /// <param name="ExemptionCode">Exemption number for this line.</param>
        /// <param name="Discounted">True if the document discount should be applied to this line.</param>
        /// <param name="TaxIncluded">Indicates if line has Tax Included; defaults to false.</param>
        /// <param name="RevenueAccount">Revenue Account.</param>
        /// <param name="Ref1">Reference 1 - Client specific reference field.</param>
        /// <param name="Ref2">Reference 2 - Client specific reference field.</param>
        /// <param name="Description">Item description.  This is required for SST transactions if an unmapped ItemCode is used..</param>
        /// <param name="BusinessIdentificationNo">BusinessIdentificationNo.</param>
        /// <param name="TaxOverride">Specifies a tax override for this line.</param>
        /// <param name="Parameters">Special parameters that apply to this line within this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint..</param>
        public LineItemModel(string Number = null, double? Quantity = null, double? Amount = null, LineItemModelAddresses Addresses = null, string TaxCode = null, string CustomerUsageType = null, string ItemCode = null, string ExemptionCode = null, bool? Discounted = null, bool? TaxIncluded = null, string RevenueAccount = null, string Ref1 = null, string Ref2 = null, string Description = null, string BusinessIdentificationNo = null, TaxOverrideModel TaxOverride = null, Dictionary<string, string> Parameters = null)
        {
            // to ensure "Quantity" is required (not null)
            if (Quantity == null)
            {
                throw new InvalidDataException("Quantity is a required property for LineItemModel and cannot be null");
            }
            else
            {
                this.Quantity = Quantity;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for LineItemModel and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            this.Number = Number;
            this.Addresses = Addresses;
            this.TaxCode = TaxCode;
            this.CustomerUsageType = CustomerUsageType;
            this.ItemCode = ItemCode;
            this.ExemptionCode = ExemptionCode;
            this.Discounted = Discounted;
            this.TaxIncluded = TaxIncluded;
            this.RevenueAccount = RevenueAccount;
            this.Ref1 = Ref1;
            this.Ref2 = Ref2;
            this.Description = Description;
            this.BusinessIdentificationNo = BusinessIdentificationNo;
            this.TaxOverride = TaxOverride;
            this.Parameters = Parameters;
        }
        
        /// <summary>
        /// Line number within this document
        /// </summary>
        /// <value>Line number within this document</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }
        /// <summary>
        /// Quantity of items in this line
        /// </summary>
        /// <value>Quantity of items in this line</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }
        /// <summary>
        /// Total amount for this line
        /// </summary>
        /// <value>Total amount for this line</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public LineItemModelAddresses Addresses { get; set; }
        /// <summary>
        /// Tax Code - System or Custom Tax Code.
        /// </summary>
        /// <value>Tax Code - System or Custom Tax Code.</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }
        /// <summary>
        /// Customer Usage Type - The client application customer or usage type.
        /// </summary>
        /// <value>Customer Usage Type - The client application customer or usage type.</value>
        [DataMember(Name="customerUsageType", EmitDefaultValue=false)]
        public string CustomerUsageType { get; set; }
        /// <summary>
        /// Item Code (SKU)
        /// </summary>
        /// <value>Item Code (SKU)</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// Exemption number for this line
        /// </summary>
        /// <value>Exemption number for this line</value>
        [DataMember(Name="exemptionCode", EmitDefaultValue=false)]
        public string ExemptionCode { get; set; }
        /// <summary>
        /// True if the document discount should be applied to this line
        /// </summary>
        /// <value>True if the document discount should be applied to this line</value>
        [DataMember(Name="discounted", EmitDefaultValue=false)]
        public bool? Discounted { get; set; }
        /// <summary>
        /// Indicates if line has Tax Included; defaults to false
        /// </summary>
        /// <value>Indicates if line has Tax Included; defaults to false</value>
        [DataMember(Name="taxIncluded", EmitDefaultValue=false)]
        public bool? TaxIncluded { get; set; }
        /// <summary>
        /// Revenue Account
        /// </summary>
        /// <value>Revenue Account</value>
        [DataMember(Name="revenueAccount", EmitDefaultValue=false)]
        public string RevenueAccount { get; set; }
        /// <summary>
        /// Reference 1 - Client specific reference field
        /// </summary>
        /// <value>Reference 1 - Client specific reference field</value>
        [DataMember(Name="ref1", EmitDefaultValue=false)]
        public string Ref1 { get; set; }
        /// <summary>
        /// Reference 2 - Client specific reference field
        /// </summary>
        /// <value>Reference 2 - Client specific reference field</value>
        [DataMember(Name="ref2", EmitDefaultValue=false)]
        public string Ref2 { get; set; }
        /// <summary>
        /// Item description.  This is required for SST transactions if an unmapped ItemCode is used.
        /// </summary>
        /// <value>Item description.  This is required for SST transactions if an unmapped ItemCode is used.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// BusinessIdentificationNo
        /// </summary>
        /// <value>BusinessIdentificationNo</value>
        [DataMember(Name="businessIdentificationNo", EmitDefaultValue=false)]
        public string BusinessIdentificationNo { get; set; }
        /// <summary>
        /// Specifies a tax override for this line
        /// </summary>
        /// <value>Specifies a tax override for this line</value>
        [DataMember(Name="taxOverride", EmitDefaultValue=false)]
        public TaxOverrideModel TaxOverride { get; set; }
        /// <summary>
        /// Special parameters that apply to this line within this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint.
        /// </summary>
        /// <value>Special parameters that apply to this line within this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LineItemModel {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  CustomerUsageType: ").Append(CustomerUsageType).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  ExemptionCode: ").Append(ExemptionCode).Append("\n");
            sb.Append("  Discounted: ").Append(Discounted).Append("\n");
            sb.Append("  TaxIncluded: ").Append(TaxIncluded).Append("\n");
            sb.Append("  RevenueAccount: ").Append(RevenueAccount).Append("\n");
            sb.Append("  Ref1: ").Append(Ref1).Append("\n");
            sb.Append("  Ref2: ").Append(Ref2).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BusinessIdentificationNo: ").Append(BusinessIdentificationNo).Append("\n");
            sb.Append("  TaxOverride: ").Append(TaxOverride).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LineItemModel);
        }

        /// <summary>
        /// Returns true if LineItemModel instances are equal
        /// </summary>
        /// <param name="other">Instance of LineItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LineItemModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Amount == other.Amount ||
                    this.Amount != null &&
                    this.Amount.Equals(other.Amount)
                ) && 
                (
                    this.Addresses == other.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.Equals(other.Addresses)
                ) && 
                (
                    this.TaxCode == other.TaxCode ||
                    this.TaxCode != null &&
                    this.TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    this.CustomerUsageType == other.CustomerUsageType ||
                    this.CustomerUsageType != null &&
                    this.CustomerUsageType.Equals(other.CustomerUsageType)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.ExemptionCode == other.ExemptionCode ||
                    this.ExemptionCode != null &&
                    this.ExemptionCode.Equals(other.ExemptionCode)
                ) && 
                (
                    this.Discounted == other.Discounted ||
                    this.Discounted != null &&
                    this.Discounted.Equals(other.Discounted)
                ) && 
                (
                    this.TaxIncluded == other.TaxIncluded ||
                    this.TaxIncluded != null &&
                    this.TaxIncluded.Equals(other.TaxIncluded)
                ) && 
                (
                    this.RevenueAccount == other.RevenueAccount ||
                    this.RevenueAccount != null &&
                    this.RevenueAccount.Equals(other.RevenueAccount)
                ) && 
                (
                    this.Ref1 == other.Ref1 ||
                    this.Ref1 != null &&
                    this.Ref1.Equals(other.Ref1)
                ) && 
                (
                    this.Ref2 == other.Ref2 ||
                    this.Ref2 != null &&
                    this.Ref2.Equals(other.Ref2)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.BusinessIdentificationNo == other.BusinessIdentificationNo ||
                    this.BusinessIdentificationNo != null &&
                    this.BusinessIdentificationNo.Equals(other.BusinessIdentificationNo)
                ) && 
                (
                    this.TaxOverride == other.TaxOverride ||
                    this.TaxOverride != null &&
                    this.TaxOverride.Equals(other.TaxOverride)
                ) && 
                (
                    this.Parameters == other.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(other.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Amount != null)
                    hash = hash * 59 + this.Amount.GetHashCode();
                if (this.Addresses != null)
                    hash = hash * 59 + this.Addresses.GetHashCode();
                if (this.TaxCode != null)
                    hash = hash * 59 + this.TaxCode.GetHashCode();
                if (this.CustomerUsageType != null)
                    hash = hash * 59 + this.CustomerUsageType.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.ExemptionCode != null)
                    hash = hash * 59 + this.ExemptionCode.GetHashCode();
                if (this.Discounted != null)
                    hash = hash * 59 + this.Discounted.GetHashCode();
                if (this.TaxIncluded != null)
                    hash = hash * 59 + this.TaxIncluded.GetHashCode();
                if (this.RevenueAccount != null)
                    hash = hash * 59 + this.RevenueAccount.GetHashCode();
                if (this.Ref1 != null)
                    hash = hash * 59 + this.Ref1.GetHashCode();
                if (this.Ref2 != null)
                    hash = hash * 59 + this.Ref2.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.BusinessIdentificationNo != null)
                    hash = hash * 59 + this.BusinessIdentificationNo.GetHashCode();
                if (this.TaxOverride != null)
                    hash = hash * 59 + this.TaxOverride.GetHashCode();
                if (this.Parameters != null)
                    hash = hash * 59 + this.Parameters.GetHashCode();
                return hash;
            }
        }
    }

}
