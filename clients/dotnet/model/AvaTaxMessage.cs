/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Informational or warning messages returned by AvaTax with a transaction
    /// </summary>
    [DataContract]
    public partial class AvaTaxMessage :  IEquatable<AvaTaxMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvaTaxMessage" /> class.
        /// </summary>
        /// <param name="Summary">A brief summary of what this message tells us.</param>
        /// <param name="Details">Detailed information that explains what the summary provided.</param>
        /// <param name="RefersTo">Information about what object in your request this message refers to.</param>
        /// <param name="Severity">A category that indicates how severely this message affects the results.</param>
        /// <param name="Source">The name of the code or service that generated this message.</param>
        public AvaTaxMessage(string Summary = null, string Details = null, string RefersTo = null, string Severity = null, string Source = null)
        {
            this.Summary = Summary;
            this.Details = Details;
            this.RefersTo = RefersTo;
            this.Severity = Severity;
            this.Source = Source;
        }
        
        /// <summary>
        /// A brief summary of what this message tells us
        /// </summary>
        /// <value>A brief summary of what this message tells us</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }
        /// <summary>
        /// Detailed information that explains what the summary provided
        /// </summary>
        /// <value>Detailed information that explains what the summary provided</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }
        /// <summary>
        /// Information about what object in your request this message refers to
        /// </summary>
        /// <value>Information about what object in your request this message refers to</value>
        [DataMember(Name="refersTo", EmitDefaultValue=false)]
        public string RefersTo { get; set; }
        /// <summary>
        /// A category that indicates how severely this message affects the results
        /// </summary>
        /// <value>A category that indicates how severely this message affects the results</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public string Severity { get; set; }
        /// <summary>
        /// The name of the code or service that generated this message
        /// </summary>
        /// <value>The name of the code or service that generated this message</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvaTaxMessage {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  RefersTo: ").Append(RefersTo).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AvaTaxMessage);
        }

        /// <summary>
        /// Returns true if AvaTaxMessage instances are equal
        /// </summary>
        /// <param name="other">Instance of AvaTaxMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvaTaxMessage other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Summary == other.Summary ||
                    this.Summary != null &&
                    this.Summary.Equals(other.Summary)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.Equals(other.Details)
                ) && 
                (
                    this.RefersTo == other.RefersTo ||
                    this.RefersTo != null &&
                    this.RefersTo.Equals(other.RefersTo)
                ) && 
                (
                    this.Severity == other.Severity ||
                    this.Severity != null &&
                    this.Severity.Equals(other.Severity)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Summary != null)
                    hash = hash * 59 + this.Summary.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                if (this.RefersTo != null)
                    hash = hash * 59 + this.RefersTo.GetHashCode();
                if (this.Severity != null)
                    hash = hash * 59 + this.Severity.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                return hash;
            }
        }
    }

}
