/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// One line item on this transaction.
    /// </summary>
    [DataContract]
    public partial class TransactionLineModel :  IEquatable<TransactionLineModel>
    {
        /// <summary>
        /// Indicates whether this line item was taxed according to the origin or destination.
        /// </summary>
        /// <value>Indicates whether this line item was taxed according to the origin or destination.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourcingEnum
        {
            
            /// <summary>
            /// Enum Destination for "Destination"
            /// </summary>
            [EnumMember(Value = "Destination")]
            Destination,
            
            /// <summary>
            /// Enum Origin for "Origin"
            /// </summary>
            [EnumMember(Value = "Origin")]
            Origin
        }

        /// <summary>
        /// If a tax override was specified, this indicates the type of tax override.
        /// </summary>
        /// <value>If a tax override was specified, this indicates the type of tax override.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxOverrideTypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum TaxAmount for "TaxAmount"
            /// </summary>
            [EnumMember(Value = "TaxAmount")]
            TaxAmount,
            
            /// <summary>
            /// Enum Exemption for "Exemption"
            /// </summary>
            [EnumMember(Value = "Exemption")]
            Exemption,
            
            /// <summary>
            /// Enum TaxDate for "TaxDate"
            /// </summary>
            [EnumMember(Value = "TaxDate")]
            TaxDate,
            
            /// <summary>
            /// Enum AccruedTaxAmount for "AccruedTaxAmount"
            /// </summary>
            [EnumMember(Value = "AccruedTaxAmount")]
            AccruedTaxAmount
        }

        /// <summary>
        /// Indicates whether this line item was taxed according to the origin or destination.
        /// </summary>
        /// <value>Indicates whether this line item was taxed according to the origin or destination.</value>
        [DataMember(Name="sourcing", EmitDefaultValue=false)]
        public SourcingEnum? Sourcing { get; set; }
        /// <summary>
        /// If a tax override was specified, this indicates the type of tax override.
        /// </summary>
        /// <value>If a tax override was specified, this indicates the type of tax override.</value>
        [DataMember(Name="taxOverrideType", EmitDefaultValue=false)]
        public TaxOverrideTypeEnum? TaxOverrideType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLineModel" /> class.
        /// </summary>
        /// <param name="Id">The unique ID number of this transaction line item..</param>
        /// <param name="TransactionId">The unique ID number of the transaction to which this line item belongs..</param>
        /// <param name="LineNumber">The line number or code indicating the line on this invoice or receipt or document..</param>
        /// <param name="BoundaryOverrideId">The unique ID number of the boundary override applied to this line item..</param>
        /// <param name="CustomerUsageType">The customer usage type for this line item.  Usage type often affects taxability rules..</param>
        /// <param name="Description">A description of the item or service represented by this line..</param>
        /// <param name="DestinationAddressId">The unique ID number of the destination address where this line was delivered or sold.              In the case of a point-of-sale transaction, the destination address and origin address will be the same.              In the case of a shipped transaction, they will be different..</param>
        /// <param name="OriginAddressId">The unique ID number of the origin address where this line was delivered or sold.              In the case of a point-of-sale transaction, the origin address and destination address will be the same.              In the case of a shipped transaction, they will be different..</param>
        /// <param name="DiscountAmount">The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.              In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands..</param>
        /// <param name="DiscountTypeId">The type of discount, if any, that was applied to this line item..</param>
        /// <param name="ExemptAmount">The amount of this line item that was exempt..</param>
        /// <param name="ExemptCertId">The unique ID number of the exemption certificate that applied to this line item..</param>
        /// <param name="ExemptNo">If this line item was exempt, this string contains the word &#39;Exempt&#39;..</param>
        /// <param name="IsItemTaxable">True if this item is taxable..</param>
        /// <param name="IsSSTP">True if this item is a Streamlined Sales Tax line item..</param>
        /// <param name="ItemCode">The code string of the item represented by this line item..</param>
        /// <param name="LineAmount">The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.              To determine the individual item price, divide this by quantity..</param>
        /// <param name="Quantity">The quantity of products sold on this line item..</param>
        /// <param name="Ref1">A user-defined reference identifier for this transaction line item..</param>
        /// <param name="Ref2">A user-defined reference identifier for this transaction line item..</param>
        /// <param name="ReportingDate">The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.              In some cases, line items may be reported later due to delayed shipments or other business reasons..</param>
        /// <param name="RevAccount">The revenue account number for this line item..</param>
        /// <param name="Sourcing">Indicates whether this line item was taxed according to the origin or destination..</param>
        /// <param name="Tax">The amount of tax generated for this line item..</param>
        /// <param name="TaxableAmount">The taxable amount of this line item..</param>
        /// <param name="TaxCalculated">The tax calculated for this line by Avalara.  If the transaction was calculated with a tax override, this amount will be different from the \&quot;tax\&quot; value..</param>
        /// <param name="TaxCode">The code string for the tax code that was used to calculate this line item..</param>
        /// <param name="TaxCodeId">The unique ID number for the tax code that was used to calculate this line item..</param>
        /// <param name="TaxDate">The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.              In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past              so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased..</param>
        /// <param name="TaxEngine">The tax engine identifier that was used to calculate this line item..</param>
        /// <param name="TaxOverrideType">If a tax override was specified, this indicates the type of tax override..</param>
        /// <param name="TaxOverrideAmount">If a tax override was specified, this indicates the amount of tax that was requested..</param>
        /// <param name="TaxOverrideReason">If a tax override was specified, represents the reason for the tax override..</param>
        /// <param name="TaxIncluded">True if tax was included in the purchase price of the item..</param>
        /// <param name="Details">Optional: A list of tax details for this line item.  To fetch this list, add the query string \&quot;?$include&#x3D;Details\&quot; to your URL..</param>
        /// <param name="Parameters">Contains a list of extra parameters that were set when the transaction was created..</param>
        public TransactionLineModel(long? Id = null, long? TransactionId = null, string LineNumber = null, int? BoundaryOverrideId = null, string CustomerUsageType = null, string Description = null, long? DestinationAddressId = null, long? OriginAddressId = null, double? DiscountAmount = null, int? DiscountTypeId = null, double? ExemptAmount = null, int? ExemptCertId = null, string ExemptNo = null, bool? IsItemTaxable = null, bool? IsSSTP = null, string ItemCode = null, double? LineAmount = null, double? Quantity = null, string Ref1 = null, string Ref2 = null, DateTime? ReportingDate = null, string RevAccount = null, SourcingEnum? Sourcing = null, double? Tax = null, double? TaxableAmount = null, double? TaxCalculated = null, string TaxCode = null, int? TaxCodeId = null, DateTime? TaxDate = null, string TaxEngine = null, TaxOverrideTypeEnum? TaxOverrideType = null, double? TaxOverrideAmount = null, string TaxOverrideReason = null, bool? TaxIncluded = null, List<TransactionLineDetailModel> Details = null, Dictionary<string, string> Parameters = null)
        {
            this.Id = Id;
            this.TransactionId = TransactionId;
            this.LineNumber = LineNumber;
            this.BoundaryOverrideId = BoundaryOverrideId;
            this.CustomerUsageType = CustomerUsageType;
            this.Description = Description;
            this.DestinationAddressId = DestinationAddressId;
            this.OriginAddressId = OriginAddressId;
            this.DiscountAmount = DiscountAmount;
            this.DiscountTypeId = DiscountTypeId;
            this.ExemptAmount = ExemptAmount;
            this.ExemptCertId = ExemptCertId;
            this.ExemptNo = ExemptNo;
            this.IsItemTaxable = IsItemTaxable;
            this.IsSSTP = IsSSTP;
            this.ItemCode = ItemCode;
            this.LineAmount = LineAmount;
            this.Quantity = Quantity;
            this.Ref1 = Ref1;
            this.Ref2 = Ref2;
            this.ReportingDate = ReportingDate;
            this.RevAccount = RevAccount;
            this.Sourcing = Sourcing;
            this.Tax = Tax;
            this.TaxableAmount = TaxableAmount;
            this.TaxCalculated = TaxCalculated;
            this.TaxCode = TaxCode;
            this.TaxCodeId = TaxCodeId;
            this.TaxDate = TaxDate;
            this.TaxEngine = TaxEngine;
            this.TaxOverrideType = TaxOverrideType;
            this.TaxOverrideAmount = TaxOverrideAmount;
            this.TaxOverrideReason = TaxOverrideReason;
            this.TaxIncluded = TaxIncluded;
            this.Details = Details;
            this.Parameters = Parameters;
        }
        
        /// <summary>
        /// The unique ID number of this transaction line item.
        /// </summary>
        /// <value>The unique ID number of this transaction line item.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// The unique ID number of the transaction to which this line item belongs.
        /// </summary>
        /// <value>The unique ID number of the transaction to which this line item belongs.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public long? TransactionId { get; set; }
        /// <summary>
        /// The line number or code indicating the line on this invoice or receipt or document.
        /// </summary>
        /// <value>The line number or code indicating the line on this invoice or receipt or document.</value>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public string LineNumber { get; set; }
        /// <summary>
        /// The unique ID number of the boundary override applied to this line item.
        /// </summary>
        /// <value>The unique ID number of the boundary override applied to this line item.</value>
        [DataMember(Name="boundaryOverrideId", EmitDefaultValue=false)]
        public int? BoundaryOverrideId { get; set; }
        /// <summary>
        /// The customer usage type for this line item.  Usage type often affects taxability rules.
        /// </summary>
        /// <value>The customer usage type for this line item.  Usage type often affects taxability rules.</value>
        [DataMember(Name="customerUsageType", EmitDefaultValue=false)]
        public string CustomerUsageType { get; set; }
        /// <summary>
        /// A description of the item or service represented by this line.
        /// </summary>
        /// <value>A description of the item or service represented by this line.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The unique ID number of the destination address where this line was delivered or sold.              In the case of a point-of-sale transaction, the destination address and origin address will be the same.              In the case of a shipped transaction, they will be different.
        /// </summary>
        /// <value>The unique ID number of the destination address where this line was delivered or sold.              In the case of a point-of-sale transaction, the destination address and origin address will be the same.              In the case of a shipped transaction, they will be different.</value>
        [DataMember(Name="destinationAddressId", EmitDefaultValue=false)]
        public long? DestinationAddressId { get; set; }
        /// <summary>
        /// The unique ID number of the origin address where this line was delivered or sold.              In the case of a point-of-sale transaction, the origin address and destination address will be the same.              In the case of a shipped transaction, they will be different.
        /// </summary>
        /// <value>The unique ID number of the origin address where this line was delivered or sold.              In the case of a point-of-sale transaction, the origin address and destination address will be the same.              In the case of a shipped transaction, they will be different.</value>
        [DataMember(Name="originAddressId", EmitDefaultValue=false)]
        public long? OriginAddressId { get; set; }
        /// <summary>
        /// The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.              In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands.
        /// </summary>
        /// <value>The amount of discount that was applied to this line item.  This represents the difference between list price and sale price of the item.              In general, a discount represents money that did not change hands; tax is calculated on only the amount of money that changed hands.</value>
        [DataMember(Name="discountAmount", EmitDefaultValue=false)]
        public double? DiscountAmount { get; set; }
        /// <summary>
        /// The type of discount, if any, that was applied to this line item.
        /// </summary>
        /// <value>The type of discount, if any, that was applied to this line item.</value>
        [DataMember(Name="discountTypeId", EmitDefaultValue=false)]
        public int? DiscountTypeId { get; set; }
        /// <summary>
        /// The amount of this line item that was exempt.
        /// </summary>
        /// <value>The amount of this line item that was exempt.</value>
        [DataMember(Name="exemptAmount", EmitDefaultValue=false)]
        public double? ExemptAmount { get; set; }
        /// <summary>
        /// The unique ID number of the exemption certificate that applied to this line item.
        /// </summary>
        /// <value>The unique ID number of the exemption certificate that applied to this line item.</value>
        [DataMember(Name="exemptCertId", EmitDefaultValue=false)]
        public int? ExemptCertId { get; set; }
        /// <summary>
        /// If this line item was exempt, this string contains the word &#39;Exempt&#39;.
        /// </summary>
        /// <value>If this line item was exempt, this string contains the word &#39;Exempt&#39;.</value>
        [DataMember(Name="exemptNo", EmitDefaultValue=false)]
        public string ExemptNo { get; set; }
        /// <summary>
        /// True if this item is taxable.
        /// </summary>
        /// <value>True if this item is taxable.</value>
        [DataMember(Name="isItemTaxable", EmitDefaultValue=false)]
        public bool? IsItemTaxable { get; set; }
        /// <summary>
        /// True if this item is a Streamlined Sales Tax line item.
        /// </summary>
        /// <value>True if this item is a Streamlined Sales Tax line item.</value>
        [DataMember(Name="isSSTP", EmitDefaultValue=false)]
        public bool? IsSSTP { get; set; }
        /// <summary>
        /// The code string of the item represented by this line item.
        /// </summary>
        /// <value>The code string of the item represented by this line item.</value>
        [DataMember(Name="itemCode", EmitDefaultValue=false)]
        public string ItemCode { get; set; }
        /// <summary>
        /// The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.              To determine the individual item price, divide this by quantity.
        /// </summary>
        /// <value>The total amount of the transaction, including both taxable and exempt.  This is the total price for all items.              To determine the individual item price, divide this by quantity.</value>
        [DataMember(Name="lineAmount", EmitDefaultValue=false)]
        public double? LineAmount { get; set; }
        /// <summary>
        /// The quantity of products sold on this line item.
        /// </summary>
        /// <value>The quantity of products sold on this line item.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }
        /// <summary>
        /// A user-defined reference identifier for this transaction line item.
        /// </summary>
        /// <value>A user-defined reference identifier for this transaction line item.</value>
        [DataMember(Name="ref1", EmitDefaultValue=false)]
        public string Ref1 { get; set; }
        /// <summary>
        /// A user-defined reference identifier for this transaction line item.
        /// </summary>
        /// <value>A user-defined reference identifier for this transaction line item.</value>
        [DataMember(Name="ref2", EmitDefaultValue=false)]
        public string Ref2 { get; set; }
        /// <summary>
        /// The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.              In some cases, line items may be reported later due to delayed shipments or other business reasons.
        /// </summary>
        /// <value>The date when this transaction should be reported.  By default, all transactions are reported on the date when the actual transaction took place.              In some cases, line items may be reported later due to delayed shipments or other business reasons.</value>
        [DataMember(Name="reportingDate", EmitDefaultValue=false)]
        public DateTime? ReportingDate { get; set; }
        /// <summary>
        /// The revenue account number for this line item.
        /// </summary>
        /// <value>The revenue account number for this line item.</value>
        [DataMember(Name="revAccount", EmitDefaultValue=false)]
        public string RevAccount { get; set; }
        /// <summary>
        /// The amount of tax generated for this line item.
        /// </summary>
        /// <value>The amount of tax generated for this line item.</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// The taxable amount of this line item.
        /// </summary>
        /// <value>The taxable amount of this line item.</value>
        [DataMember(Name="taxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }
        /// <summary>
        /// The tax calculated for this line by Avalara.  If the transaction was calculated with a tax override, this amount will be different from the \&quot;tax\&quot; value.
        /// </summary>
        /// <value>The tax calculated for this line by Avalara.  If the transaction was calculated with a tax override, this amount will be different from the \&quot;tax\&quot; value.</value>
        [DataMember(Name="taxCalculated", EmitDefaultValue=false)]
        public double? TaxCalculated { get; set; }
        /// <summary>
        /// The code string for the tax code that was used to calculate this line item.
        /// </summary>
        /// <value>The code string for the tax code that was used to calculate this line item.</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }
        /// <summary>
        /// The unique ID number for the tax code that was used to calculate this line item.
        /// </summary>
        /// <value>The unique ID number for the tax code that was used to calculate this line item.</value>
        [DataMember(Name="taxCodeId", EmitDefaultValue=false)]
        public int? TaxCodeId { get; set; }
        /// <summary>
        /// The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.              In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past              so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased.
        /// </summary>
        /// <value>The date that was used for calculating tax amounts for this line item.  By default, this date should be the same as the document date.              In some cases, for example when a consumer returns a product purchased previously, line items may be calculated using a tax date in the past              so that the consumer can receive a refund for the correct tax amount that was charged when the item was originally purchased.</value>
        [DataMember(Name="taxDate", EmitDefaultValue=false)]
        public DateTime? TaxDate { get; set; }
        /// <summary>
        /// The tax engine identifier that was used to calculate this line item.
        /// </summary>
        /// <value>The tax engine identifier that was used to calculate this line item.</value>
        [DataMember(Name="taxEngine", EmitDefaultValue=false)]
        public string TaxEngine { get; set; }
        /// <summary>
        /// If a tax override was specified, this indicates the amount of tax that was requested.
        /// </summary>
        /// <value>If a tax override was specified, this indicates the amount of tax that was requested.</value>
        [DataMember(Name="taxOverrideAmount", EmitDefaultValue=false)]
        public double? TaxOverrideAmount { get; set; }
        /// <summary>
        /// If a tax override was specified, represents the reason for the tax override.
        /// </summary>
        /// <value>If a tax override was specified, represents the reason for the tax override.</value>
        [DataMember(Name="taxOverrideReason", EmitDefaultValue=false)]
        public string TaxOverrideReason { get; set; }
        /// <summary>
        /// True if tax was included in the purchase price of the item.
        /// </summary>
        /// <value>True if tax was included in the purchase price of the item.</value>
        [DataMember(Name="taxIncluded", EmitDefaultValue=false)]
        public bool? TaxIncluded { get; set; }
        /// <summary>
        /// Optional: A list of tax details for this line item.  To fetch this list, add the query string \&quot;?$include&#x3D;Details\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of tax details for this line item.  To fetch this list, add the query string \&quot;?$include&#x3D;Details\&quot; to your URL.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<TransactionLineDetailModel> Details { get; set; }
        /// <summary>
        /// Contains a list of extra parameters that were set when the transaction was created.
        /// </summary>
        /// <value>Contains a list of extra parameters that were set when the transaction was created.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionLineModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("  BoundaryOverrideId: ").Append(BoundaryOverrideId).Append("\n");
            sb.Append("  CustomerUsageType: ").Append(CustomerUsageType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DestinationAddressId: ").Append(DestinationAddressId).Append("\n");
            sb.Append("  OriginAddressId: ").Append(OriginAddressId).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountTypeId: ").Append(DiscountTypeId).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  ExemptCertId: ").Append(ExemptCertId).Append("\n");
            sb.Append("  ExemptNo: ").Append(ExemptNo).Append("\n");
            sb.Append("  IsItemTaxable: ").Append(IsItemTaxable).Append("\n");
            sb.Append("  IsSSTP: ").Append(IsSSTP).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  LineAmount: ").Append(LineAmount).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Ref1: ").Append(Ref1).Append("\n");
            sb.Append("  Ref2: ").Append(Ref2).Append("\n");
            sb.Append("  ReportingDate: ").Append(ReportingDate).Append("\n");
            sb.Append("  RevAccount: ").Append(RevAccount).Append("\n");
            sb.Append("  Sourcing: ").Append(Sourcing).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  TaxCalculated: ").Append(TaxCalculated).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxCodeId: ").Append(TaxCodeId).Append("\n");
            sb.Append("  TaxDate: ").Append(TaxDate).Append("\n");
            sb.Append("  TaxEngine: ").Append(TaxEngine).Append("\n");
            sb.Append("  TaxOverrideType: ").Append(TaxOverrideType).Append("\n");
            sb.Append("  TaxOverrideAmount: ").Append(TaxOverrideAmount).Append("\n");
            sb.Append("  TaxOverrideReason: ").Append(TaxOverrideReason).Append("\n");
            sb.Append("  TaxIncluded: ").Append(TaxIncluded).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionLineModel);
        }

        /// <summary>
        /// Returns true if TransactionLineModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionLineModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionLineModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.LineNumber == other.LineNumber ||
                    this.LineNumber != null &&
                    this.LineNumber.Equals(other.LineNumber)
                ) && 
                (
                    this.BoundaryOverrideId == other.BoundaryOverrideId ||
                    this.BoundaryOverrideId != null &&
                    this.BoundaryOverrideId.Equals(other.BoundaryOverrideId)
                ) && 
                (
                    this.CustomerUsageType == other.CustomerUsageType ||
                    this.CustomerUsageType != null &&
                    this.CustomerUsageType.Equals(other.CustomerUsageType)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DestinationAddressId == other.DestinationAddressId ||
                    this.DestinationAddressId != null &&
                    this.DestinationAddressId.Equals(other.DestinationAddressId)
                ) && 
                (
                    this.OriginAddressId == other.OriginAddressId ||
                    this.OriginAddressId != null &&
                    this.OriginAddressId.Equals(other.OriginAddressId)
                ) && 
                (
                    this.DiscountAmount == other.DiscountAmount ||
                    this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(other.DiscountAmount)
                ) && 
                (
                    this.DiscountTypeId == other.DiscountTypeId ||
                    this.DiscountTypeId != null &&
                    this.DiscountTypeId.Equals(other.DiscountTypeId)
                ) && 
                (
                    this.ExemptAmount == other.ExemptAmount ||
                    this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(other.ExemptAmount)
                ) && 
                (
                    this.ExemptCertId == other.ExemptCertId ||
                    this.ExemptCertId != null &&
                    this.ExemptCertId.Equals(other.ExemptCertId)
                ) && 
                (
                    this.ExemptNo == other.ExemptNo ||
                    this.ExemptNo != null &&
                    this.ExemptNo.Equals(other.ExemptNo)
                ) && 
                (
                    this.IsItemTaxable == other.IsItemTaxable ||
                    this.IsItemTaxable != null &&
                    this.IsItemTaxable.Equals(other.IsItemTaxable)
                ) && 
                (
                    this.IsSSTP == other.IsSSTP ||
                    this.IsSSTP != null &&
                    this.IsSSTP.Equals(other.IsSSTP)
                ) && 
                (
                    this.ItemCode == other.ItemCode ||
                    this.ItemCode != null &&
                    this.ItemCode.Equals(other.ItemCode)
                ) && 
                (
                    this.LineAmount == other.LineAmount ||
                    this.LineAmount != null &&
                    this.LineAmount.Equals(other.LineAmount)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                ) && 
                (
                    this.Ref1 == other.Ref1 ||
                    this.Ref1 != null &&
                    this.Ref1.Equals(other.Ref1)
                ) && 
                (
                    this.Ref2 == other.Ref2 ||
                    this.Ref2 != null &&
                    this.Ref2.Equals(other.Ref2)
                ) && 
                (
                    this.ReportingDate == other.ReportingDate ||
                    this.ReportingDate != null &&
                    this.ReportingDate.Equals(other.ReportingDate)
                ) && 
                (
                    this.RevAccount == other.RevAccount ||
                    this.RevAccount != null &&
                    this.RevAccount.Equals(other.RevAccount)
                ) && 
                (
                    this.Sourcing == other.Sourcing ||
                    this.Sourcing != null &&
                    this.Sourcing.Equals(other.Sourcing)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.TaxableAmount == other.TaxableAmount ||
                    this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(other.TaxableAmount)
                ) && 
                (
                    this.TaxCalculated == other.TaxCalculated ||
                    this.TaxCalculated != null &&
                    this.TaxCalculated.Equals(other.TaxCalculated)
                ) && 
                (
                    this.TaxCode == other.TaxCode ||
                    this.TaxCode != null &&
                    this.TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    this.TaxCodeId == other.TaxCodeId ||
                    this.TaxCodeId != null &&
                    this.TaxCodeId.Equals(other.TaxCodeId)
                ) && 
                (
                    this.TaxDate == other.TaxDate ||
                    this.TaxDate != null &&
                    this.TaxDate.Equals(other.TaxDate)
                ) && 
                (
                    this.TaxEngine == other.TaxEngine ||
                    this.TaxEngine != null &&
                    this.TaxEngine.Equals(other.TaxEngine)
                ) && 
                (
                    this.TaxOverrideType == other.TaxOverrideType ||
                    this.TaxOverrideType != null &&
                    this.TaxOverrideType.Equals(other.TaxOverrideType)
                ) && 
                (
                    this.TaxOverrideAmount == other.TaxOverrideAmount ||
                    this.TaxOverrideAmount != null &&
                    this.TaxOverrideAmount.Equals(other.TaxOverrideAmount)
                ) && 
                (
                    this.TaxOverrideReason == other.TaxOverrideReason ||
                    this.TaxOverrideReason != null &&
                    this.TaxOverrideReason.Equals(other.TaxOverrideReason)
                ) && 
                (
                    this.TaxIncluded == other.TaxIncluded ||
                    this.TaxIncluded != null &&
                    this.TaxIncluded.Equals(other.TaxIncluded)
                ) && 
                (
                    this.Details == other.Details ||
                    this.Details != null &&
                    this.Details.SequenceEqual(other.Details)
                ) && 
                (
                    this.Parameters == other.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(other.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.LineNumber != null)
                    hash = hash * 59 + this.LineNumber.GetHashCode();
                if (this.BoundaryOverrideId != null)
                    hash = hash * 59 + this.BoundaryOverrideId.GetHashCode();
                if (this.CustomerUsageType != null)
                    hash = hash * 59 + this.CustomerUsageType.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DestinationAddressId != null)
                    hash = hash * 59 + this.DestinationAddressId.GetHashCode();
                if (this.OriginAddressId != null)
                    hash = hash * 59 + this.OriginAddressId.GetHashCode();
                if (this.DiscountAmount != null)
                    hash = hash * 59 + this.DiscountAmount.GetHashCode();
                if (this.DiscountTypeId != null)
                    hash = hash * 59 + this.DiscountTypeId.GetHashCode();
                if (this.ExemptAmount != null)
                    hash = hash * 59 + this.ExemptAmount.GetHashCode();
                if (this.ExemptCertId != null)
                    hash = hash * 59 + this.ExemptCertId.GetHashCode();
                if (this.ExemptNo != null)
                    hash = hash * 59 + this.ExemptNo.GetHashCode();
                if (this.IsItemTaxable != null)
                    hash = hash * 59 + this.IsItemTaxable.GetHashCode();
                if (this.IsSSTP != null)
                    hash = hash * 59 + this.IsSSTP.GetHashCode();
                if (this.ItemCode != null)
                    hash = hash * 59 + this.ItemCode.GetHashCode();
                if (this.LineAmount != null)
                    hash = hash * 59 + this.LineAmount.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                if (this.Ref1 != null)
                    hash = hash * 59 + this.Ref1.GetHashCode();
                if (this.Ref2 != null)
                    hash = hash * 59 + this.Ref2.GetHashCode();
                if (this.ReportingDate != null)
                    hash = hash * 59 + this.ReportingDate.GetHashCode();
                if (this.RevAccount != null)
                    hash = hash * 59 + this.RevAccount.GetHashCode();
                if (this.Sourcing != null)
                    hash = hash * 59 + this.Sourcing.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.TaxableAmount != null)
                    hash = hash * 59 + this.TaxableAmount.GetHashCode();
                if (this.TaxCalculated != null)
                    hash = hash * 59 + this.TaxCalculated.GetHashCode();
                if (this.TaxCode != null)
                    hash = hash * 59 + this.TaxCode.GetHashCode();
                if (this.TaxCodeId != null)
                    hash = hash * 59 + this.TaxCodeId.GetHashCode();
                if (this.TaxDate != null)
                    hash = hash * 59 + this.TaxDate.GetHashCode();
                if (this.TaxEngine != null)
                    hash = hash * 59 + this.TaxEngine.GetHashCode();
                if (this.TaxOverrideType != null)
                    hash = hash * 59 + this.TaxOverrideType.GetHashCode();
                if (this.TaxOverrideAmount != null)
                    hash = hash * 59 + this.TaxOverrideAmount.GetHashCode();
                if (this.TaxOverrideReason != null)
                    hash = hash * 59 + this.TaxOverrideReason.GetHashCode();
                if (this.TaxIncluded != null)
                    hash = hash * 59 + this.TaxIncluded.GetHashCode();
                if (this.Details != null)
                    hash = hash * 59 + this.Details.GetHashCode();
                if (this.Parameters != null)
                    hash = hash * 59 + this.Parameters.GetHashCode();
                return hash;
            }
        }
    }

}
