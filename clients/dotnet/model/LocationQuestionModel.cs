/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Information about questions that the local jurisdictions require for each location
    /// </summary>
    [DataContract]
    public partial class LocationQuestionModel :  IEquatable<LocationQuestionModel>
    {
        /// <summary>
        /// Indicates which type of jurisdiction requires this question
        /// </summary>
        /// <value>Indicates which type of jurisdiction requires this question</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisdictionTypeEnum
        {
            
            /// <summary>
            /// Enum Country for "Country"
            /// </summary>
            [EnumMember(Value = "Country")]
            Country,
            
            /// <summary>
            /// Enum Composite for "Composite"
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum County for "County"
            /// </summary>
            [EnumMember(Value = "County")]
            County,
            
            /// <summary>
            /// Enum City for "City"
            /// </summary>
            [EnumMember(Value = "City")]
            City,
            
            /// <summary>
            /// Enum Special for "Special"
            /// </summary>
            [EnumMember(Value = "Special")]
            Special
        }

        /// <summary>
        /// Indicates which type of jurisdiction requires this question
        /// </summary>
        /// <value>Indicates which type of jurisdiction requires this question</value>
        [DataMember(Name="jurisdictionType", EmitDefaultValue=false)]
        public JurisdictionTypeEnum? JurisdictionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationQuestionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationQuestionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationQuestionModel" /> class.
        /// </summary>
        /// <param name="Id">The unique ID number of this location setting type (required).</param>
        /// <param name="Question">This is the prompt for this question (required).</param>
        /// <param name="Description">If additional information is available about the location setting, this contains descriptive text to help              you identify the correct value to provide in this setting. (required).</param>
        /// <param name="RegularExpression">If available, this regular expression will verify that the input from the user is in the expected format..</param>
        /// <param name="ExampleValue">If available, this is an example value that you can demonstrate to the user to show what is expected..</param>
        /// <param name="JurisdictionName">Indicates which jurisdiction requires this question.</param>
        /// <param name="JurisdictionType">Indicates which type of jurisdiction requires this question.</param>
        /// <param name="JurisdictionCountry">Indicates the country that this jurisdiction belongs to.</param>
        /// <param name="JurisdictionRegion">Indicates the state, region, or province that this jurisdiction belongs to.</param>
        public LocationQuestionModel(int? Id = null, string Question = null, string Description = null, string RegularExpression = null, string ExampleValue = null, string JurisdictionName = null, JurisdictionTypeEnum? JurisdictionType = null, string JurisdictionCountry = null, string JurisdictionRegion = null)
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for LocationQuestionModel and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Question" is required (not null)
            if (Question == null)
            {
                throw new InvalidDataException("Question is a required property for LocationQuestionModel and cannot be null");
            }
            else
            {
                this.Question = Question;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for LocationQuestionModel and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            this.RegularExpression = RegularExpression;
            this.ExampleValue = ExampleValue;
            this.JurisdictionName = JurisdictionName;
            this.JurisdictionType = JurisdictionType;
            this.JurisdictionCountry = JurisdictionCountry;
            this.JurisdictionRegion = JurisdictionRegion;
        }
        
        /// <summary>
        /// The unique ID number of this location setting type
        /// </summary>
        /// <value>The unique ID number of this location setting type</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }
        /// <summary>
        /// This is the prompt for this question
        /// </summary>
        /// <value>This is the prompt for this question</value>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public string Question { get; set; }
        /// <summary>
        /// If additional information is available about the location setting, this contains descriptive text to help              you identify the correct value to provide in this setting.
        /// </summary>
        /// <value>If additional information is available about the location setting, this contains descriptive text to help              you identify the correct value to provide in this setting.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// If available, this regular expression will verify that the input from the user is in the expected format.
        /// </summary>
        /// <value>If available, this regular expression will verify that the input from the user is in the expected format.</value>
        [DataMember(Name="regularExpression", EmitDefaultValue=false)]
        public string RegularExpression { get; set; }
        /// <summary>
        /// If available, this is an example value that you can demonstrate to the user to show what is expected.
        /// </summary>
        /// <value>If available, this is an example value that you can demonstrate to the user to show what is expected.</value>
        [DataMember(Name="exampleValue", EmitDefaultValue=false)]
        public string ExampleValue { get; set; }
        /// <summary>
        /// Indicates which jurisdiction requires this question
        /// </summary>
        /// <value>Indicates which jurisdiction requires this question</value>
        [DataMember(Name="jurisdictionName", EmitDefaultValue=false)]
        public string JurisdictionName { get; set; }
        /// <summary>
        /// Indicates the country that this jurisdiction belongs to
        /// </summary>
        /// <value>Indicates the country that this jurisdiction belongs to</value>
        [DataMember(Name="jurisdictionCountry", EmitDefaultValue=false)]
        public string JurisdictionCountry { get; set; }
        /// <summary>
        /// Indicates the state, region, or province that this jurisdiction belongs to
        /// </summary>
        /// <value>Indicates the state, region, or province that this jurisdiction belongs to</value>
        [DataMember(Name="jurisdictionRegion", EmitDefaultValue=false)]
        public string JurisdictionRegion { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationQuestionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RegularExpression: ").Append(RegularExpression).Append("\n");
            sb.Append("  ExampleValue: ").Append(ExampleValue).Append("\n");
            sb.Append("  JurisdictionName: ").Append(JurisdictionName).Append("\n");
            sb.Append("  JurisdictionType: ").Append(JurisdictionType).Append("\n");
            sb.Append("  JurisdictionCountry: ").Append(JurisdictionCountry).Append("\n");
            sb.Append("  JurisdictionRegion: ").Append(JurisdictionRegion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as LocationQuestionModel);
        }

        /// <summary>
        /// Returns true if LocationQuestionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of LocationQuestionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationQuestionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Question == other.Question ||
                    this.Question != null &&
                    this.Question.Equals(other.Question)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.RegularExpression == other.RegularExpression ||
                    this.RegularExpression != null &&
                    this.RegularExpression.Equals(other.RegularExpression)
                ) && 
                (
                    this.ExampleValue == other.ExampleValue ||
                    this.ExampleValue != null &&
                    this.ExampleValue.Equals(other.ExampleValue)
                ) && 
                (
                    this.JurisdictionName == other.JurisdictionName ||
                    this.JurisdictionName != null &&
                    this.JurisdictionName.Equals(other.JurisdictionName)
                ) && 
                (
                    this.JurisdictionType == other.JurisdictionType ||
                    this.JurisdictionType != null &&
                    this.JurisdictionType.Equals(other.JurisdictionType)
                ) && 
                (
                    this.JurisdictionCountry == other.JurisdictionCountry ||
                    this.JurisdictionCountry != null &&
                    this.JurisdictionCountry.Equals(other.JurisdictionCountry)
                ) && 
                (
                    this.JurisdictionRegion == other.JurisdictionRegion ||
                    this.JurisdictionRegion != null &&
                    this.JurisdictionRegion.Equals(other.JurisdictionRegion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Question != null)
                    hash = hash * 59 + this.Question.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.RegularExpression != null)
                    hash = hash * 59 + this.RegularExpression.GetHashCode();
                if (this.ExampleValue != null)
                    hash = hash * 59 + this.ExampleValue.GetHashCode();
                if (this.JurisdictionName != null)
                    hash = hash * 59 + this.JurisdictionName.GetHashCode();
                if (this.JurisdictionType != null)
                    hash = hash * 59 + this.JurisdictionType.GetHashCode();
                if (this.JurisdictionCountry != null)
                    hash = hash * 59 + this.JurisdictionCountry.GetHashCode();
                if (this.JurisdictionRegion != null)
                    hash = hash * 59 + this.JurisdictionRegion.GetHashCode();
                return hash;
            }
        }
    }

}
