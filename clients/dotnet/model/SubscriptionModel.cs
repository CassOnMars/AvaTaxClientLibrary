/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a service that this account has subscribed to.
    /// </summary>
    [DataContract]
    public partial class SubscriptionModel :  IEquatable<SubscriptionModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionModel" /> class.
        /// </summary>
        /// <param name="SubscriptionTypeId">The unique ID number of the service that the account is subscribed to..</param>
        /// <param name="SubscriptionDescription">A friendly description of the service that the account is subscribed to..</param>
        /// <param name="EffectiveDate">The date when the subscription began..</param>
        /// <param name="EndDate">If the subscription has ended or will end, this date indicates when the subscription ends..</param>
        public SubscriptionModel(int? SubscriptionTypeId = null, string SubscriptionDescription = null, DateTime? EffectiveDate = null, DateTime? EndDate = null)
        {
            this.SubscriptionTypeId = SubscriptionTypeId;
            this.SubscriptionDescription = SubscriptionDescription;
            this.EffectiveDate = EffectiveDate;
            this.EndDate = EndDate;
        }
        
        /// <summary>
        /// The unique ID number of this subscription.
        /// </summary>
        /// <value>The unique ID number of this subscription.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the account this subscription belongs to.
        /// </summary>
        /// <value>The unique ID number of the account this subscription belongs to.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; private set; }
        /// <summary>
        /// The unique ID number of the service that the account is subscribed to.
        /// </summary>
        /// <value>The unique ID number of the service that the account is subscribed to.</value>
        [DataMember(Name="subscriptionTypeId", EmitDefaultValue=false)]
        public int? SubscriptionTypeId { get; set; }
        /// <summary>
        /// A friendly description of the service that the account is subscribed to.
        /// </summary>
        /// <value>A friendly description of the service that the account is subscribed to.</value>
        [DataMember(Name="subscriptionDescription", EmitDefaultValue=false)]
        public string SubscriptionDescription { get; set; }
        /// <summary>
        /// The date when the subscription began.
        /// </summary>
        /// <value>The date when the subscription began.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }
        /// <summary>
        /// If the subscription has ended or will end, this date indicates when the subscription ends.
        /// </summary>
        /// <value>If the subscription has ended or will end, this date indicates when the subscription ends.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubscriptionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  SubscriptionTypeId: ").Append(SubscriptionTypeId).Append("\n");
            sb.Append("  SubscriptionDescription: ").Append(SubscriptionDescription).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SubscriptionModel);
        }

        /// <summary>
        /// Returns true if SubscriptionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of SubscriptionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.SubscriptionTypeId == other.SubscriptionTypeId ||
                    this.SubscriptionTypeId != null &&
                    this.SubscriptionTypeId.Equals(other.SubscriptionTypeId)
                ) && 
                (
                    this.SubscriptionDescription == other.SubscriptionDescription ||
                    this.SubscriptionDescription != null &&
                    this.SubscriptionDescription.Equals(other.SubscriptionDescription)
                ) && 
                (
                    this.EffectiveDate == other.EffectiveDate ||
                    this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.SubscriptionTypeId != null)
                    hash = hash * 59 + this.SubscriptionTypeId.GetHashCode();
                if (this.SubscriptionDescription != null)
                    hash = hash * 59 + this.SubscriptionDescription.GetHashCode();
                if (this.EffectiveDate != null)
                    hash = hash * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
