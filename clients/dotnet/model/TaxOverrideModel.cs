/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a tax override for a transaction
    /// </summary>
    [DataContract]
    public partial class TaxOverrideModel :  IEquatable<TaxOverrideModel>
    {
        /// <summary>
        /// Identifies the type of tax override
        /// </summary>
        /// <value>Identifies the type of tax override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum TaxAmount for "TaxAmount"
            /// </summary>
            [EnumMember(Value = "TaxAmount")]
            TaxAmount,
            
            /// <summary>
            /// Enum Exemption for "Exemption"
            /// </summary>
            [EnumMember(Value = "Exemption")]
            Exemption,
            
            /// <summary>
            /// Enum TaxDate for "TaxDate"
            /// </summary>
            [EnumMember(Value = "TaxDate")]
            TaxDate,
            
            /// <summary>
            /// Enum AccruedTaxAmount for "AccruedTaxAmount"
            /// </summary>
            [EnumMember(Value = "AccruedTaxAmount")]
            AccruedTaxAmount,
            
            /// <summary>
            /// Enum DeriveTaxable for "DeriveTaxable"
            /// </summary>
            [EnumMember(Value = "DeriveTaxable")]
            DeriveTaxable
        }

        /// <summary>
        /// Identifies the type of tax override
        /// </summary>
        /// <value>Identifies the type of tax override</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxOverrideModel" /> class.
        /// </summary>
        /// <param name="Type">Identifies the type of tax override.</param>
        /// <param name="TaxAmount">Indicates a total override of the calculated tax on the document.  AvaTax will distribute                  the override across all the lines..</param>
        /// <param name="TaxDate">The override tax date to use.</param>
        /// <param name="Reason">This provides the reason for a tax override for audit purposes.  It is required for types 2-4..</param>
        public TaxOverrideModel(TypeEnum? Type = null, double? TaxAmount = null, DateTime? TaxDate = null, string Reason = null)
        {
            this.Type = Type;
            this.TaxAmount = TaxAmount;
            this.TaxDate = TaxDate;
            this.Reason = Reason;
        }
        
        /// <summary>
        /// Indicates a total override of the calculated tax on the document.  AvaTax will distribute                  the override across all the lines.
        /// </summary>
        /// <value>Indicates a total override of the calculated tax on the document.  AvaTax will distribute                  the override across all the lines.</value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public double? TaxAmount { get; set; }
        /// <summary>
        /// The override tax date to use
        /// </summary>
        /// <value>The override tax date to use</value>
        [DataMember(Name="taxDate", EmitDefaultValue=false)]
        public DateTime? TaxDate { get; set; }
        /// <summary>
        /// This provides the reason for a tax override for audit purposes.  It is required for types 2-4.
        /// </summary>
        /// <value>This provides the reason for a tax override for audit purposes.  It is required for types 2-4.</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxOverrideModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxDate: ").Append(TaxDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxOverrideModel);
        }

        /// <summary>
        /// Returns true if TaxOverrideModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxOverrideModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxOverrideModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.TaxDate == other.TaxDate ||
                    this.TaxDate != null &&
                    this.TaxDate.Equals(other.TaxDate)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxDate != null)
                    hash = hash * 59 + this.TaxDate.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                return hash;
            }
        }
    }

}
