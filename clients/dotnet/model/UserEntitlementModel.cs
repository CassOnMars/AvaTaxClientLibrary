/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// User Entitlement Model
    /// </summary>
    [DataContract]
    public partial class UserEntitlementModel :  IEquatable<UserEntitlementModel>
    {
        /// <summary>
        /// What access privileges does the current user have to see companies?
        /// </summary>
        /// <value>What access privileges does the current user have to see companies?</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessLevelEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum SingleCompany for "SingleCompany"
            /// </summary>
            [EnumMember(Value = "SingleCompany")]
            SingleCompany,
            
            /// <summary>
            /// Enum SingleAccount for "SingleAccount"
            /// </summary>
            [EnumMember(Value = "SingleAccount")]
            SingleAccount,
            
            /// <summary>
            /// Enum AllCompanies for "AllCompanies"
            /// </summary>
            [EnumMember(Value = "AllCompanies")]
            AllCompanies
        }

        /// <summary>
        /// What access privileges does the current user have to see companies?
        /// </summary>
        /// <value>What access privileges does the current user have to see companies?</value>
        [DataMember(Name="accessLevel", EmitDefaultValue=false)]
        public AccessLevelEnum? AccessLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserEntitlementModel" /> class.
        /// </summary>
        /// <param name="Permissions">List of API names and categories that this user is permitted to access.</param>
        /// <param name="AccessLevel">What access privileges does the current user have to see companies?.</param>
        /// <param name="Companies">The identities of all companies this user is permitted to access.</param>
        public UserEntitlementModel(List<string> Permissions = null, AccessLevelEnum? AccessLevel = null, List<int?> Companies = null)
        {
            this.Permissions = Permissions;
            this.AccessLevel = AccessLevel;
            this.Companies = Companies;
        }
        
        /// <summary>
        /// List of API names and categories that this user is permitted to access
        /// </summary>
        /// <value>List of API names and categories that this user is permitted to access</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<string> Permissions { get; set; }
        /// <summary>
        /// The identities of all companies this user is permitted to access
        /// </summary>
        /// <value>The identities of all companies this user is permitted to access</value>
        [DataMember(Name="companies", EmitDefaultValue=false)]
        public List<int?> Companies { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserEntitlementModel {\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  AccessLevel: ").Append(AccessLevel).Append("\n");
            sb.Append("  Companies: ").Append(Companies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserEntitlementModel);
        }

        /// <summary>
        /// Returns true if UserEntitlementModel instances are equal
        /// </summary>
        /// <param name="other">Instance of UserEntitlementModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserEntitlementModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Permissions == other.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(other.Permissions)
                ) && 
                (
                    this.AccessLevel == other.AccessLevel ||
                    this.AccessLevel != null &&
                    this.AccessLevel.Equals(other.AccessLevel)
                ) && 
                (
                    this.Companies == other.Companies ||
                    this.Companies != null &&
                    this.Companies.SequenceEqual(other.Companies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Permissions != null)
                    hash = hash * 59 + this.Permissions.GetHashCode();
                if (this.AccessLevel != null)
                    hash = hash * 59 + this.AccessLevel.GetHashCode();
                if (this.Companies != null)
                    hash = hash * 59 + this.Companies.GetHashCode();
                return hash;
            }
        }
    }

}
