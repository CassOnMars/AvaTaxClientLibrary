/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// An AvaTax account.
    /// </summary>
    [DataContract]
    public partial class AccountModel :  IEquatable<AccountModel>
    {
        /// <summary>
        /// The current status of this account.
        /// </summary>
        /// <value>The current status of this account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusIdEnum
        {
            
            /// <summary>
            /// Enum Inactive for "Inactive"
            /// </summary>
            [EnumMember(Value = "Inactive")]
            Inactive,
            
            /// <summary>
            /// Enum Active for "Active"
            /// </summary>
            [EnumMember(Value = "Active")]
            Active,
            
            /// <summary>
            /// Enum Test for "Test"
            /// </summary>
            [EnumMember(Value = "Test")]
            Test,
            
            /// <summary>
            /// Enum New for "New"
            /// </summary>
            [EnumMember(Value = "New")]
            New
        }

        /// <summary>
        /// The current status of this account.
        /// </summary>
        /// <value>The current status of this account.</value>
        [DataMember(Name="accountStatusId", EmitDefaultValue=false)]
        public AccountStatusIdEnum? AccountStatusId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountModel" /> class.
        /// </summary>
        /// <param name="Name">The name of this account. (required).</param>
        /// <param name="EffectiveDate">The earliest date on which this account may be used..</param>
        /// <param name="EndDate">If this account has been closed, this is the last date the account was open..</param>
        /// <param name="AccountStatusId">The current status of this account..</param>
        /// <param name="Subscriptions">Optional: A list of subscriptions granted to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Subscriptions\&quot; to your URL..</param>
        /// <param name="Users">Optional: A list of all the users belonging to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Users\&quot; to your URL..</param>
        public AccountModel(string Name = null, DateTime? EffectiveDate = null, DateTime? EndDate = null, AccountStatusIdEnum? AccountStatusId = null, List<SubscriptionModel> Subscriptions = null, List<UserModel> Users = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AccountModel and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.EffectiveDate = EffectiveDate;
            this.EndDate = EndDate;
            this.AccountStatusId = AccountStatusId;
            this.Subscriptions = Subscriptions;
            this.Users = Users;
        }
        
        /// <summary>
        /// The unique ID number assigned to this account.
        /// </summary>
        /// <value>The unique ID number assigned to this account.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The name of this account.
        /// </summary>
        /// <value>The name of this account.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The earliest date on which this account may be used.
        /// </summary>
        /// <value>The earliest date on which this account may be used.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }
        /// <summary>
        /// If this account has been closed, this is the last date the account was open.
        /// </summary>
        /// <value>If this account has been closed, this is the last date the account was open.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Optional: A list of subscriptions granted to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Subscriptions\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of subscriptions granted to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Subscriptions\&quot; to your URL.</value>
        [DataMember(Name="subscriptions", EmitDefaultValue=false)]
        public List<SubscriptionModel> Subscriptions { get; set; }
        /// <summary>
        /// Optional: A list of all the users belonging to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Users\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of all the users belonging to this account.  To fetch this list, add the query string \&quot;?$include&#x3D;Users\&quot; to your URL.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<UserModel> Users { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AccountStatusId: ").Append(AccountStatusId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AccountModel);
        }

        /// <summary>
        /// Returns true if AccountModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.EffectiveDate == other.EffectiveDate ||
                    this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.AccountStatusId == other.AccountStatusId ||
                    this.AccountStatusId != null &&
                    this.AccountStatusId.Equals(other.AccountStatusId)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                ) && 
                (
                    this.Subscriptions == other.Subscriptions ||
                    this.Subscriptions != null &&
                    this.Subscriptions.SequenceEqual(other.Subscriptions)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.EffectiveDate != null)
                    hash = hash * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.AccountStatusId != null)
                    hash = hash * 59 + this.AccountStatusId.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                if (this.Subscriptions != null)
                    hash = hash * 59 + this.Subscriptions.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                return hash;
            }
        }
    }

}
