/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Summary information about an overall transaction.
    /// </summary>
    [DataContract]
    public partial class TransactionSummary :  IEquatable<TransactionSummary>
    {
        /// <summary>
        /// The type of jurisdiction that collects this tax.
        /// </summary>
        /// <value>The type of jurisdiction that collects this tax.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisTypeEnum
        {
            
            /// <summary>
            /// Enum Country for "Country"
            /// </summary>
            [EnumMember(Value = "Country")]
            Country,
            
            /// <summary>
            /// Enum Composite for "Composite"
            /// </summary>
            [EnumMember(Value = "Composite")]
            Composite,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum County for "County"
            /// </summary>
            [EnumMember(Value = "County")]
            County,
            
            /// <summary>
            /// Enum City for "City"
            /// </summary>
            [EnumMember(Value = "City")]
            City,
            
            /// <summary>
            /// Enum Special for "Special"
            /// </summary>
            [EnumMember(Value = "Special")]
            Special
        }

        /// <summary>
        /// The tax type of this tax.
        /// </summary>
        /// <value>The tax type of this tax.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeEnum
        {
            
            /// <summary>
            /// Enum ConsumerUse for "ConsumerUse"
            /// </summary>
            [EnumMember(Value = "ConsumerUse")]
            ConsumerUse,
            
            /// <summary>
            /// Enum Excise for "Excise"
            /// </summary>
            [EnumMember(Value = "Excise")]
            Excise,
            
            /// <summary>
            /// Enum Fee for "Fee"
            /// </summary>
            [EnumMember(Value = "Fee")]
            Fee,
            
            /// <summary>
            /// Enum Input for "Input"
            /// </summary>
            [EnumMember(Value = "Input")]
            Input,
            
            /// <summary>
            /// Enum Nonrecoverable for "Nonrecoverable"
            /// </summary>
            [EnumMember(Value = "Nonrecoverable")]
            Nonrecoverable,
            
            /// <summary>
            /// Enum Output for "Output"
            /// </summary>
            [EnumMember(Value = "Output")]
            Output,
            
            /// <summary>
            /// Enum Rental for "Rental"
            /// </summary>
            [EnumMember(Value = "Rental")]
            Rental,
            
            /// <summary>
            /// Enum Sales for "Sales"
            /// </summary>
            [EnumMember(Value = "Sales")]
            Sales,
            
            /// <summary>
            /// Enum Use for "Use"
            /// </summary>
            [EnumMember(Value = "Use")]
            Use
        }

        /// <summary>
        /// Indicates the tax rate type.
        /// </summary>
        /// <value>Indicates the tax rate type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RateTypeEnum
        {
            
            /// <summary>
            /// Enum ReducedA for "ReducedA"
            /// </summary>
            [EnumMember(Value = "ReducedA")]
            ReducedA,
            
            /// <summary>
            /// Enum ReducedB for "ReducedB"
            /// </summary>
            [EnumMember(Value = "ReducedB")]
            ReducedB,
            
            /// <summary>
            /// Enum Food for "Food"
            /// </summary>
            [EnumMember(Value = "Food")]
            Food,
            
            /// <summary>
            /// Enum General for "General"
            /// </summary>
            [EnumMember(Value = "General")]
            General,
            
            /// <summary>
            /// Enum IncreasedStandard for "IncreasedStandard"
            /// </summary>
            [EnumMember(Value = "IncreasedStandard")]
            IncreasedStandard,
            
            /// <summary>
            /// Enum LinenRental for "LinenRental"
            /// </summary>
            [EnumMember(Value = "LinenRental")]
            LinenRental,
            
            /// <summary>
            /// Enum Medical for "Medical"
            /// </summary>
            [EnumMember(Value = "Medical")]
            Medical,
            
            /// <summary>
            /// Enum Parking for "Parking"
            /// </summary>
            [EnumMember(Value = "Parking")]
            Parking,
            
            /// <summary>
            /// Enum SuperReduced for "SuperReduced"
            /// </summary>
            [EnumMember(Value = "SuperReduced")]
            SuperReduced,
            
            /// <summary>
            /// Enum ReducedR for "ReducedR"
            /// </summary>
            [EnumMember(Value = "ReducedR")]
            ReducedR,
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Zero for "Zero"
            /// </summary>
            [EnumMember(Value = "Zero")]
            Zero
        }

        /// <summary>
        /// The type of jurisdiction that collects this tax.
        /// </summary>
        /// <value>The type of jurisdiction that collects this tax.</value>
        [DataMember(Name="jurisType", EmitDefaultValue=false)]
        public JurisTypeEnum? JurisType { get; set; }
        /// <summary>
        /// The tax type of this tax.
        /// </summary>
        /// <value>The tax type of this tax.</value>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public TaxTypeEnum? TaxType { get; set; }
        /// <summary>
        /// Indicates the tax rate type.
        /// </summary>
        /// <value>Indicates the tax rate type.</value>
        [DataMember(Name="rateType", EmitDefaultValue=false)]
        public RateTypeEnum? RateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionSummary" /> class.
        /// </summary>
        /// <param name="Country">Two character ISO-3166 country code..</param>
        /// <param name="Region">Two or three character ISO region, state or province code, if applicable..</param>
        /// <param name="JurisType">The type of jurisdiction that collects this tax..</param>
        /// <param name="JurisCode">Jurisdiction Code for the taxing jurisdiction.</param>
        /// <param name="JurisName">The name of the jurisdiction that collects this tax..</param>
        /// <param name="TaxAuthorityType">The unique ID of the Tax Authority Type that collects this tax..</param>
        /// <param name="StateAssignedNo">The state assigned number of the jurisdiction that collects this tax..</param>
        /// <param name="TaxType">The tax type of this tax..</param>
        /// <param name="TaxName">The name of the tax..</param>
        /// <param name="TaxGroup">Group code when special grouping is enabled..</param>
        /// <param name="RateType">Indicates the tax rate type..</param>
        /// <param name="Taxable">Tax Base - The adjusted taxable amount..</param>
        /// <param name="Rate">Tax Rate - The rate of taxation, as a fraction of the amount..</param>
        /// <param name="Tax">Tax amount - The calculated tax (Base * Rate)..</param>
        /// <param name="TaxCalculated">Tax Calculated by Avalara AvaTax.  This may be overriden by a TaxOverride.TaxAmount..</param>
        /// <param name="NonTaxable">The amount of the transaction that was non-taxable..</param>
        /// <param name="Exemption">The amount of the transaction that was exempt..</param>
        public TransactionSummary(string Country = null, string Region = null, JurisTypeEnum? JurisType = null, string JurisCode = null, string JurisName = null, int? TaxAuthorityType = null, string StateAssignedNo = null, TaxTypeEnum? TaxType = null, string TaxName = null, string TaxGroup = null, RateTypeEnum? RateType = null, double? Taxable = null, double? Rate = null, double? Tax = null, double? TaxCalculated = null, double? NonTaxable = null, double? Exemption = null)
        {
            this.Country = Country;
            this.Region = Region;
            this.JurisType = JurisType;
            this.JurisCode = JurisCode;
            this.JurisName = JurisName;
            this.TaxAuthorityType = TaxAuthorityType;
            this.StateAssignedNo = StateAssignedNo;
            this.TaxType = TaxType;
            this.TaxName = TaxName;
            this.TaxGroup = TaxGroup;
            this.RateType = RateType;
            this.Taxable = Taxable;
            this.Rate = Rate;
            this.Tax = Tax;
            this.TaxCalculated = TaxCalculated;
            this.NonTaxable = NonTaxable;
            this.Exemption = Exemption;
        }
        
        /// <summary>
        /// Two character ISO-3166 country code.
        /// </summary>
        /// <value>Two character ISO-3166 country code.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Two or three character ISO region, state or province code, if applicable.
        /// </summary>
        /// <value>Two or three character ISO region, state or province code, if applicable.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// Jurisdiction Code for the taxing jurisdiction
        /// </summary>
        /// <value>Jurisdiction Code for the taxing jurisdiction</value>
        [DataMember(Name="jurisCode", EmitDefaultValue=false)]
        public string JurisCode { get; set; }
        /// <summary>
        /// The name of the jurisdiction that collects this tax.
        /// </summary>
        /// <value>The name of the jurisdiction that collects this tax.</value>
        [DataMember(Name="jurisName", EmitDefaultValue=false)]
        public string JurisName { get; set; }
        /// <summary>
        /// The unique ID of the Tax Authority Type that collects this tax.
        /// </summary>
        /// <value>The unique ID of the Tax Authority Type that collects this tax.</value>
        [DataMember(Name="taxAuthorityType", EmitDefaultValue=false)]
        public int? TaxAuthorityType { get; set; }
        /// <summary>
        /// The state assigned number of the jurisdiction that collects this tax.
        /// </summary>
        /// <value>The state assigned number of the jurisdiction that collects this tax.</value>
        [DataMember(Name="stateAssignedNo", EmitDefaultValue=false)]
        public string StateAssignedNo { get; set; }
        /// <summary>
        /// The name of the tax.
        /// </summary>
        /// <value>The name of the tax.</value>
        [DataMember(Name="taxName", EmitDefaultValue=false)]
        public string TaxName { get; set; }
        /// <summary>
        /// Group code when special grouping is enabled.
        /// </summary>
        /// <value>Group code when special grouping is enabled.</value>
        [DataMember(Name="taxGroup", EmitDefaultValue=false)]
        public string TaxGroup { get; set; }
        /// <summary>
        /// Tax Base - The adjusted taxable amount.
        /// </summary>
        /// <value>Tax Base - The adjusted taxable amount.</value>
        [DataMember(Name="taxable", EmitDefaultValue=false)]
        public double? Taxable { get; set; }
        /// <summary>
        /// Tax Rate - The rate of taxation, as a fraction of the amount.
        /// </summary>
        /// <value>Tax Rate - The rate of taxation, as a fraction of the amount.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// Tax amount - The calculated tax (Base * Rate).
        /// </summary>
        /// <value>Tax amount - The calculated tax (Base * Rate).</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// Tax Calculated by Avalara AvaTax.  This may be overriden by a TaxOverride.TaxAmount.
        /// </summary>
        /// <value>Tax Calculated by Avalara AvaTax.  This may be overriden by a TaxOverride.TaxAmount.</value>
        [DataMember(Name="taxCalculated", EmitDefaultValue=false)]
        public double? TaxCalculated { get; set; }
        /// <summary>
        /// The amount of the transaction that was non-taxable.
        /// </summary>
        /// <value>The amount of the transaction that was non-taxable.</value>
        [DataMember(Name="nonTaxable", EmitDefaultValue=false)]
        public double? NonTaxable { get; set; }
        /// <summary>
        /// The amount of the transaction that was exempt.
        /// </summary>
        /// <value>The amount of the transaction that was exempt.</value>
        [DataMember(Name="exemption", EmitDefaultValue=false)]
        public double? Exemption { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionSummary {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  JurisType: ").Append(JurisType).Append("\n");
            sb.Append("  JurisCode: ").Append(JurisCode).Append("\n");
            sb.Append("  JurisName: ").Append(JurisName).Append("\n");
            sb.Append("  TaxAuthorityType: ").Append(TaxAuthorityType).Append("\n");
            sb.Append("  StateAssignedNo: ").Append(StateAssignedNo).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxName: ").Append(TaxName).Append("\n");
            sb.Append("  TaxGroup: ").Append(TaxGroup).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxCalculated: ").Append(TaxCalculated).Append("\n");
            sb.Append("  NonTaxable: ").Append(NonTaxable).Append("\n");
            sb.Append("  Exemption: ").Append(Exemption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionSummary);
        }

        /// <summary>
        /// Returns true if TransactionSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionSummary other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.JurisType == other.JurisType ||
                    this.JurisType != null &&
                    this.JurisType.Equals(other.JurisType)
                ) && 
                (
                    this.JurisCode == other.JurisCode ||
                    this.JurisCode != null &&
                    this.JurisCode.Equals(other.JurisCode)
                ) && 
                (
                    this.JurisName == other.JurisName ||
                    this.JurisName != null &&
                    this.JurisName.Equals(other.JurisName)
                ) && 
                (
                    this.TaxAuthorityType == other.TaxAuthorityType ||
                    this.TaxAuthorityType != null &&
                    this.TaxAuthorityType.Equals(other.TaxAuthorityType)
                ) && 
                (
                    this.StateAssignedNo == other.StateAssignedNo ||
                    this.StateAssignedNo != null &&
                    this.StateAssignedNo.Equals(other.StateAssignedNo)
                ) && 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.TaxName == other.TaxName ||
                    this.TaxName != null &&
                    this.TaxName.Equals(other.TaxName)
                ) && 
                (
                    this.TaxGroup == other.TaxGroup ||
                    this.TaxGroup != null &&
                    this.TaxGroup.Equals(other.TaxGroup)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.Taxable == other.Taxable ||
                    this.Taxable != null &&
                    this.Taxable.Equals(other.Taxable)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.TaxCalculated == other.TaxCalculated ||
                    this.TaxCalculated != null &&
                    this.TaxCalculated.Equals(other.TaxCalculated)
                ) && 
                (
                    this.NonTaxable == other.NonTaxable ||
                    this.NonTaxable != null &&
                    this.NonTaxable.Equals(other.NonTaxable)
                ) && 
                (
                    this.Exemption == other.Exemption ||
                    this.Exemption != null &&
                    this.Exemption.Equals(other.Exemption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.JurisType != null)
                    hash = hash * 59 + this.JurisType.GetHashCode();
                if (this.JurisCode != null)
                    hash = hash * 59 + this.JurisCode.GetHashCode();
                if (this.JurisName != null)
                    hash = hash * 59 + this.JurisName.GetHashCode();
                if (this.TaxAuthorityType != null)
                    hash = hash * 59 + this.TaxAuthorityType.GetHashCode();
                if (this.StateAssignedNo != null)
                    hash = hash * 59 + this.StateAssignedNo.GetHashCode();
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.TaxName != null)
                    hash = hash * 59 + this.TaxName.GetHashCode();
                if (this.TaxGroup != null)
                    hash = hash * 59 + this.TaxGroup.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.Taxable != null)
                    hash = hash * 59 + this.Taxable.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.TaxCalculated != null)
                    hash = hash * 59 + this.TaxCalculated.GetHashCode();
                if (this.NonTaxable != null)
                    hash = hash * 59 + this.NonTaxable.GetHashCode();
                if (this.Exemption != null)
                    hash = hash * 59 + this.Exemption.GetHashCode();
                return hash;
            }
        }
    }

}
