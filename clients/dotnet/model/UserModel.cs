/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// An account user who is permitted to use AvaTax.
    /// </summary>
    [DataContract]
    public partial class UserModel :  IEquatable<UserModel>
    {
        /// <summary>
        /// The security level for this user.
        /// </summary>
        /// <value>The security level for this user.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SecurityRoleIdEnum
        {
            
            /// <summary>
            /// Enum NoAccess for "NoAccess"
            /// </summary>
            [EnumMember(Value = "NoAccess")]
            NoAccess,
            
            /// <summary>
            /// Enum SiteAdmin for "SiteAdmin"
            /// </summary>
            [EnumMember(Value = "SiteAdmin")]
            SiteAdmin,
            
            /// <summary>
            /// Enum AccountOperator for "AccountOperator"
            /// </summary>
            [EnumMember(Value = "AccountOperator")]
            AccountOperator,
            
            /// <summary>
            /// Enum AccountAdmin for "AccountAdmin"
            /// </summary>
            [EnumMember(Value = "AccountAdmin")]
            AccountAdmin,
            
            /// <summary>
            /// Enum AccountUser for "AccountUser"
            /// </summary>
            [EnumMember(Value = "AccountUser")]
            AccountUser,
            
            /// <summary>
            /// Enum SystemAdmin for "SystemAdmin"
            /// </summary>
            [EnumMember(Value = "SystemAdmin")]
            SystemAdmin,
            
            /// <summary>
            /// Enum Registrar for "Registrar"
            /// </summary>
            [EnumMember(Value = "Registrar")]
            Registrar,
            
            /// <summary>
            /// Enum CSPTester for "CSPTester"
            /// </summary>
            [EnumMember(Value = "CSPTester")]
            CSPTester,
            
            /// <summary>
            /// Enum CSPAdmin for "CSPAdmin"
            /// </summary>
            [EnumMember(Value = "CSPAdmin")]
            CSPAdmin,
            
            /// <summary>
            /// Enum SystemOperator for "SystemOperator"
            /// </summary>
            [EnumMember(Value = "SystemOperator")]
            SystemOperator,
            
            /// <summary>
            /// Enum TechnicalSupportUser for "TechnicalSupportUser"
            /// </summary>
            [EnumMember(Value = "TechnicalSupportUser")]
            TechnicalSupportUser,
            
            /// <summary>
            /// Enum TechnicalSupportAdmin for "TechnicalSupportAdmin"
            /// </summary>
            [EnumMember(Value = "TechnicalSupportAdmin")]
            TechnicalSupportAdmin,
            
            /// <summary>
            /// Enum TreasuryUser for "TreasuryUser"
            /// </summary>
            [EnumMember(Value = "TreasuryUser")]
            TreasuryUser,
            
            /// <summary>
            /// Enum TreasuryAdmin for "TreasuryAdmin"
            /// </summary>
            [EnumMember(Value = "TreasuryAdmin")]
            TreasuryAdmin,
            
            /// <summary>
            /// Enum ComplianceUser for "ComplianceUser"
            /// </summary>
            [EnumMember(Value = "ComplianceUser")]
            ComplianceUser,
            
            /// <summary>
            /// Enum ComplianceAdmin for "ComplianceAdmin"
            /// </summary>
            [EnumMember(Value = "ComplianceAdmin")]
            ComplianceAdmin,
            
            /// <summary>
            /// Enum ProStoresOperator for "ProStoresOperator"
            /// </summary>
            [EnumMember(Value = "ProStoresOperator")]
            ProStoresOperator,
            
            /// <summary>
            /// Enum CompanyUser for "CompanyUser"
            /// </summary>
            [EnumMember(Value = "CompanyUser")]
            CompanyUser,
            
            /// <summary>
            /// Enum CompanyAdmin for "CompanyAdmin"
            /// </summary>
            [EnumMember(Value = "CompanyAdmin")]
            CompanyAdmin,
            
            /// <summary>
            /// Enum ComplianceTempUser for "ComplianceTempUser"
            /// </summary>
            [EnumMember(Value = "ComplianceTempUser")]
            ComplianceTempUser,
            
            /// <summary>
            /// Enum ComplianceRootUser for "ComplianceRootUser"
            /// </summary>
            [EnumMember(Value = "ComplianceRootUser")]
            ComplianceRootUser,
            
            /// <summary>
            /// Enum ComplianceOperator for "ComplianceOperator"
            /// </summary>
            [EnumMember(Value = "ComplianceOperator")]
            ComplianceOperator,
            
            /// <summary>
            /// Enum SSTAdmin for "SSTAdmin"
            /// </summary>
            [EnumMember(Value = "SSTAdmin")]
            SSTAdmin
        }

        /// <summary>
        /// The status of the user's password.
        /// </summary>
        /// <value>The status of the user's password.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PasswordStatusEnum
        {
            
            /// <summary>
            /// Enum UserCannotChange for "UserCannotChange"
            /// </summary>
            [EnumMember(Value = "UserCannotChange")]
            UserCannotChange,
            
            /// <summary>
            /// Enum UserCanChange for "UserCanChange"
            /// </summary>
            [EnumMember(Value = "UserCanChange")]
            UserCanChange,
            
            /// <summary>
            /// Enum UserMustChange for "UserMustChange"
            /// </summary>
            [EnumMember(Value = "UserMustChange")]
            UserMustChange
        }

        /// <summary>
        /// The security level for this user.
        /// </summary>
        /// <value>The security level for this user.</value>
        [DataMember(Name="securityRoleId", EmitDefaultValue=false)]
        public SecurityRoleIdEnum? SecurityRoleId { get; set; }
        /// <summary>
        /// The status of the user's password.
        /// </summary>
        /// <value>The status of the user's password.</value>
        [DataMember(Name="passwordStatus", EmitDefaultValue=false)]
        public PasswordStatusEnum? PasswordStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserModel" /> class.
        /// </summary>
        /// <param name="CompanyId">If this user is locked to one company (and its children), this is the unique ID number of the company to which this user belongs..</param>
        /// <param name="FirstName">The first or given name of the user..</param>
        /// <param name="LastName">The last or family name of the user..</param>
        /// <param name="Email">The email address to be used to contact this user.  If the user has forgotten a password, an email can be sent to this email address with information on how to reset this password. (required).</param>
        /// <param name="PostalCode">The postal code in which this user resides. (required).</param>
        /// <param name="SecurityRoleId">The security level for this user. (required).</param>
        /// <param name="PasswordStatus">The status of the user&#39;s password..</param>
        /// <param name="IsActive">True if this user is currently active..</param>
        public UserModel(int? CompanyId = null, string FirstName = null, string LastName = null, string Email = null, string PostalCode = null, SecurityRoleIdEnum? SecurityRoleId = null, PasswordStatusEnum? PasswordStatus = null, bool? IsActive = null)
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for UserModel and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "PostalCode" is required (not null)
            if (PostalCode == null)
            {
                throw new InvalidDataException("PostalCode is a required property for UserModel and cannot be null");
            }
            else
            {
                this.PostalCode = PostalCode;
            }
            // to ensure "SecurityRoleId" is required (not null)
            if (SecurityRoleId == null)
            {
                throw new InvalidDataException("SecurityRoleId is a required property for UserModel and cannot be null");
            }
            else
            {
                this.SecurityRoleId = SecurityRoleId;
            }
            this.CompanyId = CompanyId;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.PasswordStatus = PasswordStatus;
            this.IsActive = IsActive;
        }
        
        /// <summary>
        /// The unique ID number of this user.
        /// </summary>
        /// <value>The unique ID number of this user.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the account to which this user belongs.
        /// </summary>
        /// <value>The unique ID number of the account to which this user belongs.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; private set; }
        /// <summary>
        /// If this user is locked to one company (and its children), this is the unique ID number of the company to which this user belongs.
        /// </summary>
        /// <value>If this user is locked to one company (and its children), this is the unique ID number of the company to which this user belongs.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }
        /// <summary>
        /// The username which is used to log on to the AvaTax website, or to authenticate against API calls.
        /// </summary>
        /// <value>The username which is used to log on to the AvaTax website, or to authenticate against API calls.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; private set; }
        /// <summary>
        /// The first or given name of the user.
        /// </summary>
        /// <value>The first or given name of the user.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// The last or family name of the user.
        /// </summary>
        /// <value>The last or family name of the user.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// The email address to be used to contact this user.  If the user has forgotten a password, an email can be sent to this email address with information on how to reset this password.
        /// </summary>
        /// <value>The email address to be used to contact this user.  If the user has forgotten a password, an email can be sent to this email address with information on how to reset this password.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The postal code in which this user resides.
        /// </summary>
        /// <value>The postal code in which this user resides.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// True if this user is currently active.
        /// </summary>
        /// <value>True if this user is currently active.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  SecurityRoleId: ").Append(SecurityRoleId).Append("\n");
            sb.Append("  PasswordStatus: ").Append(PasswordStatus).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserModel);
        }

        /// <summary>
        /// Returns true if UserModel instances are equal
        /// </summary>
        /// <param name="other">Instance of UserModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.SecurityRoleId == other.SecurityRoleId ||
                    this.SecurityRoleId != null &&
                    this.SecurityRoleId.Equals(other.SecurityRoleId)
                ) && 
                (
                    this.PasswordStatus == other.PasswordStatus ||
                    this.PasswordStatus != null &&
                    this.PasswordStatus.Equals(other.PasswordStatus)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.SecurityRoleId != null)
                    hash = hash * 59 + this.SecurityRoleId.GetHashCode();
                if (this.PasswordStatus != null)
                    hash = hash * 59 + this.PasswordStatus.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
