/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Message object
    /// </summary>
    [DataContract]
    public partial class ErrorDetail :  IEquatable<ErrorDetail>
    {
        /// <summary>
        /// Name of the error.
        /// </summary>
        /// <value>Name of the error.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CodeEnum
        {
            
            /// <summary>
            /// Enum ServerConfiguration for "ServerConfiguration"
            /// </summary>
            [EnumMember(Value = "ServerConfiguration")]
            ServerConfiguration,
            
            /// <summary>
            /// Enum AccountInvalidException for "AccountInvalidException"
            /// </summary>
            [EnumMember(Value = "AccountInvalidException")]
            AccountInvalidException,
            
            /// <summary>
            /// Enum CompanyInvalidException for "CompanyInvalidException"
            /// </summary>
            [EnumMember(Value = "CompanyInvalidException")]
            CompanyInvalidException,
            
            /// <summary>
            /// Enum EntityNotFoundError for "EntityNotFoundError"
            /// </summary>
            [EnumMember(Value = "EntityNotFoundError")]
            EntityNotFoundError,
            
            /// <summary>
            /// Enum ValueRequiredError for "ValueRequiredError"
            /// </summary>
            [EnumMember(Value = "ValueRequiredError")]
            ValueRequiredError,
            
            /// <summary>
            /// Enum RangeError for "RangeError"
            /// </summary>
            [EnumMember(Value = "RangeError")]
            RangeError,
            
            /// <summary>
            /// Enum RangeCompareError for "RangeCompareError"
            /// </summary>
            [EnumMember(Value = "RangeCompareError")]
            RangeCompareError,
            
            /// <summary>
            /// Enum RangeSetError for "RangeSetError"
            /// </summary>
            [EnumMember(Value = "RangeSetError")]
            RangeSetError,
            
            /// <summary>
            /// Enum TaxpayerNumberRequired for "TaxpayerNumberRequired"
            /// </summary>
            [EnumMember(Value = "TaxpayerNumberRequired")]
            TaxpayerNumberRequired,
            
            /// <summary>
            /// Enum CommonPassword for "CommonPassword"
            /// </summary>
            [EnumMember(Value = "CommonPassword")]
            CommonPassword,
            
            /// <summary>
            /// Enum WeakPassword for "WeakPassword"
            /// </summary>
            [EnumMember(Value = "WeakPassword")]
            WeakPassword,
            
            /// <summary>
            /// Enum StringLengthError for "StringLengthError"
            /// </summary>
            [EnumMember(Value = "StringLengthError")]
            StringLengthError,
            
            /// <summary>
            /// Enum EmailValidationError for "EmailValidationError"
            /// </summary>
            [EnumMember(Value = "EmailValidationError")]
            EmailValidationError,
            
            /// <summary>
            /// Enum EmailMissingError for "EmailMissingError"
            /// </summary>
            [EnumMember(Value = "EmailMissingError")]
            EmailMissingError,
            
            /// <summary>
            /// Enum ParserFieldNameError for "ParserFieldNameError"
            /// </summary>
            [EnumMember(Value = "ParserFieldNameError")]
            ParserFieldNameError,
            
            /// <summary>
            /// Enum ParserFieldValueError for "ParserFieldValueError"
            /// </summary>
            [EnumMember(Value = "ParserFieldValueError")]
            ParserFieldValueError,
            
            /// <summary>
            /// Enum ParserSyntaxError for "ParserSyntaxError"
            /// </summary>
            [EnumMember(Value = "ParserSyntaxError")]
            ParserSyntaxError,
            
            /// <summary>
            /// Enum ParserTooManyParametersError for "ParserTooManyParametersError"
            /// </summary>
            [EnumMember(Value = "ParserTooManyParametersError")]
            ParserTooManyParametersError,
            
            /// <summary>
            /// Enum ParserUnterminatedValueError for "ParserUnterminatedValueError"
            /// </summary>
            [EnumMember(Value = "ParserUnterminatedValueError")]
            ParserUnterminatedValueError,
            
            /// <summary>
            /// Enum DeleteUserSelfError for "DeleteUserSelfError"
            /// </summary>
            [EnumMember(Value = "DeleteUserSelfError")]
            DeleteUserSelfError,
            
            /// <summary>
            /// Enum OldPasswordInvalid for "OldPasswordInvalid"
            /// </summary>
            [EnumMember(Value = "OldPasswordInvalid")]
            OldPasswordInvalid,
            
            /// <summary>
            /// Enum CannotChangePassword for "CannotChangePassword"
            /// </summary>
            [EnumMember(Value = "CannotChangePassword")]
            CannotChangePassword,
            
            /// <summary>
            /// Enum CannotChangeCompanyCode for "CannotChangeCompanyCode"
            /// </summary>
            [EnumMember(Value = "CannotChangeCompanyCode")]
            CannotChangeCompanyCode,
            
            /// <summary>
            /// Enum AuthenticationException for "AuthenticationException"
            /// </summary>
            [EnumMember(Value = "AuthenticationException")]
            AuthenticationException,
            
            /// <summary>
            /// Enum AuthorizationException for "AuthorizationException"
            /// </summary>
            [EnumMember(Value = "AuthorizationException")]
            AuthorizationException,
            
            /// <summary>
            /// Enum ValidationException for "ValidationException"
            /// </summary>
            [EnumMember(Value = "ValidationException")]
            ValidationException,
            
            /// <summary>
            /// Enum InactiveUserError for "InactiveUserError"
            /// </summary>
            [EnumMember(Value = "InactiveUserError")]
            InactiveUserError,
            
            /// <summary>
            /// Enum AuthenticationIncomplete for "AuthenticationIncomplete"
            /// </summary>
            [EnumMember(Value = "AuthenticationIncomplete")]
            AuthenticationIncomplete,
            
            /// <summary>
            /// Enum BasicAuthIncorrect for "BasicAuthIncorrect"
            /// </summary>
            [EnumMember(Value = "BasicAuthIncorrect")]
            BasicAuthIncorrect,
            
            /// <summary>
            /// Enum IdentityServerError for "IdentityServerError"
            /// </summary>
            [EnumMember(Value = "IdentityServerError")]
            IdentityServerError,
            
            /// <summary>
            /// Enum BearerTokenInvalid for "BearerTokenInvalid"
            /// </summary>
            [EnumMember(Value = "BearerTokenInvalid")]
            BearerTokenInvalid,
            
            /// <summary>
            /// Enum ModelRequiredException for "ModelRequiredException"
            /// </summary>
            [EnumMember(Value = "ModelRequiredException")]
            ModelRequiredException,
            
            /// <summary>
            /// Enum AccountExpiredException for "AccountExpiredException"
            /// </summary>
            [EnumMember(Value = "AccountExpiredException")]
            AccountExpiredException,
            
            /// <summary>
            /// Enum VisibilityError for "VisibilityError"
            /// </summary>
            [EnumMember(Value = "VisibilityError")]
            VisibilityError,
            
            /// <summary>
            /// Enum BearerTokenNotSupported for "BearerTokenNotSupported"
            /// </summary>
            [EnumMember(Value = "BearerTokenNotSupported")]
            BearerTokenNotSupported,
            
            /// <summary>
            /// Enum InvalidSecurityRole for "InvalidSecurityRole"
            /// </summary>
            [EnumMember(Value = "InvalidSecurityRole")]
            InvalidSecurityRole,
            
            /// <summary>
            /// Enum InvalidRegistrarAction for "InvalidRegistrarAction"
            /// </summary>
            [EnumMember(Value = "InvalidRegistrarAction")]
            InvalidRegistrarAction,
            
            /// <summary>
            /// Enum RemoteServerError for "RemoteServerError"
            /// </summary>
            [EnumMember(Value = "RemoteServerError")]
            RemoteServerError,
            
            /// <summary>
            /// Enum NoFilterCriteriaException for "NoFilterCriteriaException"
            /// </summary>
            [EnumMember(Value = "NoFilterCriteriaException")]
            NoFilterCriteriaException,
            
            /// <summary>
            /// Enum OpenClauseException for "OpenClauseException"
            /// </summary>
            [EnumMember(Value = "OpenClauseException")]
            OpenClauseException,
            
            /// <summary>
            /// Enum JsonFormatError for "JsonFormatError"
            /// </summary>
            [EnumMember(Value = "JsonFormatError")]
            JsonFormatError,
            
            /// <summary>
            /// Enum UnhandledException for "UnhandledException"
            /// </summary>
            [EnumMember(Value = "UnhandledException")]
            UnhandledException,
            
            /// <summary>
            /// Enum ReportingCompanyMustHaveContactsError for "ReportingCompanyMustHaveContactsError"
            /// </summary>
            [EnumMember(Value = "ReportingCompanyMustHaveContactsError")]
            ReportingCompanyMustHaveContactsError,
            
            /// <summary>
            /// Enum CompanyProfileNotSet for "CompanyProfileNotSet"
            /// </summary>
            [EnumMember(Value = "CompanyProfileNotSet")]
            CompanyProfileNotSet,
            
            /// <summary>
            /// Enum ModelStateInvalid for "ModelStateInvalid"
            /// </summary>
            [EnumMember(Value = "ModelStateInvalid")]
            ModelStateInvalid,
            
            /// <summary>
            /// Enum DateRangeError for "DateRangeError"
            /// </summary>
            [EnumMember(Value = "DateRangeError")]
            DateRangeError,
            
            /// <summary>
            /// Enum InvalidDateRangeError for "InvalidDateRangeError"
            /// </summary>
            [EnumMember(Value = "InvalidDateRangeError")]
            InvalidDateRangeError,
            
            /// <summary>
            /// Enum DeleteInformation for "DeleteInformation"
            /// </summary>
            [EnumMember(Value = "DeleteInformation")]
            DeleteInformation,
            
            /// <summary>
            /// Enum CannotCreateDeletedObjects for "CannotCreateDeletedObjects"
            /// </summary>
            [EnumMember(Value = "CannotCreateDeletedObjects")]
            CannotCreateDeletedObjects,
            
            /// <summary>
            /// Enum CannotModifyDeletedObjects for "CannotModifyDeletedObjects"
            /// </summary>
            [EnumMember(Value = "CannotModifyDeletedObjects")]
            CannotModifyDeletedObjects,
            
            /// <summary>
            /// Enum ReturnNameNotFound for "ReturnNameNotFound"
            /// </summary>
            [EnumMember(Value = "ReturnNameNotFound")]
            ReturnNameNotFound,
            
            /// <summary>
            /// Enum InvalidAddressTypeAndCategory for "InvalidAddressTypeAndCategory"
            /// </summary>
            [EnumMember(Value = "InvalidAddressTypeAndCategory")]
            InvalidAddressTypeAndCategory,
            
            /// <summary>
            /// Enum DefaultCompanyLocation for "DefaultCompanyLocation"
            /// </summary>
            [EnumMember(Value = "DefaultCompanyLocation")]
            DefaultCompanyLocation,
            
            /// <summary>
            /// Enum InvalidCountry for "InvalidCountry"
            /// </summary>
            [EnumMember(Value = "InvalidCountry")]
            InvalidCountry,
            
            /// <summary>
            /// Enum InvalidCountryRegion for "InvalidCountryRegion"
            /// </summary>
            [EnumMember(Value = "InvalidCountryRegion")]
            InvalidCountryRegion,
            
            /// <summary>
            /// Enum BrazilValidationError for "BrazilValidationError"
            /// </summary>
            [EnumMember(Value = "BrazilValidationError")]
            BrazilValidationError,
            
            /// <summary>
            /// Enum BrazilExemptValidationError for "BrazilExemptValidationError"
            /// </summary>
            [EnumMember(Value = "BrazilExemptValidationError")]
            BrazilExemptValidationError,
            
            /// <summary>
            /// Enum BrazilPisCofinsError for "BrazilPisCofinsError"
            /// </summary>
            [EnumMember(Value = "BrazilPisCofinsError")]
            BrazilPisCofinsError,
            
            /// <summary>
            /// Enum JurisdictionNotFoundError for "JurisdictionNotFoundError"
            /// </summary>
            [EnumMember(Value = "JurisdictionNotFoundError")]
            JurisdictionNotFoundError,
            
            /// <summary>
            /// Enum MedicalExciseError for "MedicalExciseError"
            /// </summary>
            [EnumMember(Value = "MedicalExciseError")]
            MedicalExciseError,
            
            /// <summary>
            /// Enum RateDependsTaxabilityError for "RateDependsTaxabilityError"
            /// </summary>
            [EnumMember(Value = "RateDependsTaxabilityError")]
            RateDependsTaxabilityError,
            
            /// <summary>
            /// Enum RateDependsEuropeError for "RateDependsEuropeError"
            /// </summary>
            [EnumMember(Value = "RateDependsEuropeError")]
            RateDependsEuropeError,
            
            /// <summary>
            /// Enum RateTypeNotSupported for "RateTypeNotSupported"
            /// </summary>
            [EnumMember(Value = "RateTypeNotSupported")]
            RateTypeNotSupported,
            
            /// <summary>
            /// Enum CannotUpdateNestedObjects for "CannotUpdateNestedObjects"
            /// </summary>
            [EnumMember(Value = "CannotUpdateNestedObjects")]
            CannotUpdateNestedObjects,
            
            /// <summary>
            /// Enum UPCCodeInvalidChars for "UPCCodeInvalidChars"
            /// </summary>
            [EnumMember(Value = "UPCCodeInvalidChars")]
            UPCCodeInvalidChars,
            
            /// <summary>
            /// Enum UPCCodeInvalidLength for "UPCCodeInvalidLength"
            /// </summary>
            [EnumMember(Value = "UPCCodeInvalidLength")]
            UPCCodeInvalidLength,
            
            /// <summary>
            /// Enum IncorrectPathError for "IncorrectPathError"
            /// </summary>
            [EnumMember(Value = "IncorrectPathError")]
            IncorrectPathError,
            
            /// <summary>
            /// Enum InvalidJurisdictionType for "InvalidJurisdictionType"
            /// </summary>
            [EnumMember(Value = "InvalidJurisdictionType")]
            InvalidJurisdictionType,
            
            /// <summary>
            /// Enum MustConfirmResetLicenseKey for "MustConfirmResetLicenseKey"
            /// </summary>
            [EnumMember(Value = "MustConfirmResetLicenseKey")]
            MustConfirmResetLicenseKey,
            
            /// <summary>
            /// Enum DuplicateCompanyCode for "DuplicateCompanyCode"
            /// </summary>
            [EnumMember(Value = "DuplicateCompanyCode")]
            DuplicateCompanyCode,
            
            /// <summary>
            /// Enum TINFormatError for "TINFormatError"
            /// </summary>
            [EnumMember(Value = "TINFormatError")]
            TINFormatError,
            
            /// <summary>
            /// Enum DuplicateNexusError for "DuplicateNexusError"
            /// </summary>
            [EnumMember(Value = "DuplicateNexusError")]
            DuplicateNexusError,
            
            /// <summary>
            /// Enum UnknownNexusError for "UnknownNexusError"
            /// </summary>
            [EnumMember(Value = "UnknownNexusError")]
            UnknownNexusError,
            
            /// <summary>
            /// Enum ParentNexusNotFound for "ParentNexusNotFound"
            /// </summary>
            [EnumMember(Value = "ParentNexusNotFound")]
            ParentNexusNotFound,
            
            /// <summary>
            /// Enum InvalidTaxCodeType for "InvalidTaxCodeType"
            /// </summary>
            [EnumMember(Value = "InvalidTaxCodeType")]
            InvalidTaxCodeType,
            
            /// <summary>
            /// Enum CannotActivateCompany for "CannotActivateCompany"
            /// </summary>
            [EnumMember(Value = "CannotActivateCompany")]
            CannotActivateCompany,
            
            /// <summary>
            /// Enum BatchSalesAuditMustBeZippedError for "BatchSalesAuditMustBeZippedError"
            /// </summary>
            [EnumMember(Value = "BatchSalesAuditMustBeZippedError")]
            BatchSalesAuditMustBeZippedError,
            
            /// <summary>
            /// Enum BatchZipMustContainOneFileError for "BatchZipMustContainOneFileError"
            /// </summary>
            [EnumMember(Value = "BatchZipMustContainOneFileError")]
            BatchZipMustContainOneFileError,
            
            /// <summary>
            /// Enum BatchInvalidFileTypeError for "BatchInvalidFileTypeError"
            /// </summary>
            [EnumMember(Value = "BatchInvalidFileTypeError")]
            BatchInvalidFileTypeError,
            
            /// <summary>
            /// Enum GetTaxError for "GetTaxError"
            /// </summary>
            [EnumMember(Value = "GetTaxError")]
            GetTaxError,
            
            /// <summary>
            /// Enum AddressConflictException for "AddressConflictException"
            /// </summary>
            [EnumMember(Value = "AddressConflictException")]
            AddressConflictException,
            
            /// <summary>
            /// Enum DocumentCodeConflict for "DocumentCodeConflict"
            /// </summary>
            [EnumMember(Value = "DocumentCodeConflict")]
            DocumentCodeConflict,
            
            /// <summary>
            /// Enum MissingAddress for "MissingAddress"
            /// </summary>
            [EnumMember(Value = "MissingAddress")]
            MissingAddress,
            
            /// <summary>
            /// Enum InvalidParameter for "InvalidParameter"
            /// </summary>
            [EnumMember(Value = "InvalidParameter")]
            InvalidParameter,
            
            /// <summary>
            /// Enum InvalidParameterValue for "InvalidParameterValue"
            /// </summary>
            [EnumMember(Value = "InvalidParameterValue")]
            InvalidParameterValue,
            
            /// <summary>
            /// Enum CompanyCodeConflict for "CompanyCodeConflict"
            /// </summary>
            [EnumMember(Value = "CompanyCodeConflict")]
            CompanyCodeConflict,
            
            /// <summary>
            /// Enum BadDocumentFetch for "BadDocumentFetch"
            /// </summary>
            [EnumMember(Value = "BadDocumentFetch")]
            BadDocumentFetch,
            
            /// <summary>
            /// Enum ServerUnreachable for "ServerUnreachable"
            /// </summary>
            [EnumMember(Value = "ServerUnreachable")]
            ServerUnreachable,
            
            /// <summary>
            /// Enum SubscriptionRequired for "SubscriptionRequired"
            /// </summary>
            [EnumMember(Value = "SubscriptionRequired")]
            SubscriptionRequired
        }

        /// <summary>
        /// Severity of the message
        /// </summary>
        /// <value>Severity of the message</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            
            /// <summary>
            /// Enum Success for "Success"
            /// </summary>
            [EnumMember(Value = "Success")]
            Success,
            
            /// <summary>
            /// Enum Warning for "Warning"
            /// </summary>
            [EnumMember(Value = "Warning")]
            Warning,
            
            /// <summary>
            /// Enum Error for "Error"
            /// </summary>
            [EnumMember(Value = "Error")]
            Error,
            
            /// <summary>
            /// Enum Exception for "Exception"
            /// </summary>
            [EnumMember(Value = "Exception")]
            Exception
        }

        /// <summary>
        /// Name of the error.
        /// </summary>
        /// <value>Name of the error.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public CodeEnum? Code { get; set; }
        /// <summary>
        /// Severity of the message
        /// </summary>
        /// <value>Severity of the message</value>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public SeverityEnum? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorDetail" /> class.
        /// </summary>
        /// <param name="Code">Name of the error..</param>
        /// <param name="Number">Error message identifier.</param>
        /// <param name="Message">Concise summary of the message, suitable for display in the caption of an alert box..</param>
        /// <param name="Description">A more detailed description of the problem referenced by this error message, suitable for display in the contents area of an alert box..</param>
        /// <param name="FaultCode">Indicates the SoapFault code.</param>
        /// <param name="RefersTo">Item the message refers to, if applicable.  This is used to indicate a missing or incorrect value..</param>
        /// <param name="Severity">Severity of the message.</param>
        public ErrorDetail(CodeEnum? Code = null, int? Number = null, string Message = null, string Description = null, string FaultCode = null, string RefersTo = null, SeverityEnum? Severity = null)
        {
            this.Code = Code;
            this.Number = Number;
            this.Message = Message;
            this.Description = Description;
            this.FaultCode = FaultCode;
            this.RefersTo = RefersTo;
            this.Severity = Severity;
        }
        
        /// <summary>
        /// Error message identifier
        /// </summary>
        /// <value>Error message identifier</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }
        /// <summary>
        /// Concise summary of the message, suitable for display in the caption of an alert box.
        /// </summary>
        /// <value>Concise summary of the message, suitable for display in the caption of an alert box.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// A more detailed description of the problem referenced by this error message, suitable for display in the contents area of an alert box.
        /// </summary>
        /// <value>A more detailed description of the problem referenced by this error message, suitable for display in the contents area of an alert box.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Indicates the SoapFault code
        /// </summary>
        /// <value>Indicates the SoapFault code</value>
        [DataMember(Name="faultCode", EmitDefaultValue=false)]
        public string FaultCode { get; set; }
        /// <summary>
        /// URL to help for this message
        /// </summary>
        /// <value>URL to help for this message</value>
        [DataMember(Name="helpLink", EmitDefaultValue=false)]
        public string HelpLink { get; private set; }
        /// <summary>
        /// Item the message refers to, if applicable.  This is used to indicate a missing or incorrect value.
        /// </summary>
        /// <value>Item the message refers to, if applicable.  This is used to indicate a missing or incorrect value.</value>
        [DataMember(Name="refersTo", EmitDefaultValue=false)]
        public string RefersTo { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ErrorDetail {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FaultCode: ").Append(FaultCode).Append("\n");
            sb.Append("  HelpLink: ").Append(HelpLink).Append("\n");
            sb.Append("  RefersTo: ").Append(RefersTo).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ErrorDetail);
        }

        /// <summary>
        /// Returns true if ErrorDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of ErrorDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ErrorDetail other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.FaultCode == other.FaultCode ||
                    this.FaultCode != null &&
                    this.FaultCode.Equals(other.FaultCode)
                ) && 
                (
                    this.HelpLink == other.HelpLink ||
                    this.HelpLink != null &&
                    this.HelpLink.Equals(other.HelpLink)
                ) && 
                (
                    this.RefersTo == other.RefersTo ||
                    this.RefersTo != null &&
                    this.RefersTo.Equals(other.RefersTo)
                ) && 
                (
                    this.Severity == other.Severity ||
                    this.Severity != null &&
                    this.Severity.Equals(other.Severity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.FaultCode != null)
                    hash = hash * 59 + this.FaultCode.GetHashCode();
                if (this.HelpLink != null)
                    hash = hash * 59 + this.HelpLink.GetHashCode();
                if (this.RefersTo != null)
                    hash = hash * 59 + this.RefersTo.GetHashCode();
                if (this.Severity != null)
                    hash = hash * 59 + this.Severity.GetHashCode();
                return hash;
            }
        }
    }

}
