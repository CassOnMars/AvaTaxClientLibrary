/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Tax Rate Model
    /// </summary>
    [DataContract]
    public partial class TaxRateModel :  IEquatable<TaxRateModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxRateModel" /> class.
        /// </summary>
        /// <param name="TotalRate">Total Rate.</param>
        /// <param name="Rates">Rates.</param>
        public TaxRateModel(double? TotalRate = null, List<RateModel> Rates = null)
        {
            this.TotalRate = TotalRate;
            this.Rates = Rates;
        }
        
        /// <summary>
        /// Total Rate
        /// </summary>
        /// <value>Total Rate</value>
        [DataMember(Name="totalRate", EmitDefaultValue=false)]
        public double? TotalRate { get; set; }
        /// <summary>
        /// Rates
        /// </summary>
        /// <value>Rates</value>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public List<RateModel> Rates { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxRateModel {\n");
            sb.Append("  TotalRate: ").Append(TotalRate).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxRateModel);
        }

        /// <summary>
        /// Returns true if TaxRateModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxRateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxRateModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.TotalRate == other.TotalRate ||
                    this.TotalRate != null &&
                    this.TotalRate.Equals(other.TotalRate)
                ) && 
                (
                    this.Rates == other.Rates ||
                    this.Rates != null &&
                    this.Rates.SequenceEqual(other.Rates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.TotalRate != null)
                    hash = hash * 59 + this.TotalRate.GetHashCode();
                if (this.Rates != null)
                    hash = hash * 59 + this.Rates.GetHashCode();
                return hash;
            }
        }
    }

}
