/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents one file in a batch upload.
    /// </summary>
    [DataContract]
    public partial class BatchFileModel :  IEquatable<BatchFileModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchFileModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchFileModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchFileModel" /> class.
        /// </summary>
        /// <param name="Name">Logical Name of file (e.g. \&quot;Input\&quot; or \&quot;Error\&quot;). (required).</param>
        /// <param name="Content">Content of the batch file. (required).</param>
        /// <param name="ContentType">Content mime type (e.g. text/csv).  This is used for HTTP downloading. (required).</param>
        /// <param name="FileExtension">File extension (e.g. CSV). (required).</param>
        /// <param name="ErrorCount">Number of errors that occurred when processing this file..</param>
        public BatchFileModel(string Name = null, byte[] Content = null, string ContentType = null, string FileExtension = null, int? ErrorCount = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for BatchFileModel and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Content" is required (not null)
            if (Content == null)
            {
                throw new InvalidDataException("Content is a required property for BatchFileModel and cannot be null");
            }
            else
            {
                this.Content = Content;
            }
            // to ensure "ContentType" is required (not null)
            if (ContentType == null)
            {
                throw new InvalidDataException("ContentType is a required property for BatchFileModel and cannot be null");
            }
            else
            {
                this.ContentType = ContentType;
            }
            // to ensure "FileExtension" is required (not null)
            if (FileExtension == null)
            {
                throw new InvalidDataException("FileExtension is a required property for BatchFileModel and cannot be null");
            }
            else
            {
                this.FileExtension = FileExtension;
            }
            this.ErrorCount = ErrorCount;
        }
        
        /// <summary>
        /// The unique ID number assigned to this batch file.
        /// </summary>
        /// <value>The unique ID number assigned to this batch file.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the batch that this file belongs to.
        /// </summary>
        /// <value>The unique ID number of the batch that this file belongs to.</value>
        [DataMember(Name="batchId", EmitDefaultValue=false)]
        public int? BatchId { get; private set; }
        /// <summary>
        /// Logical Name of file (e.g. \&quot;Input\&quot; or \&quot;Error\&quot;).
        /// </summary>
        /// <value>Logical Name of file (e.g. \&quot;Input\&quot; or \&quot;Error\&quot;).</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Content of the batch file.
        /// </summary>
        /// <value>Content of the batch file.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public byte[] Content { get; set; }
        /// <summary>
        /// Size of content, in bytes.
        /// </summary>
        /// <value>Size of content, in bytes.</value>
        [DataMember(Name="contentLength", EmitDefaultValue=false)]
        public int? ContentLength { get; private set; }
        /// <summary>
        /// Content mime type (e.g. text/csv).  This is used for HTTP downloading.
        /// </summary>
        /// <value>Content mime type (e.g. text/csv).  This is used for HTTP downloading.</value>
        [DataMember(Name="contentType", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// File extension (e.g. CSV).
        /// </summary>
        /// <value>File extension (e.g. CSV).</value>
        [DataMember(Name="fileExtension", EmitDefaultValue=false)]
        public string FileExtension { get; set; }
        /// <summary>
        /// Number of errors that occurred when processing this file.
        /// </summary>
        /// <value>Number of errors that occurred when processing this file.</value>
        [DataMember(Name="errorCount", EmitDefaultValue=false)]
        public int? ErrorCount { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchFileModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentLength: ").Append(ContentLength).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BatchFileModel);
        }

        /// <summary>
        /// Returns true if BatchFileModel instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchFileModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchFileModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.BatchId == other.BatchId ||
                    this.BatchId != null &&
                    this.BatchId.Equals(other.BatchId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                ) && 
                (
                    this.ContentLength == other.ContentLength ||
                    this.ContentLength != null &&
                    this.ContentLength.Equals(other.ContentLength)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.FileExtension == other.FileExtension ||
                    this.FileExtension != null &&
                    this.FileExtension.Equals(other.FileExtension)
                ) && 
                (
                    this.ErrorCount == other.ErrorCount ||
                    this.ErrorCount != null &&
                    this.ErrorCount.Equals(other.ErrorCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.BatchId != null)
                    hash = hash * 59 + this.BatchId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                if (this.ContentLength != null)
                    hash = hash * 59 + this.ContentLength.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.FileExtension != null)
                    hash = hash * 59 + this.FileExtension.GetHashCode();
                if (this.ErrorCount != null)
                    hash = hash * 59 + this.ErrorCount.GetHashCode();
                return hash;
            }
        }
    }

}
