/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Represents a tax code that can be applied to items on a transaction.              A tax code can have specific rules for specific jurisdictions that change the tax calculation behavior.
    /// </summary>
    [DataContract]
    public partial class TaxCodeModel :  IEquatable<TaxCodeModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCodeModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaxCodeModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxCodeModel" /> class.
        /// </summary>
        /// <param name="TaxCode">A code string that identifies this tax code. (required).</param>
        /// <param name="TaxCodeTypeId">The type of this tax code. (required).</param>
        /// <param name="Description">A friendly description of this tax code..</param>
        /// <param name="ParentTaxCode">If this tax code is a subset of a different tax code, this identifies the parent code..</param>
        /// <param name="IsPhysical">True if this tax code refers to a physical object..</param>
        /// <param name="GoodsServiceCode">The Avalara Goods and Service Code represented by this tax code..</param>
        /// <param name="EntityUseCode">The Avalara Entity Use Code represented by this tax code..</param>
        /// <param name="IsActive">True if this tax code is active and can be used in transactions..</param>
        /// <param name="IsSSTCertified">True if this tax code has been certified by the Streamlined Sales Tax governing board.              By default, you should leave this value empty..</param>
        public TaxCodeModel(string TaxCode = null, string TaxCodeTypeId = null, string Description = null, string ParentTaxCode = null, bool? IsPhysical = null, long? GoodsServiceCode = null, string EntityUseCode = null, bool? IsActive = null, bool? IsSSTCertified = null)
        {
            // to ensure "TaxCode" is required (not null)
            if (TaxCode == null)
            {
                throw new InvalidDataException("TaxCode is a required property for TaxCodeModel and cannot be null");
            }
            else
            {
                this.TaxCode = TaxCode;
            }
            // to ensure "TaxCodeTypeId" is required (not null)
            if (TaxCodeTypeId == null)
            {
                throw new InvalidDataException("TaxCodeTypeId is a required property for TaxCodeModel and cannot be null");
            }
            else
            {
                this.TaxCodeTypeId = TaxCodeTypeId;
            }
            this.Description = Description;
            this.ParentTaxCode = ParentTaxCode;
            this.IsPhysical = IsPhysical;
            this.GoodsServiceCode = GoodsServiceCode;
            this.EntityUseCode = EntityUseCode;
            this.IsActive = IsActive;
            this.IsSSTCertified = IsSSTCertified;
        }
        
        /// <summary>
        /// The unique ID number of this tax code.
        /// </summary>
        /// <value>The unique ID number of this tax code.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the company that owns this tax code.
        /// </summary>
        /// <value>The unique ID number of the company that owns this tax code.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; private set; }
        /// <summary>
        /// A code string that identifies this tax code.
        /// </summary>
        /// <value>A code string that identifies this tax code.</value>
        [DataMember(Name="taxCode", EmitDefaultValue=false)]
        public string TaxCode { get; set; }
        /// <summary>
        /// The type of this tax code.
        /// </summary>
        /// <value>The type of this tax code.</value>
        [DataMember(Name="taxCodeTypeId", EmitDefaultValue=false)]
        public string TaxCodeTypeId { get; set; }
        /// <summary>
        /// A friendly description of this tax code.
        /// </summary>
        /// <value>A friendly description of this tax code.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// If this tax code is a subset of a different tax code, this identifies the parent code.
        /// </summary>
        /// <value>If this tax code is a subset of a different tax code, this identifies the parent code.</value>
        [DataMember(Name="parentTaxCode", EmitDefaultValue=false)]
        public string ParentTaxCode { get; set; }
        /// <summary>
        /// True if this tax code refers to a physical object.
        /// </summary>
        /// <value>True if this tax code refers to a physical object.</value>
        [DataMember(Name="isPhysical", EmitDefaultValue=false)]
        public bool? IsPhysical { get; set; }
        /// <summary>
        /// The Avalara Goods and Service Code represented by this tax code.
        /// </summary>
        /// <value>The Avalara Goods and Service Code represented by this tax code.</value>
        [DataMember(Name="goodsServiceCode", EmitDefaultValue=false)]
        public long? GoodsServiceCode { get; set; }
        /// <summary>
        /// The Avalara Entity Use Code represented by this tax code.
        /// </summary>
        /// <value>The Avalara Entity Use Code represented by this tax code.</value>
        [DataMember(Name="entityUseCode", EmitDefaultValue=false)]
        public string EntityUseCode { get; set; }
        /// <summary>
        /// True if this tax code is active and can be used in transactions.
        /// </summary>
        /// <value>True if this tax code is active and can be used in transactions.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }
        /// <summary>
        /// True if this tax code has been certified by the Streamlined Sales Tax governing board.              By default, you should leave this value empty.
        /// </summary>
        /// <value>True if this tax code has been certified by the Streamlined Sales Tax governing board.              By default, you should leave this value empty.</value>
        [DataMember(Name="isSSTCertified", EmitDefaultValue=false)]
        public bool? IsSSTCertified { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxCodeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  TaxCodeTypeId: ").Append(TaxCodeTypeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ParentTaxCode: ").Append(ParentTaxCode).Append("\n");
            sb.Append("  IsPhysical: ").Append(IsPhysical).Append("\n");
            sb.Append("  GoodsServiceCode: ").Append(GoodsServiceCode).Append("\n");
            sb.Append("  EntityUseCode: ").Append(EntityUseCode).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSSTCertified: ").Append(IsSSTCertified).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaxCodeModel);
        }

        /// <summary>
        /// Returns true if TaxCodeModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TaxCodeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxCodeModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.TaxCode == other.TaxCode ||
                    this.TaxCode != null &&
                    this.TaxCode.Equals(other.TaxCode)
                ) && 
                (
                    this.TaxCodeTypeId == other.TaxCodeTypeId ||
                    this.TaxCodeTypeId != null &&
                    this.TaxCodeTypeId.Equals(other.TaxCodeTypeId)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.ParentTaxCode == other.ParentTaxCode ||
                    this.ParentTaxCode != null &&
                    this.ParentTaxCode.Equals(other.ParentTaxCode)
                ) && 
                (
                    this.IsPhysical == other.IsPhysical ||
                    this.IsPhysical != null &&
                    this.IsPhysical.Equals(other.IsPhysical)
                ) && 
                (
                    this.GoodsServiceCode == other.GoodsServiceCode ||
                    this.GoodsServiceCode != null &&
                    this.GoodsServiceCode.Equals(other.GoodsServiceCode)
                ) && 
                (
                    this.EntityUseCode == other.EntityUseCode ||
                    this.EntityUseCode != null &&
                    this.EntityUseCode.Equals(other.EntityUseCode)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.IsSSTCertified == other.IsSSTCertified ||
                    this.IsSSTCertified != null &&
                    this.IsSSTCertified.Equals(other.IsSSTCertified)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.TaxCode != null)
                    hash = hash * 59 + this.TaxCode.GetHashCode();
                if (this.TaxCodeTypeId != null)
                    hash = hash * 59 + this.TaxCodeTypeId.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.ParentTaxCode != null)
                    hash = hash * 59 + this.ParentTaxCode.GetHashCode();
                if (this.IsPhysical != null)
                    hash = hash * 59 + this.IsPhysical.GetHashCode();
                if (this.GoodsServiceCode != null)
                    hash = hash * 59 + this.GoodsServiceCode.GetHashCode();
                if (this.EntityUseCode != null)
                    hash = hash * 59 + this.EntityUseCode.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.IsSSTCertified != null)
                    hash = hash * 59 + this.IsSSTCertified.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
