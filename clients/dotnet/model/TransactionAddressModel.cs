/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// An address used within this transaction.
    /// </summary>
    [DataContract]
    public partial class TransactionAddressModel :  IEquatable<TransactionAddressModel>
    {
        /// <summary>
        /// The boundary level at which this address was validated.
        /// </summary>
        /// <value>The boundary level at which this address was validated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BoundaryLevelEnum
        {
            
            /// <summary>
            /// Enum Address for "Address"
            /// </summary>
            [EnumMember(Value = "Address")]
            Address,
            
            /// <summary>
            /// Enum Zip9 for "Zip9"
            /// </summary>
            [EnumMember(Value = "Zip9")]
            Zip9,
            
            /// <summary>
            /// Enum Zip5 for "Zip5"
            /// </summary>
            [EnumMember(Value = "Zip5")]
            Zip5
        }

        /// <summary>
        /// The boundary level at which this address was validated.
        /// </summary>
        /// <value>The boundary level at which this address was validated.</value>
        [DataMember(Name="boundaryLevel", EmitDefaultValue=false)]
        public BoundaryLevelEnum? BoundaryLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAddressModel" /> class.
        /// </summary>
        /// <param name="Line1">The first line of the address..</param>
        /// <param name="Line2">The second line of the address..</param>
        /// <param name="Line3">The third line of the address..</param>
        /// <param name="City">The city for the address..</param>
        /// <param name="Region">The region, state, or province for the address..</param>
        /// <param name="PostalCode">The postal code or zip code for the address..</param>
        /// <param name="Country">The country for the address..</param>
        /// <param name="TaxRegionId">The unique ID number of the tax region for this address..</param>
        public TransactionAddressModel(string Line1 = null, string Line2 = null, string Line3 = null, string City = null, string Region = null, string PostalCode = null, string Country = null, int? TaxRegionId = null)
        {
            this.Line1 = Line1;
            this.Line2 = Line2;
            this.Line3 = Line3;
            this.City = City;
            this.Region = Region;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.TaxRegionId = TaxRegionId;
        }
        
        /// <summary>
        /// The unique ID number of this address.
        /// </summary>
        /// <value>The unique ID number of this address.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the document to which this address belongs.
        /// </summary>
        /// <value>The unique ID number of the document to which this address belongs.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public long? TransactionId { get; private set; }
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="line1", EmitDefaultValue=false)]
        public string Line1 { get; set; }
        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [DataMember(Name="line2", EmitDefaultValue=false)]
        public string Line2 { get; set; }
        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [DataMember(Name="line3", EmitDefaultValue=false)]
        public string Line3 { get; set; }
        /// <summary>
        /// The city for the address.
        /// </summary>
        /// <value>The city for the address.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// The region, state, or province for the address.
        /// </summary>
        /// <value>The region, state, or province for the address.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The postal code or zip code for the address.
        /// </summary>
        /// <value>The postal code or zip code for the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The country for the address.
        /// </summary>
        /// <value>The country for the address.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The unique ID number of the tax region for this address.
        /// </summary>
        /// <value>The unique ID number of the tax region for this address.</value>
        [DataMember(Name="taxRegionId", EmitDefaultValue=false)]
        public int? TaxRegionId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionAddressModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  BoundaryLevel: ").Append(BoundaryLevel).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Line3: ").Append(Line3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  TaxRegionId: ").Append(TaxRegionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionAddressModel);
        }

        /// <summary>
        /// Returns true if TransactionAddressModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionAddressModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionAddressModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.BoundaryLevel == other.BoundaryLevel ||
                    this.BoundaryLevel != null &&
                    this.BoundaryLevel.Equals(other.BoundaryLevel)
                ) && 
                (
                    this.Line1 == other.Line1 ||
                    this.Line1 != null &&
                    this.Line1.Equals(other.Line1)
                ) && 
                (
                    this.Line2 == other.Line2 ||
                    this.Line2 != null &&
                    this.Line2.Equals(other.Line2)
                ) && 
                (
                    this.Line3 == other.Line3 ||
                    this.Line3 != null &&
                    this.Line3.Equals(other.Line3)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.TaxRegionId == other.TaxRegionId ||
                    this.TaxRegionId != null &&
                    this.TaxRegionId.Equals(other.TaxRegionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.BoundaryLevel != null)
                    hash = hash * 59 + this.BoundaryLevel.GetHashCode();
                if (this.Line1 != null)
                    hash = hash * 59 + this.Line1.GetHashCode();
                if (this.Line2 != null)
                    hash = hash * 59 + this.Line2.GetHashCode();
                if (this.Line3 != null)
                    hash = hash * 59 + this.Line3.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.TaxRegionId != null)
                    hash = hash * 59 + this.TaxRegionId.GetHashCode();
                return hash;
            }
        }
    }

}
