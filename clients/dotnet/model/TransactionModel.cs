/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// A single transaction - for example, a sales invoice or purchase order.
    /// </summary>
    [DataContract]
    public partial class TransactionModel :  IEquatable<TransactionModel>
    {
        /// <summary>
        /// The status of the transaction.
        /// </summary>
        /// <value>The status of the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Temporary for "Temporary"
            /// </summary>
            [EnumMember(Value = "Temporary")]
            Temporary,
            
            /// <summary>
            /// Enum Saved for "Saved"
            /// </summary>
            [EnumMember(Value = "Saved")]
            Saved,
            
            /// <summary>
            /// Enum Posted for "Posted"
            /// </summary>
            [EnumMember(Value = "Posted")]
            Posted,
            
            /// <summary>
            /// Enum Committed for "Committed"
            /// </summary>
            [EnumMember(Value = "Committed")]
            Committed,
            
            /// <summary>
            /// Enum Cancelled for "Cancelled"
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled,
            
            /// <summary>
            /// Enum Adjusted for "Adjusted"
            /// </summary>
            [EnumMember(Value = "Adjusted")]
            Adjusted,
            
            /// <summary>
            /// Enum Queued for "Queued"
            /// </summary>
            [EnumMember(Value = "Queued")]
            Queued,
            
            /// <summary>
            /// Enum PendingApproval for "PendingApproval"
            /// </summary>
            [EnumMember(Value = "PendingApproval")]
            PendingApproval,
            
            /// <summary>
            /// Enum Any for "Any"
            /// </summary>
            [EnumMember(Value = "Any")]
            Any
        }

        /// <summary>
        /// The type of the transaction.  For Returns customers, a transaction type of \"Invoice\" will be reported to the tax authorities.              A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.              A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory               transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.
        /// </summary>
        /// <value>The type of the transaction.  For Returns customers, a transaction type of \"Invoice\" will be reported to the tax authorities.              A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.              A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory               transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SalesOrder for "SalesOrder"
            /// </summary>
            [EnumMember(Value = "SalesOrder")]
            SalesOrder,
            
            /// <summary>
            /// Enum SalesInvoice for "SalesInvoice"
            /// </summary>
            [EnumMember(Value = "SalesInvoice")]
            SalesInvoice,
            
            /// <summary>
            /// Enum PurchaseOrder for "PurchaseOrder"
            /// </summary>
            [EnumMember(Value = "PurchaseOrder")]
            PurchaseOrder,
            
            /// <summary>
            /// Enum PurchaseInvoice for "PurchaseInvoice"
            /// </summary>
            [EnumMember(Value = "PurchaseInvoice")]
            PurchaseInvoice,
            
            /// <summary>
            /// Enum ReturnOrder for "ReturnOrder"
            /// </summary>
            [EnumMember(Value = "ReturnOrder")]
            ReturnOrder,
            
            /// <summary>
            /// Enum ReturnInvoice for "ReturnInvoice"
            /// </summary>
            [EnumMember(Value = "ReturnInvoice")]
            ReturnInvoice,
            
            /// <summary>
            /// Enum InventoryTransferOrder for "InventoryTransferOrder"
            /// </summary>
            [EnumMember(Value = "InventoryTransferOrder")]
            InventoryTransferOrder,
            
            /// <summary>
            /// Enum InventoryTransferInvoice for "InventoryTransferInvoice"
            /// </summary>
            [EnumMember(Value = "InventoryTransferInvoice")]
            InventoryTransferInvoice,
            
            /// <summary>
            /// Enum ReverseChargeOrder for "ReverseChargeOrder"
            /// </summary>
            [EnumMember(Value = "ReverseChargeOrder")]
            ReverseChargeOrder,
            
            /// <summary>
            /// Enum ReverseChargeInvoice for "ReverseChargeInvoice"
            /// </summary>
            [EnumMember(Value = "ReverseChargeInvoice")]
            ReverseChargeInvoice,
            
            /// <summary>
            /// Enum Any for "Any"
            /// </summary>
            [EnumMember(Value = "Any")]
            Any
        }

        /// <summary>
        /// If a tax override was applied to this transaction, indicates what type of tax override was applied.
        /// </summary>
        /// <value>If a tax override was applied to this transaction, indicates what type of tax override was applied.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxOverrideTypeEnum
        {
            
            /// <summary>
            /// Enum None for "None"
            /// </summary>
            [EnumMember(Value = "None")]
            None,
            
            /// <summary>
            /// Enum TaxAmount for "TaxAmount"
            /// </summary>
            [EnumMember(Value = "TaxAmount")]
            TaxAmount,
            
            /// <summary>
            /// Enum Exemption for "Exemption"
            /// </summary>
            [EnumMember(Value = "Exemption")]
            Exemption,
            
            /// <summary>
            /// Enum TaxDate for "TaxDate"
            /// </summary>
            [EnumMember(Value = "TaxDate")]
            TaxDate,
            
            /// <summary>
            /// Enum AccruedTaxAmount for "AccruedTaxAmount"
            /// </summary>
            [EnumMember(Value = "AccruedTaxAmount")]
            AccruedTaxAmount
        }

        /// <summary>
        /// If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.
        /// </summary>
        /// <value>If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdjustmentReasonEnum
        {
            
            /// <summary>
            /// Enum NotAdjusted for "NotAdjusted"
            /// </summary>
            [EnumMember(Value = "NotAdjusted")]
            NotAdjusted,
            
            /// <summary>
            /// Enum SourcingIssue for "SourcingIssue"
            /// </summary>
            [EnumMember(Value = "SourcingIssue")]
            SourcingIssue,
            
            /// <summary>
            /// Enum ReconciledWithGeneralLedger for "ReconciledWithGeneralLedger"
            /// </summary>
            [EnumMember(Value = "ReconciledWithGeneralLedger")]
            ReconciledWithGeneralLedger,
            
            /// <summary>
            /// Enum ExemptCertApplied for "ExemptCertApplied"
            /// </summary>
            [EnumMember(Value = "ExemptCertApplied")]
            ExemptCertApplied,
            
            /// <summary>
            /// Enum PriceAdjusted for "PriceAdjusted"
            /// </summary>
            [EnumMember(Value = "PriceAdjusted")]
            PriceAdjusted,
            
            /// <summary>
            /// Enum ProductReturned for "ProductReturned"
            /// </summary>
            [EnumMember(Value = "ProductReturned")]
            ProductReturned,
            
            /// <summary>
            /// Enum ProductExchanged for "ProductExchanged"
            /// </summary>
            [EnumMember(Value = "ProductExchanged")]
            ProductExchanged,
            
            /// <summary>
            /// Enum BadDebt for "BadDebt"
            /// </summary>
            [EnumMember(Value = "BadDebt")]
            BadDebt,
            
            /// <summary>
            /// Enum Other for "Other"
            /// </summary>
            [EnumMember(Value = "Other")]
            Other,
            
            /// <summary>
            /// Enum Offline for "Offline"
            /// </summary>
            [EnumMember(Value = "Offline")]
            Offline
        }

        /// <summary>
        /// The status of the transaction.
        /// </summary>
        /// <value>The status of the transaction.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// The type of the transaction.  For Returns customers, a transaction type of \"Invoice\" will be reported to the tax authorities.              A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.              A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory               transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.
        /// </summary>
        /// <value>The type of the transaction.  For Returns customers, a transaction type of \"Invoice\" will be reported to the tax authorities.              A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.              A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory               transfer transaction represents goods that were moved from one location of the company to another location without changing ownership.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// If a tax override was applied to this transaction, indicates what type of tax override was applied.
        /// </summary>
        /// <value>If a tax override was applied to this transaction, indicates what type of tax override was applied.</value>
        [DataMember(Name="taxOverrideType", EmitDefaultValue=false)]
        public TaxOverrideTypeEnum? TaxOverrideType { get; set; }
        /// <summary>
        /// If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.
        /// </summary>
        /// <value>If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted.</value>
        [DataMember(Name="adjustmentReason", EmitDefaultValue=false)]
        public AdjustmentReasonEnum? AdjustmentReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionModel" /> class.
        /// </summary>
        /// <param name="CompanyId">The unique ID number of the company that recorded this transaction..</param>
        /// <param name="Date">The date on which this transaction occurred..</param>
        /// <param name="TaxDate">The date that was used when calculating tax for this transaction.              By default, this should be the same as the transaction date; however, when a consumer returns a product purchased in a previous month,              it may be necessary to specify the date of the original transaction in order to correctly return the exact amount of sales tax that was              charged of the consumer on the original date they purchased the product..</param>
        /// <param name="PaymentDate">The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction..</param>
        /// <param name="Status">The status of the transaction..</param>
        /// <param name="Type">The type of the transaction.  For Returns customers, a transaction type of \&quot;Invoice\&quot; will be reported to the tax authorities.              A sales transaction represents a sale from the company to a customer.  A purchase transaction represents a purchase made by the company.              A return transaction represents a customer who decided to request a refund after purchasing a product from the company.  An inventory               transfer transaction represents goods that were moved from one location of the company to another location without changing ownership..</param>
        /// <param name="BatchCode">If this transaction was created as part of a batch, this code indicates which batch..</param>
        /// <param name="CurrencyCode">The three-character ISO 4217 currency code that was used for payment for this transaction..</param>
        /// <param name="CustomerUsageType">The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules..</param>
        /// <param name="CustomerVendorCode">CustomerVendorCode.</param>
        /// <param name="ExemptNo">If this transaction was exempt, this field will contain the word \&quot;Exempt\&quot;..</param>
        /// <param name="Reconciled">If this transaction has been reconciled against the company&#39;s ledger, this value is set to true..</param>
        /// <param name="LocationCode">If this transaction was made from a specific reporting location, this is the code string of the location.              For customers using Returns, this indicates how tax will be reported according to different locations on the tax forms..</param>
        /// <param name="PurchaseOrderNo">The customer-supplied purchase order number of this transaction..</param>
        /// <param name="ReferenceCode">A user-defined reference code for this transaction..</param>
        /// <param name="SalespersonCode">The salesperson who provided this transaction.  Not required..</param>
        /// <param name="TaxOverrideType">If a tax override was applied to this transaction, indicates what type of tax override was applied..</param>
        /// <param name="TaxOverrideAmount">If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer..</param>
        /// <param name="TaxOverrideReason">If a tax override was applied to this transaction, indicates the reason for the tax override..</param>
        /// <param name="TotalAmount">The total amount of this transaction..</param>
        /// <param name="TotalExempt">The amount of this transaction that was exempt..</param>
        /// <param name="TotalTax">The total tax calculated for all lines in this transaction..</param>
        /// <param name="TotalTaxable">The portion of the total amount of this transaction that was taxable..</param>
        /// <param name="TotalTaxCalculated">If a tax override was applied to this transaction, indicates the amount of tax Avalara calculated for the transaction..</param>
        /// <param name="AdjustmentReason">If this transaction was adjusted, indicates the unique ID number of the reason why the transaction was adjusted..</param>
        /// <param name="AdjustmentDescription">If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted..</param>
        /// <param name="Locked">If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting..</param>
        /// <param name="Region">The two-or-three character ISO region code of the region for this transaction..</param>
        /// <param name="Country">The two-character ISO 3166 code of the country for this transaction..</param>
        /// <param name="Version">If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction              is adjusted..</param>
        /// <param name="SoftwareVersion">The software version used to calculate this transaction..</param>
        /// <param name="OriginAddressId">The unique ID number of the origin address for this transaction..</param>
        /// <param name="DestinationAddressId">The unique ID number of the destination address for this transaction..</param>
        /// <param name="ExchangeRateEffectiveDate">If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated..</param>
        /// <param name="ExchangeRate">If this transaction included foreign currency exchange, this is the exchange rate that was used..</param>
        /// <param name="IsSellerImporterOfRecord">If true, this seller was considered the importer of record of a product shipped internationally..</param>
        /// <param name="Description">Description of this transaction..</param>
        /// <param name="Email">Email address associated with this transaction..</param>
        /// <param name="Lines">Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Lines\&quot; or \&quot;?$include&#x3D;Details\&quot; to your URL..</param>
        /// <param name="Addresses">Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Addresses\&quot; to your URL..</param>
        /// <param name="History">If this transaction has been adjusted, this list contains all the previous versions of the document..</param>
        /// <param name="Summary">Contains a summary of tax on this transaction..</param>
        /// <param name="Parameters">Contains a list of extra parameters that were set when the transaction was created..</param>
        /// <param name="Messages">List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call..</param>
        public TransactionModel(int? CompanyId = null, DateTime? Date = null, DateTime? TaxDate = null, DateTime? PaymentDate = null, StatusEnum? Status = null, TypeEnum? Type = null, string BatchCode = null, string CurrencyCode = null, string CustomerUsageType = null, string CustomerVendorCode = null, string ExemptNo = null, bool? Reconciled = null, string LocationCode = null, string PurchaseOrderNo = null, string ReferenceCode = null, string SalespersonCode = null, TaxOverrideTypeEnum? TaxOverrideType = null, double? TaxOverrideAmount = null, string TaxOverrideReason = null, double? TotalAmount = null, double? TotalExempt = null, double? TotalTax = null, double? TotalTaxable = null, double? TotalTaxCalculated = null, AdjustmentReasonEnum? AdjustmentReason = null, string AdjustmentDescription = null, bool? Locked = null, string Region = null, string Country = null, int? Version = null, string SoftwareVersion = null, long? OriginAddressId = null, long? DestinationAddressId = null, DateTime? ExchangeRateEffectiveDate = null, double? ExchangeRate = null, bool? IsSellerImporterOfRecord = null, string Description = null, string Email = null, List<TransactionLineModel> Lines = null, List<TransactionAddressModel> Addresses = null, List<TransactionModel> History = null, List<TransactionSummary> Summary = null, Dictionary<string, string> Parameters = null, List<AvaTaxMessage> Messages = null)
        {
            this.CompanyId = CompanyId;
            this.Date = Date;
            this.TaxDate = TaxDate;
            this.PaymentDate = PaymentDate;
            this.Status = Status;
            this.Type = Type;
            this.BatchCode = BatchCode;
            this.CurrencyCode = CurrencyCode;
            this.CustomerUsageType = CustomerUsageType;
            this.CustomerVendorCode = CustomerVendorCode;
            this.ExemptNo = ExemptNo;
            this.Reconciled = Reconciled;
            this.LocationCode = LocationCode;
            this.PurchaseOrderNo = PurchaseOrderNo;
            this.ReferenceCode = ReferenceCode;
            this.SalespersonCode = SalespersonCode;
            this.TaxOverrideType = TaxOverrideType;
            this.TaxOverrideAmount = TaxOverrideAmount;
            this.TaxOverrideReason = TaxOverrideReason;
            this.TotalAmount = TotalAmount;
            this.TotalExempt = TotalExempt;
            this.TotalTax = TotalTax;
            this.TotalTaxable = TotalTaxable;
            this.TotalTaxCalculated = TotalTaxCalculated;
            this.AdjustmentReason = AdjustmentReason;
            this.AdjustmentDescription = AdjustmentDescription;
            this.Locked = Locked;
            this.Region = Region;
            this.Country = Country;
            this.Version = Version;
            this.SoftwareVersion = SoftwareVersion;
            this.OriginAddressId = OriginAddressId;
            this.DestinationAddressId = DestinationAddressId;
            this.ExchangeRateEffectiveDate = ExchangeRateEffectiveDate;
            this.ExchangeRate = ExchangeRate;
            this.IsSellerImporterOfRecord = IsSellerImporterOfRecord;
            this.Description = Description;
            this.Email = Email;
            this.Lines = Lines;
            this.Addresses = Addresses;
            this.History = History;
            this.Summary = Summary;
            this.Parameters = Parameters;
            this.Messages = Messages;
        }
        
        /// <summary>
        /// The unique ID number of this transaction.
        /// </summary>
        /// <value>The unique ID number of this transaction.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }
        /// <summary>
        /// A unique customer-provided code identifying this transaction.
        /// </summary>
        /// <value>A unique customer-provided code identifying this transaction.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; private set; }
        /// <summary>
        /// The unique ID number of the company that recorded this transaction.
        /// </summary>
        /// <value>The unique ID number of the company that recorded this transaction.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; set; }
        /// <summary>
        /// The date on which this transaction occurred.
        /// </summary>
        /// <value>The date on which this transaction occurred.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// The date that was used when calculating tax for this transaction.              By default, this should be the same as the transaction date; however, when a consumer returns a product purchased in a previous month,              it may be necessary to specify the date of the original transaction in order to correctly return the exact amount of sales tax that was              charged of the consumer on the original date they purchased the product.
        /// </summary>
        /// <value>The date that was used when calculating tax for this transaction.              By default, this should be the same as the transaction date; however, when a consumer returns a product purchased in a previous month,              it may be necessary to specify the date of the original transaction in order to correctly return the exact amount of sales tax that was              charged of the consumer on the original date they purchased the product.</value>
        [DataMember(Name="taxDate", EmitDefaultValue=false)]
        public DateTime? TaxDate { get; set; }
        /// <summary>
        /// The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction.
        /// </summary>
        /// <value>The date when payment was made on this transaction.  By default, this should be the same as the date of the transaction.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }
        /// <summary>
        /// If this transaction was created as part of a batch, this code indicates which batch.
        /// </summary>
        /// <value>If this transaction was created as part of a batch, this code indicates which batch.</value>
        [DataMember(Name="batchCode", EmitDefaultValue=false)]
        public string BatchCode { get; set; }
        /// <summary>
        /// The three-character ISO 4217 currency code that was used for payment for this transaction.
        /// </summary>
        /// <value>The three-character ISO 4217 currency code that was used for payment for this transaction.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules.
        /// </summary>
        /// <value>The customer usage type for this transaction.  Customer usage types often affect exemption or taxability rules.</value>
        [DataMember(Name="customerUsageType", EmitDefaultValue=false)]
        public string CustomerUsageType { get; set; }
        /// <summary>
        /// CustomerVendorCode
        /// </summary>
        /// <value>CustomerVendorCode</value>
        [DataMember(Name="customerVendorCode", EmitDefaultValue=false)]
        public string CustomerVendorCode { get; set; }
        /// <summary>
        /// If this transaction was exempt, this field will contain the word \&quot;Exempt\&quot;.
        /// </summary>
        /// <value>If this transaction was exempt, this field will contain the word \&quot;Exempt\&quot;.</value>
        [DataMember(Name="exemptNo", EmitDefaultValue=false)]
        public string ExemptNo { get; set; }
        /// <summary>
        /// If this transaction has been reconciled against the company&#39;s ledger, this value is set to true.
        /// </summary>
        /// <value>If this transaction has been reconciled against the company&#39;s ledger, this value is set to true.</value>
        [DataMember(Name="reconciled", EmitDefaultValue=false)]
        public bool? Reconciled { get; set; }
        /// <summary>
        /// If this transaction was made from a specific reporting location, this is the code string of the location.              For customers using Returns, this indicates how tax will be reported according to different locations on the tax forms.
        /// </summary>
        /// <value>If this transaction was made from a specific reporting location, this is the code string of the location.              For customers using Returns, this indicates how tax will be reported according to different locations on the tax forms.</value>
        [DataMember(Name="locationCode", EmitDefaultValue=false)]
        public string LocationCode { get; set; }
        /// <summary>
        /// The customer-supplied purchase order number of this transaction.
        /// </summary>
        /// <value>The customer-supplied purchase order number of this transaction.</value>
        [DataMember(Name="purchaseOrderNo", EmitDefaultValue=false)]
        public string PurchaseOrderNo { get; set; }
        /// <summary>
        /// A user-defined reference code for this transaction.
        /// </summary>
        /// <value>A user-defined reference code for this transaction.</value>
        [DataMember(Name="referenceCode", EmitDefaultValue=false)]
        public string ReferenceCode { get; set; }
        /// <summary>
        /// The salesperson who provided this transaction.  Not required.
        /// </summary>
        /// <value>The salesperson who provided this transaction.  Not required.</value>
        [DataMember(Name="salespersonCode", EmitDefaultValue=false)]
        public string SalespersonCode { get; set; }
        /// <summary>
        /// If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer.
        /// </summary>
        /// <value>If a tax override was applied to this transaction, indicates the amount of tax that was requested by the customer.</value>
        [DataMember(Name="taxOverrideAmount", EmitDefaultValue=false)]
        public double? TaxOverrideAmount { get; set; }
        /// <summary>
        /// If a tax override was applied to this transaction, indicates the reason for the tax override.
        /// </summary>
        /// <value>If a tax override was applied to this transaction, indicates the reason for the tax override.</value>
        [DataMember(Name="taxOverrideReason", EmitDefaultValue=false)]
        public string TaxOverrideReason { get; set; }
        /// <summary>
        /// The total amount of this transaction.
        /// </summary>
        /// <value>The total amount of this transaction.</value>
        [DataMember(Name="totalAmount", EmitDefaultValue=false)]
        public double? TotalAmount { get; set; }
        /// <summary>
        /// The amount of this transaction that was exempt.
        /// </summary>
        /// <value>The amount of this transaction that was exempt.</value>
        [DataMember(Name="totalExempt", EmitDefaultValue=false)]
        public double? TotalExempt { get; set; }
        /// <summary>
        /// The total tax calculated for all lines in this transaction.
        /// </summary>
        /// <value>The total tax calculated for all lines in this transaction.</value>
        [DataMember(Name="totalTax", EmitDefaultValue=false)]
        public double? TotalTax { get; set; }
        /// <summary>
        /// The portion of the total amount of this transaction that was taxable.
        /// </summary>
        /// <value>The portion of the total amount of this transaction that was taxable.</value>
        [DataMember(Name="totalTaxable", EmitDefaultValue=false)]
        public double? TotalTaxable { get; set; }
        /// <summary>
        /// If a tax override was applied to this transaction, indicates the amount of tax Avalara calculated for the transaction.
        /// </summary>
        /// <value>If a tax override was applied to this transaction, indicates the amount of tax Avalara calculated for the transaction.</value>
        [DataMember(Name="totalTaxCalculated", EmitDefaultValue=false)]
        public double? TotalTaxCalculated { get; set; }
        /// <summary>
        /// If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted.
        /// </summary>
        /// <value>If this transaction was adjusted, indicates a description of the reason why the transaction was adjusted.</value>
        [DataMember(Name="adjustmentDescription", EmitDefaultValue=false)]
        public string AdjustmentDescription { get; set; }
        /// <summary>
        /// If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting.
        /// </summary>
        /// <value>If this transaction has been reported to a tax authority, this transaction is considered locked and may not be adjusted after reporting.</value>
        [DataMember(Name="locked", EmitDefaultValue=false)]
        public bool? Locked { get; set; }
        /// <summary>
        /// The two-or-three character ISO region code of the region for this transaction.
        /// </summary>
        /// <value>The two-or-three character ISO region code of the region for this transaction.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// The two-character ISO 3166 code of the country for this transaction.
        /// </summary>
        /// <value>The two-character ISO 3166 code of the country for this transaction.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction              is adjusted.
        /// </summary>
        /// <value>If this transaction was adjusted, this indicates the version number of this transaction.  Incremented each time the transaction              is adjusted.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// The software version used to calculate this transaction.
        /// </summary>
        /// <value>The software version used to calculate this transaction.</value>
        [DataMember(Name="softwareVersion", EmitDefaultValue=false)]
        public string SoftwareVersion { get; set; }
        /// <summary>
        /// The unique ID number of the origin address for this transaction.
        /// </summary>
        /// <value>The unique ID number of the origin address for this transaction.</value>
        [DataMember(Name="originAddressId", EmitDefaultValue=false)]
        public long? OriginAddressId { get; set; }
        /// <summary>
        /// The unique ID number of the destination address for this transaction.
        /// </summary>
        /// <value>The unique ID number of the destination address for this transaction.</value>
        [DataMember(Name="destinationAddressId", EmitDefaultValue=false)]
        public long? DestinationAddressId { get; set; }
        /// <summary>
        /// If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated.
        /// </summary>
        /// <value>If this transaction included foreign currency exchange, this is the date as of which the exchange rate was calculated.</value>
        [DataMember(Name="exchangeRateEffectiveDate", EmitDefaultValue=false)]
        public DateTime? ExchangeRateEffectiveDate { get; set; }
        /// <summary>
        /// If this transaction included foreign currency exchange, this is the exchange rate that was used.
        /// </summary>
        /// <value>If this transaction included foreign currency exchange, this is the exchange rate that was used.</value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }
        /// <summary>
        /// If true, this seller was considered the importer of record of a product shipped internationally.
        /// </summary>
        /// <value>If true, this seller was considered the importer of record of a product shipped internationally.</value>
        [DataMember(Name="isSellerImporterOfRecord", EmitDefaultValue=false)]
        public bool? IsSellerImporterOfRecord { get; set; }
        /// <summary>
        /// Description of this transaction.
        /// </summary>
        /// <value>Description of this transaction.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Email address associated with this transaction.
        /// </summary>
        /// <value>Email address associated with this transaction.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Lines\&quot; or \&quot;?$include&#x3D;Details\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Lines\&quot; or \&quot;?$include&#x3D;Details\&quot; to your URL.</value>
        [DataMember(Name="lines", EmitDefaultValue=false)]
        public List<TransactionLineModel> Lines { get; set; }
        /// <summary>
        /// Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Addresses\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of line items in this transaction.  To fetch this list, add the query string \&quot;?$include&#x3D;Addresses\&quot; to your URL.</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<TransactionAddressModel> Addresses { get; set; }
        /// <summary>
        /// If this transaction has been adjusted, this list contains all the previous versions of the document.
        /// </summary>
        /// <value>If this transaction has been adjusted, this list contains all the previous versions of the document.</value>
        [DataMember(Name="history", EmitDefaultValue=false)]
        public List<TransactionModel> History { get; set; }
        /// <summary>
        /// Contains a summary of tax on this transaction.
        /// </summary>
        /// <value>Contains a summary of tax on this transaction.</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public List<TransactionSummary> Summary { get; set; }
        /// <summary>
        /// Contains a list of extra parameters that were set when the transaction was created.
        /// </summary>
        /// <value>Contains a list of extra parameters that were set when the transaction was created.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }
        /// <summary>
        /// List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call.
        /// </summary>
        /// <value>List of informational and warning messages regarding this API call.  These messages are only relevant to the current API call.</value>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public List<AvaTaxMessage> Messages { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  TaxDate: ").Append(TaxDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BatchCode: ").Append(BatchCode).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomerUsageType: ").Append(CustomerUsageType).Append("\n");
            sb.Append("  CustomerVendorCode: ").Append(CustomerVendorCode).Append("\n");
            sb.Append("  ExemptNo: ").Append(ExemptNo).Append("\n");
            sb.Append("  Reconciled: ").Append(Reconciled).Append("\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  PurchaseOrderNo: ").Append(PurchaseOrderNo).Append("\n");
            sb.Append("  ReferenceCode: ").Append(ReferenceCode).Append("\n");
            sb.Append("  SalespersonCode: ").Append(SalespersonCode).Append("\n");
            sb.Append("  TaxOverrideType: ").Append(TaxOverrideType).Append("\n");
            sb.Append("  TaxOverrideAmount: ").Append(TaxOverrideAmount).Append("\n");
            sb.Append("  TaxOverrideReason: ").Append(TaxOverrideReason).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalExempt: ").Append(TotalExempt).Append("\n");
            sb.Append("  TotalTax: ").Append(TotalTax).Append("\n");
            sb.Append("  TotalTaxable: ").Append(TotalTaxable).Append("\n");
            sb.Append("  TotalTaxCalculated: ").Append(TotalTaxCalculated).Append("\n");
            sb.Append("  AdjustmentReason: ").Append(AdjustmentReason).Append("\n");
            sb.Append("  AdjustmentDescription: ").Append(AdjustmentDescription).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SoftwareVersion: ").Append(SoftwareVersion).Append("\n");
            sb.Append("  OriginAddressId: ").Append(OriginAddressId).Append("\n");
            sb.Append("  DestinationAddressId: ").Append(DestinationAddressId).Append("\n");
            sb.Append("  ExchangeRateEffectiveDate: ").Append(ExchangeRateEffectiveDate).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  IsSellerImporterOfRecord: ").Append(IsSellerImporterOfRecord).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionModel);
        }

        /// <summary>
        /// Returns true if TransactionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.TaxDate == other.TaxDate ||
                    this.TaxDate != null &&
                    this.TaxDate.Equals(other.TaxDate)
                ) && 
                (
                    this.PaymentDate == other.PaymentDate ||
                    this.PaymentDate != null &&
                    this.PaymentDate.Equals(other.PaymentDate)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.BatchCode == other.BatchCode ||
                    this.BatchCode != null &&
                    this.BatchCode.Equals(other.BatchCode)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CustomerUsageType == other.CustomerUsageType ||
                    this.CustomerUsageType != null &&
                    this.CustomerUsageType.Equals(other.CustomerUsageType)
                ) && 
                (
                    this.CustomerVendorCode == other.CustomerVendorCode ||
                    this.CustomerVendorCode != null &&
                    this.CustomerVendorCode.Equals(other.CustomerVendorCode)
                ) && 
                (
                    this.ExemptNo == other.ExemptNo ||
                    this.ExemptNo != null &&
                    this.ExemptNo.Equals(other.ExemptNo)
                ) && 
                (
                    this.Reconciled == other.Reconciled ||
                    this.Reconciled != null &&
                    this.Reconciled.Equals(other.Reconciled)
                ) && 
                (
                    this.LocationCode == other.LocationCode ||
                    this.LocationCode != null &&
                    this.LocationCode.Equals(other.LocationCode)
                ) && 
                (
                    this.PurchaseOrderNo == other.PurchaseOrderNo ||
                    this.PurchaseOrderNo != null &&
                    this.PurchaseOrderNo.Equals(other.PurchaseOrderNo)
                ) && 
                (
                    this.ReferenceCode == other.ReferenceCode ||
                    this.ReferenceCode != null &&
                    this.ReferenceCode.Equals(other.ReferenceCode)
                ) && 
                (
                    this.SalespersonCode == other.SalespersonCode ||
                    this.SalespersonCode != null &&
                    this.SalespersonCode.Equals(other.SalespersonCode)
                ) && 
                (
                    this.TaxOverrideType == other.TaxOverrideType ||
                    this.TaxOverrideType != null &&
                    this.TaxOverrideType.Equals(other.TaxOverrideType)
                ) && 
                (
                    this.TaxOverrideAmount == other.TaxOverrideAmount ||
                    this.TaxOverrideAmount != null &&
                    this.TaxOverrideAmount.Equals(other.TaxOverrideAmount)
                ) && 
                (
                    this.TaxOverrideReason == other.TaxOverrideReason ||
                    this.TaxOverrideReason != null &&
                    this.TaxOverrideReason.Equals(other.TaxOverrideReason)
                ) && 
                (
                    this.TotalAmount == other.TotalAmount ||
                    this.TotalAmount != null &&
                    this.TotalAmount.Equals(other.TotalAmount)
                ) && 
                (
                    this.TotalExempt == other.TotalExempt ||
                    this.TotalExempt != null &&
                    this.TotalExempt.Equals(other.TotalExempt)
                ) && 
                (
                    this.TotalTax == other.TotalTax ||
                    this.TotalTax != null &&
                    this.TotalTax.Equals(other.TotalTax)
                ) && 
                (
                    this.TotalTaxable == other.TotalTaxable ||
                    this.TotalTaxable != null &&
                    this.TotalTaxable.Equals(other.TotalTaxable)
                ) && 
                (
                    this.TotalTaxCalculated == other.TotalTaxCalculated ||
                    this.TotalTaxCalculated != null &&
                    this.TotalTaxCalculated.Equals(other.TotalTaxCalculated)
                ) && 
                (
                    this.AdjustmentReason == other.AdjustmentReason ||
                    this.AdjustmentReason != null &&
                    this.AdjustmentReason.Equals(other.AdjustmentReason)
                ) && 
                (
                    this.AdjustmentDescription == other.AdjustmentDescription ||
                    this.AdjustmentDescription != null &&
                    this.AdjustmentDescription.Equals(other.AdjustmentDescription)
                ) && 
                (
                    this.Locked == other.Locked ||
                    this.Locked != null &&
                    this.Locked.Equals(other.Locked)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.SoftwareVersion == other.SoftwareVersion ||
                    this.SoftwareVersion != null &&
                    this.SoftwareVersion.Equals(other.SoftwareVersion)
                ) && 
                (
                    this.OriginAddressId == other.OriginAddressId ||
                    this.OriginAddressId != null &&
                    this.OriginAddressId.Equals(other.OriginAddressId)
                ) && 
                (
                    this.DestinationAddressId == other.DestinationAddressId ||
                    this.DestinationAddressId != null &&
                    this.DestinationAddressId.Equals(other.DestinationAddressId)
                ) && 
                (
                    this.ExchangeRateEffectiveDate == other.ExchangeRateEffectiveDate ||
                    this.ExchangeRateEffectiveDate != null &&
                    this.ExchangeRateEffectiveDate.Equals(other.ExchangeRateEffectiveDate)
                ) && 
                (
                    this.ExchangeRate == other.ExchangeRate ||
                    this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    this.IsSellerImporterOfRecord == other.IsSellerImporterOfRecord ||
                    this.IsSellerImporterOfRecord != null &&
                    this.IsSellerImporterOfRecord.Equals(other.IsSellerImporterOfRecord)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                ) && 
                (
                    this.Lines == other.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(other.Lines)
                ) && 
                (
                    this.Addresses == other.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    this.History == other.History ||
                    this.History != null &&
                    this.History.SequenceEqual(other.History)
                ) && 
                (
                    this.Summary == other.Summary ||
                    this.Summary != null &&
                    this.Summary.SequenceEqual(other.Summary)
                ) && 
                (
                    this.Parameters == other.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(other.Parameters)
                ) && 
                (
                    this.Messages == other.Messages ||
                    this.Messages != null &&
                    this.Messages.SequenceEqual(other.Messages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.TaxDate != null)
                    hash = hash * 59 + this.TaxDate.GetHashCode();
                if (this.PaymentDate != null)
                    hash = hash * 59 + this.PaymentDate.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.BatchCode != null)
                    hash = hash * 59 + this.BatchCode.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CustomerUsageType != null)
                    hash = hash * 59 + this.CustomerUsageType.GetHashCode();
                if (this.CustomerVendorCode != null)
                    hash = hash * 59 + this.CustomerVendorCode.GetHashCode();
                if (this.ExemptNo != null)
                    hash = hash * 59 + this.ExemptNo.GetHashCode();
                if (this.Reconciled != null)
                    hash = hash * 59 + this.Reconciled.GetHashCode();
                if (this.LocationCode != null)
                    hash = hash * 59 + this.LocationCode.GetHashCode();
                if (this.PurchaseOrderNo != null)
                    hash = hash * 59 + this.PurchaseOrderNo.GetHashCode();
                if (this.ReferenceCode != null)
                    hash = hash * 59 + this.ReferenceCode.GetHashCode();
                if (this.SalespersonCode != null)
                    hash = hash * 59 + this.SalespersonCode.GetHashCode();
                if (this.TaxOverrideType != null)
                    hash = hash * 59 + this.TaxOverrideType.GetHashCode();
                if (this.TaxOverrideAmount != null)
                    hash = hash * 59 + this.TaxOverrideAmount.GetHashCode();
                if (this.TaxOverrideReason != null)
                    hash = hash * 59 + this.TaxOverrideReason.GetHashCode();
                if (this.TotalAmount != null)
                    hash = hash * 59 + this.TotalAmount.GetHashCode();
                if (this.TotalExempt != null)
                    hash = hash * 59 + this.TotalExempt.GetHashCode();
                if (this.TotalTax != null)
                    hash = hash * 59 + this.TotalTax.GetHashCode();
                if (this.TotalTaxable != null)
                    hash = hash * 59 + this.TotalTaxable.GetHashCode();
                if (this.TotalTaxCalculated != null)
                    hash = hash * 59 + this.TotalTaxCalculated.GetHashCode();
                if (this.AdjustmentReason != null)
                    hash = hash * 59 + this.AdjustmentReason.GetHashCode();
                if (this.AdjustmentDescription != null)
                    hash = hash * 59 + this.AdjustmentDescription.GetHashCode();
                if (this.Locked != null)
                    hash = hash * 59 + this.Locked.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.SoftwareVersion != null)
                    hash = hash * 59 + this.SoftwareVersion.GetHashCode();
                if (this.OriginAddressId != null)
                    hash = hash * 59 + this.OriginAddressId.GetHashCode();
                if (this.DestinationAddressId != null)
                    hash = hash * 59 + this.DestinationAddressId.GetHashCode();
                if (this.ExchangeRateEffectiveDate != null)
                    hash = hash * 59 + this.ExchangeRateEffectiveDate.GetHashCode();
                if (this.ExchangeRate != null)
                    hash = hash * 59 + this.ExchangeRate.GetHashCode();
                if (this.IsSellerImporterOfRecord != null)
                    hash = hash * 59 + this.IsSellerImporterOfRecord.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                if (this.Lines != null)
                    hash = hash * 59 + this.Lines.GetHashCode();
                if (this.Addresses != null)
                    hash = hash * 59 + this.Addresses.GetHashCode();
                if (this.History != null)
                    hash = hash * 59 + this.History.GetHashCode();
                if (this.Summary != null)
                    hash = hash * 59 + this.Summary.GetHashCode();
                if (this.Parameters != null)
                    hash = hash * 59 + this.Parameters.GetHashCode();
                if (this.Messages != null)
                    hash = hash * 59 + this.Messages.GetHashCode();
                return hash;
            }
        }
    }

}
