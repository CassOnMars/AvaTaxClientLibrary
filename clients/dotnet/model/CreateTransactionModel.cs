/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// Create a transaction
    /// </summary>
    [DataContract]
    public partial class CreateTransactionModel :  IEquatable<CreateTransactionModel>
    {
        /// <summary>
        /// Document Type
        /// </summary>
        /// <value>Document Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum SalesOrder for "SalesOrder"
            /// </summary>
            [EnumMember(Value = "SalesOrder")]
            SalesOrder,
            
            /// <summary>
            /// Enum SalesInvoice for "SalesInvoice"
            /// </summary>
            [EnumMember(Value = "SalesInvoice")]
            SalesInvoice,
            
            /// <summary>
            /// Enum PurchaseOrder for "PurchaseOrder"
            /// </summary>
            [EnumMember(Value = "PurchaseOrder")]
            PurchaseOrder,
            
            /// <summary>
            /// Enum PurchaseInvoice for "PurchaseInvoice"
            /// </summary>
            [EnumMember(Value = "PurchaseInvoice")]
            PurchaseInvoice,
            
            /// <summary>
            /// Enum ReturnOrder for "ReturnOrder"
            /// </summary>
            [EnumMember(Value = "ReturnOrder")]
            ReturnOrder,
            
            /// <summary>
            /// Enum ReturnInvoice for "ReturnInvoice"
            /// </summary>
            [EnumMember(Value = "ReturnInvoice")]
            ReturnInvoice,
            
            /// <summary>
            /// Enum InventoryTransferOrder for "InventoryTransferOrder"
            /// </summary>
            [EnumMember(Value = "InventoryTransferOrder")]
            InventoryTransferOrder,
            
            /// <summary>
            /// Enum InventoryTransferInvoice for "InventoryTransferInvoice"
            /// </summary>
            [EnumMember(Value = "InventoryTransferInvoice")]
            InventoryTransferInvoice,
            
            /// <summary>
            /// Enum ReverseChargeOrder for "ReverseChargeOrder"
            /// </summary>
            [EnumMember(Value = "ReverseChargeOrder")]
            ReverseChargeOrder,
            
            /// <summary>
            /// Enum ReverseChargeInvoice for "ReverseChargeInvoice"
            /// </summary>
            [EnumMember(Value = "ReverseChargeInvoice")]
            ReverseChargeInvoice,
            
            /// <summary>
            /// Enum Any for "Any"
            /// </summary>
            [EnumMember(Value = "Any")]
            Any
        }

        /// <summary>
        /// Specifies whether the tax calculation is handled Local, Remote, or Automatic (default)
        /// </summary>
        /// <value>Specifies whether the tax calculation is handled Local, Remote, or Automatic (default)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceModeEnum
        {
            
            /// <summary>
            /// Enum Automatic for "Automatic"
            /// </summary>
            [EnumMember(Value = "Automatic")]
            Automatic,
            
            /// <summary>
            /// Enum Local for "Local"
            /// </summary>
            [EnumMember(Value = "Local")]
            Local,
            
            /// <summary>
            /// Enum Remote for "Remote"
            /// </summary>
            [EnumMember(Value = "Remote")]
            Remote
        }

        /// <summary>
        /// If the user wishes to request additional debug information from this transaction, specify a level higher than 'normal'
        /// </summary>
        /// <value>If the user wishes to request additional debug information from this transaction, specify a level higher than 'normal'</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DebugLevelEnum
        {
            
            /// <summary>
            /// Enum Normal for "Normal"
            /// </summary>
            [EnumMember(Value = "Normal")]
            Normal,
            
            /// <summary>
            /// Enum Diagnostic for "Diagnostic"
            /// </summary>
            [EnumMember(Value = "Diagnostic")]
            Diagnostic
        }

        /// <summary>
        /// Document Type
        /// </summary>
        /// <value>Document Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Specifies whether the tax calculation is handled Local, Remote, or Automatic (default)
        /// </summary>
        /// <value>Specifies whether the tax calculation is handled Local, Remote, or Automatic (default)</value>
        [DataMember(Name="serviceMode", EmitDefaultValue=false)]
        public ServiceModeEnum? ServiceMode { get; set; }
        /// <summary>
        /// If the user wishes to request additional debug information from this transaction, specify a level higher than 'normal'
        /// </summary>
        /// <value>If the user wishes to request additional debug information from this transaction, specify a level higher than 'normal'</value>
        [DataMember(Name="debugLevel", EmitDefaultValue=false)]
        public DebugLevelEnum? DebugLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateTransactionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionModel" /> class.
        /// </summary>
        /// <param name="Type">Document Type.</param>
        /// <param name="Code">Transaction Code - the internal reference code used by the client application.  This is used for operations such as                  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction..</param>
        /// <param name="CompanyCode">Company Code - If you are posting to /api/v2/transactions/create, you must specify the company code value here.                  If you are posting to /api/v2/companies/(companyCode)/transactions/create, this value must be null. (required).</param>
        /// <param name="Date">Transaction Date - The date on the invoice, purchase order, etc. (required).</param>
        /// <param name="SalespersonCode">Salesperson Code - The client application salesperson reference code..</param>
        /// <param name="CustomerCode">Customer Code - The client application customer reference code. (required).</param>
        /// <param name="CustomerUsageType">Customer Usage Type - The client application customer or usage type..</param>
        /// <param name="Discount">Discount - The discount amount to apply to the document..</param>
        /// <param name="PurchaseOrderNo">Purchase Order Number for this document.</param>
        /// <param name="ExemptionNo">Exemption Number for this document.</param>
        /// <param name="Addresses">Addresses.</param>
        /// <param name="Lines">Document line items list.</param>
        /// <param name="Parameters">Special parameters for this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint..</param>
        /// <param name="ReferenceCode">Reference Code used to reference the original document for a return invoice.</param>
        /// <param name="ReportingLocationCode">Sets the sale location code (Outlet ID) for reporting this document to the tax authority..</param>
        /// <param name="Commit">Causes the document to be committed if true..</param>
        /// <param name="BatchCode">BatchCode for batch operations..</param>
        /// <param name="TaxOverride">Specifies a tax override for the entire document.</param>
        /// <param name="TaxDate">Indicates the tax effectivity override date for the entire document..</param>
        /// <param name="CurrencyCode">3 character ISO 4217 currency code..</param>
        /// <param name="ServiceMode">Specifies whether the tax calculation is handled Local, Remote, or Automatic (default).</param>
        /// <param name="ExchangeRate">Currency exchange rate from this transaction to the company base currency..</param>
        /// <param name="ExchangeRateEffectiveDate">Effective date of the exchange rate..</param>
        /// <param name="PosLaneCode">Sets the POS Lane Code sent by the User for this document..</param>
        /// <param name="BusinessIdentificationNo">BusinessIdentificationNo.</param>
        /// <param name="IsSellerImporterOfRecord">Specifies if the Transaction has the seller as IsSellerImporterOfRecord.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Email">Email.</param>
        /// <param name="DebugLevel">If the user wishes to request additional debug information from this transaction, specify a level higher than &#39;normal&#39;.</param>
        public CreateTransactionModel(TypeEnum? Type = null, string Code = null, string CompanyCode = null, DateTime? Date = null, string SalespersonCode = null, string CustomerCode = null, string CustomerUsageType = null, double? Discount = null, string PurchaseOrderNo = null, string ExemptionNo = null, CreateTransactionModelAddresses Addresses = null, List<LineItemModel> Lines = null, Dictionary<string, string> Parameters = null, string ReferenceCode = null, string ReportingLocationCode = null, bool? Commit = null, string BatchCode = null, TaxOverrideModel TaxOverride = null, DateTime? TaxDate = null, string CurrencyCode = null, ServiceModeEnum? ServiceMode = null, double? ExchangeRate = null, DateTime? ExchangeRateEffectiveDate = null, string PosLaneCode = null, string BusinessIdentificationNo = null, bool? IsSellerImporterOfRecord = null, string Description = null, string Email = null, DebugLevelEnum? DebugLevel = null)
        {
            // to ensure "CompanyCode" is required (not null)
            if (CompanyCode == null)
            {
                throw new InvalidDataException("CompanyCode is a required property for CreateTransactionModel and cannot be null");
            }
            else
            {
                this.CompanyCode = CompanyCode;
            }
            // to ensure "Date" is required (not null)
            if (Date == null)
            {
                throw new InvalidDataException("Date is a required property for CreateTransactionModel and cannot be null");
            }
            else
            {
                this.Date = Date;
            }
            // to ensure "CustomerCode" is required (not null)
            if (CustomerCode == null)
            {
                throw new InvalidDataException("CustomerCode is a required property for CreateTransactionModel and cannot be null");
            }
            else
            {
                this.CustomerCode = CustomerCode;
            }
            this.Type = Type;
            this.Code = Code;
            this.SalespersonCode = SalespersonCode;
            this.CustomerUsageType = CustomerUsageType;
            this.Discount = Discount;
            this.PurchaseOrderNo = PurchaseOrderNo;
            this.ExemptionNo = ExemptionNo;
            this.Addresses = Addresses;
            this.Lines = Lines;
            this.Parameters = Parameters;
            this.ReferenceCode = ReferenceCode;
            this.ReportingLocationCode = ReportingLocationCode;
            this.Commit = Commit;
            this.BatchCode = BatchCode;
            this.TaxOverride = TaxOverride;
            this.TaxDate = TaxDate;
            this.CurrencyCode = CurrencyCode;
            this.ServiceMode = ServiceMode;
            this.ExchangeRate = ExchangeRate;
            this.ExchangeRateEffectiveDate = ExchangeRateEffectiveDate;
            this.PosLaneCode = PosLaneCode;
            this.BusinessIdentificationNo = BusinessIdentificationNo;
            this.IsSellerImporterOfRecord = IsSellerImporterOfRecord;
            this.Description = Description;
            this.Email = Email;
            this.DebugLevel = DebugLevel;
        }
        
        /// <summary>
        /// Transaction Code - the internal reference code used by the client application.  This is used for operations such as                  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction.
        /// </summary>
        /// <value>Transaction Code - the internal reference code used by the client application.  This is used for operations such as                  Get, Adjust, Settle, and Void.  If you leave the transaction code blank, a GUID will be assigned to each transaction.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Company Code - If you are posting to /api/v2/transactions/create, you must specify the company code value here.                  If you are posting to /api/v2/companies/(companyCode)/transactions/create, this value must be null.
        /// </summary>
        /// <value>Company Code - If you are posting to /api/v2/transactions/create, you must specify the company code value here.                  If you are posting to /api/v2/companies/(companyCode)/transactions/create, this value must be null.</value>
        [DataMember(Name="companyCode", EmitDefaultValue=false)]
        public string CompanyCode { get; set; }
        /// <summary>
        /// Transaction Date - The date on the invoice, purchase order, etc.
        /// </summary>
        /// <value>Transaction Date - The date on the invoice, purchase order, etc.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }
        /// <summary>
        /// Salesperson Code - The client application salesperson reference code.
        /// </summary>
        /// <value>Salesperson Code - The client application salesperson reference code.</value>
        [DataMember(Name="salespersonCode", EmitDefaultValue=false)]
        public string SalespersonCode { get; set; }
        /// <summary>
        /// Customer Code - The client application customer reference code.
        /// </summary>
        /// <value>Customer Code - The client application customer reference code.</value>
        [DataMember(Name="customerCode", EmitDefaultValue=false)]
        public string CustomerCode { get; set; }
        /// <summary>
        /// Customer Usage Type - The client application customer or usage type.
        /// </summary>
        /// <value>Customer Usage Type - The client application customer or usage type.</value>
        [DataMember(Name="customerUsageType", EmitDefaultValue=false)]
        public string CustomerUsageType { get; set; }
        /// <summary>
        /// Discount - The discount amount to apply to the document.
        /// </summary>
        /// <value>Discount - The discount amount to apply to the document.</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public double? Discount { get; set; }
        /// <summary>
        /// Purchase Order Number for this document
        /// </summary>
        /// <value>Purchase Order Number for this document</value>
        [DataMember(Name="purchaseOrderNo", EmitDefaultValue=false)]
        public string PurchaseOrderNo { get; set; }
        /// <summary>
        /// Exemption Number for this document
        /// </summary>
        /// <value>Exemption Number for this document</value>
        [DataMember(Name="exemptionNo", EmitDefaultValue=false)]
        public string ExemptionNo { get; set; }
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public CreateTransactionModelAddresses Addresses { get; set; }
        /// <summary>
        /// Document line items list
        /// </summary>
        /// <value>Document line items list</value>
        [DataMember(Name="lines", EmitDefaultValue=false)]
        public List<LineItemModel> Lines { get; set; }
        /// <summary>
        /// Special parameters for this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint.
        /// </summary>
        /// <value>Special parameters for this transaction.                  To get a full list of available parameters, please use the /api/v2/definitions/parameters endpoint.</value>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }
        /// <summary>
        /// Reference Code used to reference the original document for a return invoice
        /// </summary>
        /// <value>Reference Code used to reference the original document for a return invoice</value>
        [DataMember(Name="referenceCode", EmitDefaultValue=false)]
        public string ReferenceCode { get; set; }
        /// <summary>
        /// Sets the sale location code (Outlet ID) for reporting this document to the tax authority.
        /// </summary>
        /// <value>Sets the sale location code (Outlet ID) for reporting this document to the tax authority.</value>
        [DataMember(Name="reportingLocationCode", EmitDefaultValue=false)]
        public string ReportingLocationCode { get; set; }
        /// <summary>
        /// Causes the document to be committed if true.
        /// </summary>
        /// <value>Causes the document to be committed if true.</value>
        [DataMember(Name="commit", EmitDefaultValue=false)]
        public bool? Commit { get; set; }
        /// <summary>
        /// BatchCode for batch operations.
        /// </summary>
        /// <value>BatchCode for batch operations.</value>
        [DataMember(Name="batchCode", EmitDefaultValue=false)]
        public string BatchCode { get; set; }
        /// <summary>
        /// Specifies a tax override for the entire document
        /// </summary>
        /// <value>Specifies a tax override for the entire document</value>
        [DataMember(Name="taxOverride", EmitDefaultValue=false)]
        public TaxOverrideModel TaxOverride { get; set; }
        /// <summary>
        /// Indicates the tax effectivity override date for the entire document.
        /// </summary>
        /// <value>Indicates the tax effectivity override date for the entire document.</value>
        [DataMember(Name="taxDate", EmitDefaultValue=false)]
        public DateTime? TaxDate { get; set; }
        /// <summary>
        /// 3 character ISO 4217 currency code.
        /// </summary>
        /// <value>3 character ISO 4217 currency code.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Currency exchange rate from this transaction to the company base currency.
        /// </summary>
        /// <value>Currency exchange rate from this transaction to the company base currency.</value>
        [DataMember(Name="exchangeRate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }
        /// <summary>
        /// Effective date of the exchange rate.
        /// </summary>
        /// <value>Effective date of the exchange rate.</value>
        [DataMember(Name="exchangeRateEffectiveDate", EmitDefaultValue=false)]
        public DateTime? ExchangeRateEffectiveDate { get; set; }
        /// <summary>
        /// Sets the POS Lane Code sent by the User for this document.
        /// </summary>
        /// <value>Sets the POS Lane Code sent by the User for this document.</value>
        [DataMember(Name="posLaneCode", EmitDefaultValue=false)]
        public string PosLaneCode { get; set; }
        /// <summary>
        /// BusinessIdentificationNo
        /// </summary>
        /// <value>BusinessIdentificationNo</value>
        [DataMember(Name="businessIdentificationNo", EmitDefaultValue=false)]
        public string BusinessIdentificationNo { get; set; }
        /// <summary>
        /// Specifies if the Transaction has the seller as IsSellerImporterOfRecord
        /// </summary>
        /// <value>Specifies if the Transaction has the seller as IsSellerImporterOfRecord</value>
        [DataMember(Name="isSellerImporterOfRecord", EmitDefaultValue=false)]
        public bool? IsSellerImporterOfRecord { get; set; }
        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateTransactionModel {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SalespersonCode: ").Append(SalespersonCode).Append("\n");
            sb.Append("  CustomerCode: ").Append(CustomerCode).Append("\n");
            sb.Append("  CustomerUsageType: ").Append(CustomerUsageType).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  PurchaseOrderNo: ").Append(PurchaseOrderNo).Append("\n");
            sb.Append("  ExemptionNo: ").Append(ExemptionNo).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Lines: ").Append(Lines).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  ReferenceCode: ").Append(ReferenceCode).Append("\n");
            sb.Append("  ReportingLocationCode: ").Append(ReportingLocationCode).Append("\n");
            sb.Append("  Commit: ").Append(Commit).Append("\n");
            sb.Append("  BatchCode: ").Append(BatchCode).Append("\n");
            sb.Append("  TaxOverride: ").Append(TaxOverride).Append("\n");
            sb.Append("  TaxDate: ").Append(TaxDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ServiceMode: ").Append(ServiceMode).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  ExchangeRateEffectiveDate: ").Append(ExchangeRateEffectiveDate).Append("\n");
            sb.Append("  PosLaneCode: ").Append(PosLaneCode).Append("\n");
            sb.Append("  BusinessIdentificationNo: ").Append(BusinessIdentificationNo).Append("\n");
            sb.Append("  IsSellerImporterOfRecord: ").Append(IsSellerImporterOfRecord).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  DebugLevel: ").Append(DebugLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateTransactionModel);
        }

        /// <summary>
        /// Returns true if CreateTransactionModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateTransactionModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.CompanyCode == other.CompanyCode ||
                    this.CompanyCode != null &&
                    this.CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    this.Date == other.Date ||
                    this.Date != null &&
                    this.Date.Equals(other.Date)
                ) && 
                (
                    this.SalespersonCode == other.SalespersonCode ||
                    this.SalespersonCode != null &&
                    this.SalespersonCode.Equals(other.SalespersonCode)
                ) && 
                (
                    this.CustomerCode == other.CustomerCode ||
                    this.CustomerCode != null &&
                    this.CustomerCode.Equals(other.CustomerCode)
                ) && 
                (
                    this.CustomerUsageType == other.CustomerUsageType ||
                    this.CustomerUsageType != null &&
                    this.CustomerUsageType.Equals(other.CustomerUsageType)
                ) && 
                (
                    this.Discount == other.Discount ||
                    this.Discount != null &&
                    this.Discount.Equals(other.Discount)
                ) && 
                (
                    this.PurchaseOrderNo == other.PurchaseOrderNo ||
                    this.PurchaseOrderNo != null &&
                    this.PurchaseOrderNo.Equals(other.PurchaseOrderNo)
                ) && 
                (
                    this.ExemptionNo == other.ExemptionNo ||
                    this.ExemptionNo != null &&
                    this.ExemptionNo.Equals(other.ExemptionNo)
                ) && 
                (
                    this.Addresses == other.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.Equals(other.Addresses)
                ) && 
                (
                    this.Lines == other.Lines ||
                    this.Lines != null &&
                    this.Lines.SequenceEqual(other.Lines)
                ) && 
                (
                    this.Parameters == other.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(other.Parameters)
                ) && 
                (
                    this.ReferenceCode == other.ReferenceCode ||
                    this.ReferenceCode != null &&
                    this.ReferenceCode.Equals(other.ReferenceCode)
                ) && 
                (
                    this.ReportingLocationCode == other.ReportingLocationCode ||
                    this.ReportingLocationCode != null &&
                    this.ReportingLocationCode.Equals(other.ReportingLocationCode)
                ) && 
                (
                    this.Commit == other.Commit ||
                    this.Commit != null &&
                    this.Commit.Equals(other.Commit)
                ) && 
                (
                    this.BatchCode == other.BatchCode ||
                    this.BatchCode != null &&
                    this.BatchCode.Equals(other.BatchCode)
                ) && 
                (
                    this.TaxOverride == other.TaxOverride ||
                    this.TaxOverride != null &&
                    this.TaxOverride.Equals(other.TaxOverride)
                ) && 
                (
                    this.TaxDate == other.TaxDate ||
                    this.TaxDate != null &&
                    this.TaxDate.Equals(other.TaxDate)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.ServiceMode == other.ServiceMode ||
                    this.ServiceMode != null &&
                    this.ServiceMode.Equals(other.ServiceMode)
                ) && 
                (
                    this.ExchangeRate == other.ExchangeRate ||
                    this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(other.ExchangeRate)
                ) && 
                (
                    this.ExchangeRateEffectiveDate == other.ExchangeRateEffectiveDate ||
                    this.ExchangeRateEffectiveDate != null &&
                    this.ExchangeRateEffectiveDate.Equals(other.ExchangeRateEffectiveDate)
                ) && 
                (
                    this.PosLaneCode == other.PosLaneCode ||
                    this.PosLaneCode != null &&
                    this.PosLaneCode.Equals(other.PosLaneCode)
                ) && 
                (
                    this.BusinessIdentificationNo == other.BusinessIdentificationNo ||
                    this.BusinessIdentificationNo != null &&
                    this.BusinessIdentificationNo.Equals(other.BusinessIdentificationNo)
                ) && 
                (
                    this.IsSellerImporterOfRecord == other.IsSellerImporterOfRecord ||
                    this.IsSellerImporterOfRecord != null &&
                    this.IsSellerImporterOfRecord.Equals(other.IsSellerImporterOfRecord)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.DebugLevel == other.DebugLevel ||
                    this.DebugLevel != null &&
                    this.DebugLevel.Equals(other.DebugLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.CompanyCode != null)
                    hash = hash * 59 + this.CompanyCode.GetHashCode();
                if (this.Date != null)
                    hash = hash * 59 + this.Date.GetHashCode();
                if (this.SalespersonCode != null)
                    hash = hash * 59 + this.SalespersonCode.GetHashCode();
                if (this.CustomerCode != null)
                    hash = hash * 59 + this.CustomerCode.GetHashCode();
                if (this.CustomerUsageType != null)
                    hash = hash * 59 + this.CustomerUsageType.GetHashCode();
                if (this.Discount != null)
                    hash = hash * 59 + this.Discount.GetHashCode();
                if (this.PurchaseOrderNo != null)
                    hash = hash * 59 + this.PurchaseOrderNo.GetHashCode();
                if (this.ExemptionNo != null)
                    hash = hash * 59 + this.ExemptionNo.GetHashCode();
                if (this.Addresses != null)
                    hash = hash * 59 + this.Addresses.GetHashCode();
                if (this.Lines != null)
                    hash = hash * 59 + this.Lines.GetHashCode();
                if (this.Parameters != null)
                    hash = hash * 59 + this.Parameters.GetHashCode();
                if (this.ReferenceCode != null)
                    hash = hash * 59 + this.ReferenceCode.GetHashCode();
                if (this.ReportingLocationCode != null)
                    hash = hash * 59 + this.ReportingLocationCode.GetHashCode();
                if (this.Commit != null)
                    hash = hash * 59 + this.Commit.GetHashCode();
                if (this.BatchCode != null)
                    hash = hash * 59 + this.BatchCode.GetHashCode();
                if (this.TaxOverride != null)
                    hash = hash * 59 + this.TaxOverride.GetHashCode();
                if (this.TaxDate != null)
                    hash = hash * 59 + this.TaxDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.ServiceMode != null)
                    hash = hash * 59 + this.ServiceMode.GetHashCode();
                if (this.ExchangeRate != null)
                    hash = hash * 59 + this.ExchangeRate.GetHashCode();
                if (this.ExchangeRateEffectiveDate != null)
                    hash = hash * 59 + this.ExchangeRateEffectiveDate.GetHashCode();
                if (this.PosLaneCode != null)
                    hash = hash * 59 + this.PosLaneCode.GetHashCode();
                if (this.BusinessIdentificationNo != null)
                    hash = hash * 59 + this.BusinessIdentificationNo.GetHashCode();
                if (this.IsSellerImporterOfRecord != null)
                    hash = hash * 59 + this.IsSellerImporterOfRecord.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.DebugLevel != null)
                    hash = hash * 59 + this.DebugLevel.GetHashCode();
                return hash;
            }
        }
    }

}
