/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// A company or business entity.
    /// </summary>
    [DataContract]
    public partial class CompanyModel :  IEquatable<CompanyModel>
    {
        /// <summary>
        /// Indicates whether this company prefers to round amounts at the document level or line level.
        /// </summary>
        /// <value>Indicates whether this company prefers to round amounts at the document level or line level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoundingLevelIdEnum
        {
            
            /// <summary>
            /// Enum Line for "Line"
            /// </summary>
            [EnumMember(Value = "Line")]
            Line,
            
            /// <summary>
            /// Enum Document for "Document"
            /// </summary>
            [EnumMember(Value = "Document")]
            Document
        }

        /// <summary>
        /// Used to apply tax detail dependency at a jurisdiction level.
        /// </summary>
        /// <value>Used to apply tax detail dependency at a jurisdiction level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxDependencyLevelIdEnum
        {
            
            /// <summary>
            /// Enum Document for "Document"
            /// </summary>
            [EnumMember(Value = "Document")]
            Document,
            
            /// <summary>
            /// Enum State for "State"
            /// </summary>
            [EnumMember(Value = "State")]
            State,
            
            /// <summary>
            /// Enum TaxRegion for "TaxRegion"
            /// </summary>
            [EnumMember(Value = "TaxRegion")]
            TaxRegion,
            
            /// <summary>
            /// Enum Address for "Address"
            /// </summary>
            [EnumMember(Value = "Address")]
            Address
        }

        /// <summary>
        /// Indicates whether this company prefers to round amounts at the document level or line level.
        /// </summary>
        /// <value>Indicates whether this company prefers to round amounts at the document level or line level.</value>
        [DataMember(Name="roundingLevelId", EmitDefaultValue=false)]
        public RoundingLevelIdEnum? RoundingLevelId { get; set; }
        /// <summary>
        /// Used to apply tax detail dependency at a jurisdiction level.
        /// </summary>
        /// <value>Used to apply tax detail dependency at a jurisdiction level.</value>
        [DataMember(Name="taxDependencyLevelId", EmitDefaultValue=false)]
        public TaxDependencyLevelIdEnum? TaxDependencyLevelId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompanyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyModel" /> class.
        /// </summary>
        /// <param name="ParentCompanyId">If this company is fully owned by another company, this is the unique identity of the parent company..</param>
        /// <param name="SstPid">If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board..</param>
        /// <param name="Name">The name of this company, as shown to customers. (required).</param>
        /// <param name="IsDefault">This flag is true if this company is the default company for this account.  Only one company may be set as the default..</param>
        /// <param name="DefaultLocationId">If set, this is the unique ID number of the default location for this company..</param>
        /// <param name="IsActive">This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions..</param>
        /// <param name="TaxpayerIdNumber">For United States companies, this field contains your Taxpayer Identification Number.                This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,               or SSN for a Social Security Number if this company is a person..</param>
        /// <param name="HasProfile">Set this flag to true to give this company its own unique tax profile.              If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.              If this flag is false, this company will inherit all profile values from its parent..</param>
        /// <param name="IsReportingEntity">Set this flag to true if this company must file its own tax returns.              For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company..</param>
        /// <param name="SstEffectiveDate">If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program..</param>
        /// <param name="DefaultCountry">The two character ISO-3166 country code of the default country for this company. (required).</param>
        /// <param name="BaseCurrencyCode">This is the three character ISO-4217 currency code of the default currency used by this company..</param>
        /// <param name="RoundingLevelId">Indicates whether this company prefers to round amounts at the document level or line level..</param>
        /// <param name="WarningsEnabled">Set this value to true to receive warnings in API calls via SOAP..</param>
        /// <param name="IsTest">Set this flag to true to indicate that this company is a test company.              If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes..</param>
        /// <param name="TaxDependencyLevelId">Used to apply tax detail dependency at a jurisdiction level..</param>
        /// <param name="InProgress">Set this value to true to indicate that you are still working to finish configuring this company.              While this value is true, no tax reporting will occur and the company will not be usable for transactions..</param>
        /// <param name="BusinessIdentificationNo">Business Identification No.</param>
        /// <param name="Contacts">Optional: A list of contacts defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Contacts\&quot; to your URL..</param>
        /// <param name="Items">Optional: A list of items defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Items\&quot; to your URL..</param>
        /// <param name="Locations">Optional: A list of locations defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Locations\&quot; to your URL..</param>
        /// <param name="Nexus">Optional: A list of nexus defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Nexus\&quot; to your URL..</param>
        /// <param name="Settings">Optional: A list of settings defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Settings\&quot; to your URL..</param>
        /// <param name="TaxCodes">Optional: A list of tax codes defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxCodes\&quot; to your URL..</param>
        /// <param name="TaxRules">Optional: A list of tax rules defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxRules\&quot; to your URL..</param>
        /// <param name="Upcs">Optional: A list of UPCs defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;UPCs\&quot; to your URL..</param>
        public CompanyModel(int? ParentCompanyId = null, string SstPid = null, string Name = null, bool? IsDefault = null, int? DefaultLocationId = null, bool? IsActive = null, string TaxpayerIdNumber = null, bool? HasProfile = null, bool? IsReportingEntity = null, DateTime? SstEffectiveDate = null, string DefaultCountry = null, string BaseCurrencyCode = null, RoundingLevelIdEnum? RoundingLevelId = null, bool? WarningsEnabled = null, bool? IsTest = null, TaxDependencyLevelIdEnum? TaxDependencyLevelId = null, bool? InProgress = null, string BusinessIdentificationNo = null, List<ContactModel> Contacts = null, List<ItemModel> Items = null, List<LocationModel> Locations = null, List<NexusModel> Nexus = null, List<SettingModel> Settings = null, List<TaxCodeModel> TaxCodes = null, List<TaxRuleModel> TaxRules = null, List<UPCModel> Upcs = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CompanyModel and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "DefaultCountry" is required (not null)
            if (DefaultCountry == null)
            {
                throw new InvalidDataException("DefaultCountry is a required property for CompanyModel and cannot be null");
            }
            else
            {
                this.DefaultCountry = DefaultCountry;
            }
            this.ParentCompanyId = ParentCompanyId;
            this.SstPid = SstPid;
            this.IsDefault = IsDefault;
            this.DefaultLocationId = DefaultLocationId;
            this.IsActive = IsActive;
            this.TaxpayerIdNumber = TaxpayerIdNumber;
            this.HasProfile = HasProfile;
            this.IsReportingEntity = IsReportingEntity;
            this.SstEffectiveDate = SstEffectiveDate;
            this.BaseCurrencyCode = BaseCurrencyCode;
            this.RoundingLevelId = RoundingLevelId;
            this.WarningsEnabled = WarningsEnabled;
            this.IsTest = IsTest;
            this.TaxDependencyLevelId = TaxDependencyLevelId;
            this.InProgress = InProgress;
            this.BusinessIdentificationNo = BusinessIdentificationNo;
            this.Contacts = Contacts;
            this.Items = Items;
            this.Locations = Locations;
            this.Nexus = Nexus;
            this.Settings = Settings;
            this.TaxCodes = TaxCodes;
            this.TaxRules = TaxRules;
            this.Upcs = Upcs;
        }
        
        /// <summary>
        /// The unique ID number of this company.
        /// </summary>
        /// <value>The unique ID number of this company.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the account this company belongs to.
        /// </summary>
        /// <value>The unique ID number of the account this company belongs to.</value>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; private set; }
        /// <summary>
        /// If this company is fully owned by another company, this is the unique identity of the parent company.
        /// </summary>
        /// <value>If this company is fully owned by another company, this is the unique identity of the parent company.</value>
        [DataMember(Name="parentCompanyId", EmitDefaultValue=false)]
        public int? ParentCompanyId { get; set; }
        /// <summary>
        /// If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board.
        /// </summary>
        /// <value>If this company files Streamlined Sales Tax, this is the PID of this company as defined by the Streamlined Sales Tax governing board.</value>
        [DataMember(Name="sstPid", EmitDefaultValue=false)]
        public string SstPid { get; set; }
        /// <summary>
        /// A unique code that references this company within your account.
        /// </summary>
        /// <value>A unique code that references this company within your account.</value>
        [DataMember(Name="companyCode", EmitDefaultValue=false)]
        public string CompanyCode { get; private set; }
        /// <summary>
        /// The name of this company, as shown to customers.
        /// </summary>
        /// <value>The name of this company, as shown to customers.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// This flag is true if this company is the default company for this account.  Only one company may be set as the default.
        /// </summary>
        /// <value>This flag is true if this company is the default company for this account.  Only one company may be set as the default.</value>
        [DataMember(Name="isDefault", EmitDefaultValue=false)]
        public bool? IsDefault { get; set; }
        /// <summary>
        /// If set, this is the unique ID number of the default location for this company.
        /// </summary>
        /// <value>If set, this is the unique ID number of the default location for this company.</value>
        [DataMember(Name="defaultLocationId", EmitDefaultValue=false)]
        public int? DefaultLocationId { get; set; }
        /// <summary>
        /// This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions.
        /// </summary>
        /// <value>This flag indicates whether tax activity can occur for this company.  Set this flag to true to permit the company to process transactions.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }
        /// <summary>
        /// For United States companies, this field contains your Taxpayer Identification Number.                This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,               or SSN for a Social Security Number if this company is a person.
        /// </summary>
        /// <value>For United States companies, this field contains your Taxpayer Identification Number.                This is a nine digit number that is usually called an EIN for an Employer Identification Number if this company is a corporation,               or SSN for a Social Security Number if this company is a person.</value>
        [DataMember(Name="taxpayerIdNumber", EmitDefaultValue=false)]
        public string TaxpayerIdNumber { get; set; }
        /// <summary>
        /// Set this flag to true to give this company its own unique tax profile.              If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.              If this flag is false, this company will inherit all profile values from its parent.
        /// </summary>
        /// <value>Set this flag to true to give this company its own unique tax profile.              If this flag is true, this company will have its own Nexus, TaxRule, TaxCode, and Item definitions.              If this flag is false, this company will inherit all profile values from its parent.</value>
        [DataMember(Name="hasProfile", EmitDefaultValue=false)]
        public bool? HasProfile { get; set; }
        /// <summary>
        /// Set this flag to true if this company must file its own tax returns.              For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company.
        /// </summary>
        /// <value>Set this flag to true if this company must file its own tax returns.              For users who have Returns enabled, this flag turns on monthly Worksheet generation for the company.</value>
        [DataMember(Name="isReportingEntity", EmitDefaultValue=false)]
        public bool? IsReportingEntity { get; set; }
        /// <summary>
        /// If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program.
        /// </summary>
        /// <value>If this company participates in Streamlined Sales Tax, this is the date when the company joined the SST program.</value>
        [DataMember(Name="sstEffectiveDate", EmitDefaultValue=false)]
        public DateTime? SstEffectiveDate { get; set; }
        /// <summary>
        /// The two character ISO-3166 country code of the default country for this company.
        /// </summary>
        /// <value>The two character ISO-3166 country code of the default country for this company.</value>
        [DataMember(Name="defaultCountry", EmitDefaultValue=false)]
        public string DefaultCountry { get; set; }
        /// <summary>
        /// This is the three character ISO-4217 currency code of the default currency used by this company.
        /// </summary>
        /// <value>This is the three character ISO-4217 currency code of the default currency used by this company.</value>
        [DataMember(Name="baseCurrencyCode", EmitDefaultValue=false)]
        public string BaseCurrencyCode { get; set; }
        /// <summary>
        /// Set this value to true to receive warnings in API calls via SOAP.
        /// </summary>
        /// <value>Set this value to true to receive warnings in API calls via SOAP.</value>
        [DataMember(Name="warningsEnabled", EmitDefaultValue=false)]
        public bool? WarningsEnabled { get; set; }
        /// <summary>
        /// Set this flag to true to indicate that this company is a test company.              If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes.
        /// </summary>
        /// <value>Set this flag to true to indicate that this company is a test company.              If you have Returns enabled, Test companies will not file tax returns and can be used for validation purposes.</value>
        [DataMember(Name="isTest", EmitDefaultValue=false)]
        public bool? IsTest { get; set; }
        /// <summary>
        /// Set this value to true to indicate that you are still working to finish configuring this company.              While this value is true, no tax reporting will occur and the company will not be usable for transactions.
        /// </summary>
        /// <value>Set this value to true to indicate that you are still working to finish configuring this company.              While this value is true, no tax reporting will occur and the company will not be usable for transactions.</value>
        [DataMember(Name="inProgress", EmitDefaultValue=false)]
        public bool? InProgress { get; set; }
        /// <summary>
        /// Business Identification No
        /// </summary>
        /// <value>Business Identification No</value>
        [DataMember(Name="businessIdentificationNo", EmitDefaultValue=false)]
        public string BusinessIdentificationNo { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Optional: A list of contacts defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Contacts\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of contacts defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Contacts\&quot; to your URL.</value>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<ContactModel> Contacts { get; set; }
        /// <summary>
        /// Optional: A list of items defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Items\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of items defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Items\&quot; to your URL.</value>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<ItemModel> Items { get; set; }
        /// <summary>
        /// Optional: A list of locations defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Locations\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of locations defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Locations\&quot; to your URL.</value>
        [DataMember(Name="locations", EmitDefaultValue=false)]
        public List<LocationModel> Locations { get; set; }
        /// <summary>
        /// Optional: A list of nexus defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Nexus\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of nexus defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Nexus\&quot; to your URL.</value>
        [DataMember(Name="nexus", EmitDefaultValue=false)]
        public List<NexusModel> Nexus { get; set; }
        /// <summary>
        /// Optional: A list of settings defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Settings\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of settings defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;Settings\&quot; to your URL.</value>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public List<SettingModel> Settings { get; set; }
        /// <summary>
        /// Optional: A list of tax codes defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxCodes\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of tax codes defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxCodes\&quot; to your URL.</value>
        [DataMember(Name="taxCodes", EmitDefaultValue=false)]
        public List<TaxCodeModel> TaxCodes { get; set; }
        /// <summary>
        /// Optional: A list of tax rules defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxRules\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of tax rules defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;TaxRules\&quot; to your URL.</value>
        [DataMember(Name="taxRules", EmitDefaultValue=false)]
        public List<TaxRuleModel> TaxRules { get; set; }
        /// <summary>
        /// Optional: A list of UPCs defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;UPCs\&quot; to your URL.
        /// </summary>
        /// <value>Optional: A list of UPCs defined for this company.  To fetch this list, add the query string \&quot;?$include&#x3D;UPCs\&quot; to your URL.</value>
        [DataMember(Name="upcs", EmitDefaultValue=false)]
        public List<UPCModel> Upcs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompanyModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ParentCompanyId: ").Append(ParentCompanyId).Append("\n");
            sb.Append("  SstPid: ").Append(SstPid).Append("\n");
            sb.Append("  CompanyCode: ").Append(CompanyCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  DefaultLocationId: ").Append(DefaultLocationId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  TaxpayerIdNumber: ").Append(TaxpayerIdNumber).Append("\n");
            sb.Append("  HasProfile: ").Append(HasProfile).Append("\n");
            sb.Append("  IsReportingEntity: ").Append(IsReportingEntity).Append("\n");
            sb.Append("  SstEffectiveDate: ").Append(SstEffectiveDate).Append("\n");
            sb.Append("  DefaultCountry: ").Append(DefaultCountry).Append("\n");
            sb.Append("  BaseCurrencyCode: ").Append(BaseCurrencyCode).Append("\n");
            sb.Append("  RoundingLevelId: ").Append(RoundingLevelId).Append("\n");
            sb.Append("  WarningsEnabled: ").Append(WarningsEnabled).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  TaxDependencyLevelId: ").Append(TaxDependencyLevelId).Append("\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  BusinessIdentificationNo: ").Append(BusinessIdentificationNo).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  Nexus: ").Append(Nexus).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  TaxCodes: ").Append(TaxCodes).Append("\n");
            sb.Append("  TaxRules: ").Append(TaxRules).Append("\n");
            sb.Append("  Upcs: ").Append(Upcs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CompanyModel);
        }

        /// <summary>
        /// Returns true if CompanyModel instances are equal
        /// </summary>
        /// <param name="other">Instance of CompanyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.ParentCompanyId == other.ParentCompanyId ||
                    this.ParentCompanyId != null &&
                    this.ParentCompanyId.Equals(other.ParentCompanyId)
                ) && 
                (
                    this.SstPid == other.SstPid ||
                    this.SstPid != null &&
                    this.SstPid.Equals(other.SstPid)
                ) && 
                (
                    this.CompanyCode == other.CompanyCode ||
                    this.CompanyCode != null &&
                    this.CompanyCode.Equals(other.CompanyCode)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.IsDefault == other.IsDefault ||
                    this.IsDefault != null &&
                    this.IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    this.DefaultLocationId == other.DefaultLocationId ||
                    this.DefaultLocationId != null &&
                    this.DefaultLocationId.Equals(other.DefaultLocationId)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.TaxpayerIdNumber == other.TaxpayerIdNumber ||
                    this.TaxpayerIdNumber != null &&
                    this.TaxpayerIdNumber.Equals(other.TaxpayerIdNumber)
                ) && 
                (
                    this.HasProfile == other.HasProfile ||
                    this.HasProfile != null &&
                    this.HasProfile.Equals(other.HasProfile)
                ) && 
                (
                    this.IsReportingEntity == other.IsReportingEntity ||
                    this.IsReportingEntity != null &&
                    this.IsReportingEntity.Equals(other.IsReportingEntity)
                ) && 
                (
                    this.SstEffectiveDate == other.SstEffectiveDate ||
                    this.SstEffectiveDate != null &&
                    this.SstEffectiveDate.Equals(other.SstEffectiveDate)
                ) && 
                (
                    this.DefaultCountry == other.DefaultCountry ||
                    this.DefaultCountry != null &&
                    this.DefaultCountry.Equals(other.DefaultCountry)
                ) && 
                (
                    this.BaseCurrencyCode == other.BaseCurrencyCode ||
                    this.BaseCurrencyCode != null &&
                    this.BaseCurrencyCode.Equals(other.BaseCurrencyCode)
                ) && 
                (
                    this.RoundingLevelId == other.RoundingLevelId ||
                    this.RoundingLevelId != null &&
                    this.RoundingLevelId.Equals(other.RoundingLevelId)
                ) && 
                (
                    this.WarningsEnabled == other.WarningsEnabled ||
                    this.WarningsEnabled != null &&
                    this.WarningsEnabled.Equals(other.WarningsEnabled)
                ) && 
                (
                    this.IsTest == other.IsTest ||
                    this.IsTest != null &&
                    this.IsTest.Equals(other.IsTest)
                ) && 
                (
                    this.TaxDependencyLevelId == other.TaxDependencyLevelId ||
                    this.TaxDependencyLevelId != null &&
                    this.TaxDependencyLevelId.Equals(other.TaxDependencyLevelId)
                ) && 
                (
                    this.InProgress == other.InProgress ||
                    this.InProgress != null &&
                    this.InProgress.Equals(other.InProgress)
                ) && 
                (
                    this.BusinessIdentificationNo == other.BusinessIdentificationNo ||
                    this.BusinessIdentificationNo != null &&
                    this.BusinessIdentificationNo.Equals(other.BusinessIdentificationNo)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                ) && 
                (
                    this.Contacts == other.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    this.Items == other.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(other.Items)
                ) && 
                (
                    this.Locations == other.Locations ||
                    this.Locations != null &&
                    this.Locations.SequenceEqual(other.Locations)
                ) && 
                (
                    this.Nexus == other.Nexus ||
                    this.Nexus != null &&
                    this.Nexus.SequenceEqual(other.Nexus)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.SequenceEqual(other.Settings)
                ) && 
                (
                    this.TaxCodes == other.TaxCodes ||
                    this.TaxCodes != null &&
                    this.TaxCodes.SequenceEqual(other.TaxCodes)
                ) && 
                (
                    this.TaxRules == other.TaxRules ||
                    this.TaxRules != null &&
                    this.TaxRules.SequenceEqual(other.TaxRules)
                ) && 
                (
                    this.Upcs == other.Upcs ||
                    this.Upcs != null &&
                    this.Upcs.SequenceEqual(other.Upcs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.ParentCompanyId != null)
                    hash = hash * 59 + this.ParentCompanyId.GetHashCode();
                if (this.SstPid != null)
                    hash = hash * 59 + this.SstPid.GetHashCode();
                if (this.CompanyCode != null)
                    hash = hash * 59 + this.CompanyCode.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.IsDefault != null)
                    hash = hash * 59 + this.IsDefault.GetHashCode();
                if (this.DefaultLocationId != null)
                    hash = hash * 59 + this.DefaultLocationId.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.TaxpayerIdNumber != null)
                    hash = hash * 59 + this.TaxpayerIdNumber.GetHashCode();
                if (this.HasProfile != null)
                    hash = hash * 59 + this.HasProfile.GetHashCode();
                if (this.IsReportingEntity != null)
                    hash = hash * 59 + this.IsReportingEntity.GetHashCode();
                if (this.SstEffectiveDate != null)
                    hash = hash * 59 + this.SstEffectiveDate.GetHashCode();
                if (this.DefaultCountry != null)
                    hash = hash * 59 + this.DefaultCountry.GetHashCode();
                if (this.BaseCurrencyCode != null)
                    hash = hash * 59 + this.BaseCurrencyCode.GetHashCode();
                if (this.RoundingLevelId != null)
                    hash = hash * 59 + this.RoundingLevelId.GetHashCode();
                if (this.WarningsEnabled != null)
                    hash = hash * 59 + this.WarningsEnabled.GetHashCode();
                if (this.IsTest != null)
                    hash = hash * 59 + this.IsTest.GetHashCode();
                if (this.TaxDependencyLevelId != null)
                    hash = hash * 59 + this.TaxDependencyLevelId.GetHashCode();
                if (this.InProgress != null)
                    hash = hash * 59 + this.InProgress.GetHashCode();
                if (this.BusinessIdentificationNo != null)
                    hash = hash * 59 + this.BusinessIdentificationNo.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                if (this.Contacts != null)
                    hash = hash * 59 + this.Contacts.GetHashCode();
                if (this.Items != null)
                    hash = hash * 59 + this.Items.GetHashCode();
                if (this.Locations != null)
                    hash = hash * 59 + this.Locations.GetHashCode();
                if (this.Nexus != null)
                    hash = hash * 59 + this.Nexus.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.TaxCodes != null)
                    hash = hash * 59 + this.TaxCodes.GetHashCode();
                if (this.TaxRules != null)
                    hash = hash * 59 + this.TaxRules.GetHashCode();
                if (this.Upcs != null)
                    hash = hash * 59 + this.Upcs.GetHashCode();
                return hash;
            }
        }
    }

}
