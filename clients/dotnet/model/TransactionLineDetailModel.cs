/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// An individual tax detail element.  Represents the amount of tax calculated for a particular jurisdiction, for a particular line in an invoice.
    /// </summary>
    [DataContract]
    public partial class TransactionLineDetailModel :  IEquatable<TransactionLineDetailModel>
    {
        /// <summary>
        /// The type of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The type of the jurisdiction to which this tax detail applies.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JurisTypeEnum
        {
            
            /// <summary>
            /// Enum STA for "STA"
            /// </summary>
            [EnumMember(Value = "STA")]
            STA,
            
            /// <summary>
            /// Enum CTY for "CTY"
            /// </summary>
            [EnumMember(Value = "CTY")]
            CTY,
            
            /// <summary>
            /// Enum CIT for "CIT"
            /// </summary>
            [EnumMember(Value = "CIT")]
            CIT,
            
            /// <summary>
            /// Enum STJ for "STJ"
            /// </summary>
            [EnumMember(Value = "STJ")]
            STJ,
            
            /// <summary>
            /// Enum CNT for "CNT"
            /// </summary>
            [EnumMember(Value = "CNT")]
            CNT
        }

        /// <summary>
        /// The type of nontaxability that was applied to this tax detail.
        /// </summary>
        /// <value>The type of nontaxability that was applied to this tax detail.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonTaxableTypeEnum
        {
            
            /// <summary>
            /// Enum RateRule for "RateRule"
            /// </summary>
            [EnumMember(Value = "RateRule")]
            RateRule,
            
            /// <summary>
            /// Enum RateOverrideRule for "RateOverrideRule"
            /// </summary>
            [EnumMember(Value = "RateOverrideRule")]
            RateOverrideRule,
            
            /// <summary>
            /// Enum BaseRule for "BaseRule"
            /// </summary>
            [EnumMember(Value = "BaseRule")]
            BaseRule,
            
            /// <summary>
            /// Enum ExemptEntityRule for "ExemptEntityRule"
            /// </summary>
            [EnumMember(Value = "ExemptEntityRule")]
            ExemptEntityRule,
            
            /// <summary>
            /// Enum ProductTaxabilityRule for "ProductTaxabilityRule"
            /// </summary>
            [EnumMember(Value = "ProductTaxabilityRule")]
            ProductTaxabilityRule,
            
            /// <summary>
            /// Enum NexusRule for "NexusRule"
            /// </summary>
            [EnumMember(Value = "NexusRule")]
            NexusRule
        }

        /// <summary>
        /// Indicates whether this tax detail applies to the origin or destination of the transaction.
        /// </summary>
        /// <value>Indicates whether this tax detail applies to the origin or destination of the transaction.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourcingEnum
        {
            
            /// <summary>
            /// Enum Destination for "Destination"
            /// </summary>
            [EnumMember(Value = "Destination")]
            Destination,
            
            /// <summary>
            /// Enum Origin for "Origin"
            /// </summary>
            [EnumMember(Value = "Origin")]
            Origin
        }

        /// <summary>
        /// The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.
        /// </summary>
        /// <value>The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxTypeEnum
        {
            
            /// <summary>
            /// Enum ConsumerUse for "ConsumerUse"
            /// </summary>
            [EnumMember(Value = "ConsumerUse")]
            ConsumerUse,
            
            /// <summary>
            /// Enum Excise for "Excise"
            /// </summary>
            [EnumMember(Value = "Excise")]
            Excise,
            
            /// <summary>
            /// Enum Fee for "Fee"
            /// </summary>
            [EnumMember(Value = "Fee")]
            Fee,
            
            /// <summary>
            /// Enum Input for "Input"
            /// </summary>
            [EnumMember(Value = "Input")]
            Input,
            
            /// <summary>
            /// Enum Nonrecoverable for "Nonrecoverable"
            /// </summary>
            [EnumMember(Value = "Nonrecoverable")]
            Nonrecoverable,
            
            /// <summary>
            /// Enum Output for "Output"
            /// </summary>
            [EnumMember(Value = "Output")]
            Output,
            
            /// <summary>
            /// Enum Rental for "Rental"
            /// </summary>
            [EnumMember(Value = "Rental")]
            Rental,
            
            /// <summary>
            /// Enum Sales for "Sales"
            /// </summary>
            [EnumMember(Value = "Sales")]
            Sales,
            
            /// <summary>
            /// Enum Use for "Use"
            /// </summary>
            [EnumMember(Value = "Use")]
            Use
        }

        /// <summary>
        /// The rate type for this tax detail.
        /// </summary>
        /// <value>The rate type for this tax detail.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RateTypeEnum
        {
            
            /// <summary>
            /// Enum ReducedA for "ReducedA"
            /// </summary>
            [EnumMember(Value = "ReducedA")]
            ReducedA,
            
            /// <summary>
            /// Enum ReducedB for "ReducedB"
            /// </summary>
            [EnumMember(Value = "ReducedB")]
            ReducedB,
            
            /// <summary>
            /// Enum Food for "Food"
            /// </summary>
            [EnumMember(Value = "Food")]
            Food,
            
            /// <summary>
            /// Enum General for "General"
            /// </summary>
            [EnumMember(Value = "General")]
            General,
            
            /// <summary>
            /// Enum IncreasedStandard for "IncreasedStandard"
            /// </summary>
            [EnumMember(Value = "IncreasedStandard")]
            IncreasedStandard,
            
            /// <summary>
            /// Enum LinenRental for "LinenRental"
            /// </summary>
            [EnumMember(Value = "LinenRental")]
            LinenRental,
            
            /// <summary>
            /// Enum Medical for "Medical"
            /// </summary>
            [EnumMember(Value = "Medical")]
            Medical,
            
            /// <summary>
            /// Enum Parking for "Parking"
            /// </summary>
            [EnumMember(Value = "Parking")]
            Parking,
            
            /// <summary>
            /// Enum SuperReduced for "SuperReduced"
            /// </summary>
            [EnumMember(Value = "SuperReduced")]
            SuperReduced,
            
            /// <summary>
            /// Enum ReducedR for "ReducedR"
            /// </summary>
            [EnumMember(Value = "ReducedR")]
            ReducedR,
            
            /// <summary>
            /// Enum Standard for "Standard"
            /// </summary>
            [EnumMember(Value = "Standard")]
            Standard,
            
            /// <summary>
            /// Enum Zero for "Zero"
            /// </summary>
            [EnumMember(Value = "Zero")]
            Zero
        }

        /// <summary>
        /// The type of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The type of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="jurisType", EmitDefaultValue=false)]
        public JurisTypeEnum? JurisType { get; set; }
        /// <summary>
        /// The type of nontaxability that was applied to this tax detail.
        /// </summary>
        /// <value>The type of nontaxability that was applied to this tax detail.</value>
        [DataMember(Name="nonTaxableType", EmitDefaultValue=false)]
        public NonTaxableTypeEnum? NonTaxableType { get; set; }
        /// <summary>
        /// Indicates whether this tax detail applies to the origin or destination of the transaction.
        /// </summary>
        /// <value>Indicates whether this tax detail applies to the origin or destination of the transaction.</value>
        [DataMember(Name="sourcing", EmitDefaultValue=false)]
        public SourcingEnum? Sourcing { get; set; }
        /// <summary>
        /// The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.
        /// </summary>
        /// <value>The type of tax that was calculated.  Depends on the company's nexus settings as well as the jurisdiction's tax laws.</value>
        [DataMember(Name="taxType", EmitDefaultValue=false)]
        public TaxTypeEnum? TaxType { get; set; }
        /// <summary>
        /// The rate type for this tax detail.
        /// </summary>
        /// <value>The rate type for this tax detail.</value>
        [DataMember(Name="rateType", EmitDefaultValue=false)]
        public RateTypeEnum? RateType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionLineDetailModel" /> class.
        /// </summary>
        /// <param name="AddressId">The unique ID number of the address used for this tax detail..</param>
        /// <param name="Country">The two character ISO 3166 country code of the country where this tax detail is assigned..</param>
        /// <param name="Region">The two-or-three character ISO region code for the region where this tax detail is assigned..</param>
        /// <param name="CountyFIPS">For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned..</param>
        /// <param name="StateFIPS">For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned..</param>
        /// <param name="ExemptAmount">The amount of this line that was considered exempt in this tax detail..</param>
        /// <param name="ExemptReasonId">The unique ID number of the exemption reason for this tax detail..</param>
        /// <param name="InState">True if this detail element represented an in-state transaction..</param>
        /// <param name="JurisCode">The code of the jurisdiction to which this tax detail applies..</param>
        /// <param name="JurisName">The name of the jurisdiction to which this tax detail applies..</param>
        /// <param name="JurisdictionId">The unique ID number of the jurisdiction to which this tax detail applies..</param>
        /// <param name="SignatureCode">The Avalara-specified signature code of the jurisdiction to which this tax detail applies..</param>
        /// <param name="StateAssignedNo">The state assigned number of the jurisdiction to which this tax detail applies..</param>
        /// <param name="JurisType">The type of the jurisdiction to which this tax detail applies..</param>
        /// <param name="NonTaxableAmount">The amount of this line item that was considered nontaxable in this tax detail..</param>
        /// <param name="NonTaxableRuleId">The rule according to which portion of this detail was considered nontaxable..</param>
        /// <param name="NonTaxableType">The type of nontaxability that was applied to this tax detail..</param>
        /// <param name="Rate">The rate at which this tax detail was calculated..</param>
        /// <param name="RateRuleId">The unique ID number of the rule according to which this tax detail was calculated..</param>
        /// <param name="RateSourceId">The unique ID number of the source of the rate according to which this tax detail was calculated..</param>
        /// <param name="SerCode">For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied..</param>
        /// <param name="Sourcing">Indicates whether this tax detail applies to the origin or destination of the transaction..</param>
        /// <param name="Tax">The amount of tax for this tax detail..</param>
        /// <param name="TaxableAmount">The taxable amount of this tax detail..</param>
        /// <param name="TaxType">The type of tax that was calculated.  Depends on the company&#39;s nexus settings as well as the jurisdiction&#39;s tax laws..</param>
        /// <param name="TaxName">The name of the tax against which this tax amount was calculated..</param>
        /// <param name="TaxAuthorityTypeId">The type of the tax authority to which this tax will be remitted..</param>
        /// <param name="TaxRegionId">The unique ID number of the tax region..</param>
        /// <param name="TaxCalculated">The amount of tax that was calculated.  This amount may be different if a tax override was used.              If the customer specified a tax override, this calculated tax value represents the amount of tax that would              have been charged if Avalara had calculated the tax for the rule..</param>
        /// <param name="TaxOverride">The amount of tax override that was specified for this tax line..</param>
        /// <param name="RateType">The rate type for this tax detail..</param>
        /// <param name="TaxableUnits">Number of units in this line item that were calculated to be taxable according to this rate detail..</param>
        /// <param name="NonTaxableUnits">Number of units in this line item that were calculated to be nontaxable according to this rate detail..</param>
        /// <param name="ExemptUnits">Number of units in this line item that were calculated to be exempt according to this rate detail..</param>
        /// <param name="UnitOfBasis">When calculating units, what basis of measurement did we use for calculating the units?.</param>
        public TransactionLineDetailModel(long? AddressId = null, string Country = null, string Region = null, string CountyFIPS = null, string StateFIPS = null, double? ExemptAmount = null, int? ExemptReasonId = null, bool? InState = null, string JurisCode = null, string JurisName = null, int? JurisdictionId = null, string SignatureCode = null, string StateAssignedNo = null, JurisTypeEnum? JurisType = null, double? NonTaxableAmount = null, int? NonTaxableRuleId = null, NonTaxableTypeEnum? NonTaxableType = null, double? Rate = null, int? RateRuleId = null, int? RateSourceId = null, string SerCode = null, SourcingEnum? Sourcing = null, double? Tax = null, double? TaxableAmount = null, TaxTypeEnum? TaxType = null, string TaxName = null, int? TaxAuthorityTypeId = null, int? TaxRegionId = null, double? TaxCalculated = null, double? TaxOverride = null, RateTypeEnum? RateType = null, double? TaxableUnits = null, double? NonTaxableUnits = null, double? ExemptUnits = null, string UnitOfBasis = null)
        {
            this.AddressId = AddressId;
            this.Country = Country;
            this.Region = Region;
            this.CountyFIPS = CountyFIPS;
            this.StateFIPS = StateFIPS;
            this.ExemptAmount = ExemptAmount;
            this.ExemptReasonId = ExemptReasonId;
            this.InState = InState;
            this.JurisCode = JurisCode;
            this.JurisName = JurisName;
            this.JurisdictionId = JurisdictionId;
            this.SignatureCode = SignatureCode;
            this.StateAssignedNo = StateAssignedNo;
            this.JurisType = JurisType;
            this.NonTaxableAmount = NonTaxableAmount;
            this.NonTaxableRuleId = NonTaxableRuleId;
            this.NonTaxableType = NonTaxableType;
            this.Rate = Rate;
            this.RateRuleId = RateRuleId;
            this.RateSourceId = RateSourceId;
            this.SerCode = SerCode;
            this.Sourcing = Sourcing;
            this.Tax = Tax;
            this.TaxableAmount = TaxableAmount;
            this.TaxType = TaxType;
            this.TaxName = TaxName;
            this.TaxAuthorityTypeId = TaxAuthorityTypeId;
            this.TaxRegionId = TaxRegionId;
            this.TaxCalculated = TaxCalculated;
            this.TaxOverride = TaxOverride;
            this.RateType = RateType;
            this.TaxableUnits = TaxableUnits;
            this.NonTaxableUnits = NonTaxableUnits;
            this.ExemptUnits = ExemptUnits;
            this.UnitOfBasis = UnitOfBasis;
        }
        
        /// <summary>
        /// The unique ID number of this tax detail.
        /// </summary>
        /// <value>The unique ID number of this tax detail.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the line within this transaction.
        /// </summary>
        /// <value>The unique ID number of the line within this transaction.</value>
        [DataMember(Name="transactionLineId", EmitDefaultValue=false)]
        public long? TransactionLineId { get; private set; }
        /// <summary>
        /// The unique ID number of this transaction.
        /// </summary>
        /// <value>The unique ID number of this transaction.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public long? TransactionId { get; private set; }
        /// <summary>
        /// The unique ID number of the address used for this tax detail.
        /// </summary>
        /// <value>The unique ID number of the address used for this tax detail.</value>
        [DataMember(Name="addressId", EmitDefaultValue=false)]
        public long? AddressId { get; set; }
        /// <summary>
        /// The two character ISO 3166 country code of the country where this tax detail is assigned.
        /// </summary>
        /// <value>The two character ISO 3166 country code of the country where this tax detail is assigned.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The two-or-three character ISO region code for the region where this tax detail is assigned.
        /// </summary>
        /// <value>The two-or-three character ISO region code for the region where this tax detail is assigned.</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }
        /// <summary>
        /// For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned.
        /// </summary>
        /// <value>For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the county where this tax detail is assigned.</value>
        [DataMember(Name="countyFIPS", EmitDefaultValue=false)]
        public string CountyFIPS { get; set; }
        /// <summary>
        /// For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned.
        /// </summary>
        /// <value>For U.S. transactions, the Federal Information Processing Standard (FIPS) code for the state where this tax detail is assigned.</value>
        [DataMember(Name="stateFIPS", EmitDefaultValue=false)]
        public string StateFIPS { get; set; }
        /// <summary>
        /// The amount of this line that was considered exempt in this tax detail.
        /// </summary>
        /// <value>The amount of this line that was considered exempt in this tax detail.</value>
        [DataMember(Name="exemptAmount", EmitDefaultValue=false)]
        public double? ExemptAmount { get; set; }
        /// <summary>
        /// The unique ID number of the exemption reason for this tax detail.
        /// </summary>
        /// <value>The unique ID number of the exemption reason for this tax detail.</value>
        [DataMember(Name="exemptReasonId", EmitDefaultValue=false)]
        public int? ExemptReasonId { get; set; }
        /// <summary>
        /// True if this detail element represented an in-state transaction.
        /// </summary>
        /// <value>True if this detail element represented an in-state transaction.</value>
        [DataMember(Name="inState", EmitDefaultValue=false)]
        public bool? InState { get; set; }
        /// <summary>
        /// The code of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The code of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="jurisCode", EmitDefaultValue=false)]
        public string JurisCode { get; set; }
        /// <summary>
        /// The name of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The name of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="jurisName", EmitDefaultValue=false)]
        public string JurisName { get; set; }
        /// <summary>
        /// The unique ID number of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The unique ID number of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="jurisdictionId", EmitDefaultValue=false)]
        public int? JurisdictionId { get; set; }
        /// <summary>
        /// The Avalara-specified signature code of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The Avalara-specified signature code of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="signatureCode", EmitDefaultValue=false)]
        public string SignatureCode { get; set; }
        /// <summary>
        /// The state assigned number of the jurisdiction to which this tax detail applies.
        /// </summary>
        /// <value>The state assigned number of the jurisdiction to which this tax detail applies.</value>
        [DataMember(Name="stateAssignedNo", EmitDefaultValue=false)]
        public string StateAssignedNo { get; set; }
        /// <summary>
        /// The amount of this line item that was considered nontaxable in this tax detail.
        /// </summary>
        /// <value>The amount of this line item that was considered nontaxable in this tax detail.</value>
        [DataMember(Name="nonTaxableAmount", EmitDefaultValue=false)]
        public double? NonTaxableAmount { get; set; }
        /// <summary>
        /// The rule according to which portion of this detail was considered nontaxable.
        /// </summary>
        /// <value>The rule according to which portion of this detail was considered nontaxable.</value>
        [DataMember(Name="nonTaxableRuleId", EmitDefaultValue=false)]
        public int? NonTaxableRuleId { get; set; }
        /// <summary>
        /// The rate at which this tax detail was calculated.
        /// </summary>
        /// <value>The rate at which this tax detail was calculated.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }
        /// <summary>
        /// The unique ID number of the rule according to which this tax detail was calculated.
        /// </summary>
        /// <value>The unique ID number of the rule according to which this tax detail was calculated.</value>
        [DataMember(Name="rateRuleId", EmitDefaultValue=false)]
        public int? RateRuleId { get; set; }
        /// <summary>
        /// The unique ID number of the source of the rate according to which this tax detail was calculated.
        /// </summary>
        /// <value>The unique ID number of the source of the rate according to which this tax detail was calculated.</value>
        [DataMember(Name="rateSourceId", EmitDefaultValue=false)]
        public int? RateSourceId { get; set; }
        /// <summary>
        /// For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied.
        /// </summary>
        /// <value>For Streamlined Sales Tax customers, the SST Electronic Return code under which this tax detail should be applied.</value>
        [DataMember(Name="serCode", EmitDefaultValue=false)]
        public string SerCode { get; set; }
        /// <summary>
        /// The amount of tax for this tax detail.
        /// </summary>
        /// <value>The amount of tax for this tax detail.</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public double? Tax { get; set; }
        /// <summary>
        /// The taxable amount of this tax detail.
        /// </summary>
        /// <value>The taxable amount of this tax detail.</value>
        [DataMember(Name="taxableAmount", EmitDefaultValue=false)]
        public double? TaxableAmount { get; set; }
        /// <summary>
        /// The name of the tax against which this tax amount was calculated.
        /// </summary>
        /// <value>The name of the tax against which this tax amount was calculated.</value>
        [DataMember(Name="taxName", EmitDefaultValue=false)]
        public string TaxName { get; set; }
        /// <summary>
        /// The type of the tax authority to which this tax will be remitted.
        /// </summary>
        /// <value>The type of the tax authority to which this tax will be remitted.</value>
        [DataMember(Name="taxAuthorityTypeId", EmitDefaultValue=false)]
        public int? TaxAuthorityTypeId { get; set; }
        /// <summary>
        /// The unique ID number of the tax region.
        /// </summary>
        /// <value>The unique ID number of the tax region.</value>
        [DataMember(Name="taxRegionId", EmitDefaultValue=false)]
        public int? TaxRegionId { get; set; }
        /// <summary>
        /// The amount of tax that was calculated.  This amount may be different if a tax override was used.              If the customer specified a tax override, this calculated tax value represents the amount of tax that would              have been charged if Avalara had calculated the tax for the rule.
        /// </summary>
        /// <value>The amount of tax that was calculated.  This amount may be different if a tax override was used.              If the customer specified a tax override, this calculated tax value represents the amount of tax that would              have been charged if Avalara had calculated the tax for the rule.</value>
        [DataMember(Name="taxCalculated", EmitDefaultValue=false)]
        public double? TaxCalculated { get; set; }
        /// <summary>
        /// The amount of tax override that was specified for this tax line.
        /// </summary>
        /// <value>The amount of tax override that was specified for this tax line.</value>
        [DataMember(Name="taxOverride", EmitDefaultValue=false)]
        public double? TaxOverride { get; set; }
        /// <summary>
        /// Number of units in this line item that were calculated to be taxable according to this rate detail.
        /// </summary>
        /// <value>Number of units in this line item that were calculated to be taxable according to this rate detail.</value>
        [DataMember(Name="taxableUnits", EmitDefaultValue=false)]
        public double? TaxableUnits { get; set; }
        /// <summary>
        /// Number of units in this line item that were calculated to be nontaxable according to this rate detail.
        /// </summary>
        /// <value>Number of units in this line item that were calculated to be nontaxable according to this rate detail.</value>
        [DataMember(Name="nonTaxableUnits", EmitDefaultValue=false)]
        public double? NonTaxableUnits { get; set; }
        /// <summary>
        /// Number of units in this line item that were calculated to be exempt according to this rate detail.
        /// </summary>
        /// <value>Number of units in this line item that were calculated to be exempt according to this rate detail.</value>
        [DataMember(Name="exemptUnits", EmitDefaultValue=false)]
        public double? ExemptUnits { get; set; }
        /// <summary>
        /// When calculating units, what basis of measurement did we use for calculating the units?
        /// </summary>
        /// <value>When calculating units, what basis of measurement did we use for calculating the units?</value>
        [DataMember(Name="unitOfBasis", EmitDefaultValue=false)]
        public string UnitOfBasis { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionLineDetailModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TransactionLineId: ").Append(TransactionLineId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  AddressId: ").Append(AddressId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  CountyFIPS: ").Append(CountyFIPS).Append("\n");
            sb.Append("  StateFIPS: ").Append(StateFIPS).Append("\n");
            sb.Append("  ExemptAmount: ").Append(ExemptAmount).Append("\n");
            sb.Append("  ExemptReasonId: ").Append(ExemptReasonId).Append("\n");
            sb.Append("  InState: ").Append(InState).Append("\n");
            sb.Append("  JurisCode: ").Append(JurisCode).Append("\n");
            sb.Append("  JurisName: ").Append(JurisName).Append("\n");
            sb.Append("  JurisdictionId: ").Append(JurisdictionId).Append("\n");
            sb.Append("  SignatureCode: ").Append(SignatureCode).Append("\n");
            sb.Append("  StateAssignedNo: ").Append(StateAssignedNo).Append("\n");
            sb.Append("  JurisType: ").Append(JurisType).Append("\n");
            sb.Append("  NonTaxableAmount: ").Append(NonTaxableAmount).Append("\n");
            sb.Append("  NonTaxableRuleId: ").Append(NonTaxableRuleId).Append("\n");
            sb.Append("  NonTaxableType: ").Append(NonTaxableType).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RateRuleId: ").Append(RateRuleId).Append("\n");
            sb.Append("  RateSourceId: ").Append(RateSourceId).Append("\n");
            sb.Append("  SerCode: ").Append(SerCode).Append("\n");
            sb.Append("  Sourcing: ").Append(Sourcing).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  TaxableAmount: ").Append(TaxableAmount).Append("\n");
            sb.Append("  TaxType: ").Append(TaxType).Append("\n");
            sb.Append("  TaxName: ").Append(TaxName).Append("\n");
            sb.Append("  TaxAuthorityTypeId: ").Append(TaxAuthorityTypeId).Append("\n");
            sb.Append("  TaxRegionId: ").Append(TaxRegionId).Append("\n");
            sb.Append("  TaxCalculated: ").Append(TaxCalculated).Append("\n");
            sb.Append("  TaxOverride: ").Append(TaxOverride).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  TaxableUnits: ").Append(TaxableUnits).Append("\n");
            sb.Append("  NonTaxableUnits: ").Append(NonTaxableUnits).Append("\n");
            sb.Append("  ExemptUnits: ").Append(ExemptUnits).Append("\n");
            sb.Append("  UnitOfBasis: ").Append(UnitOfBasis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TransactionLineDetailModel);
        }

        /// <summary>
        /// Returns true if TransactionLineDetailModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionLineDetailModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionLineDetailModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.TransactionLineId == other.TransactionLineId ||
                    this.TransactionLineId != null &&
                    this.TransactionLineId.Equals(other.TransactionLineId)
                ) && 
                (
                    this.TransactionId == other.TransactionId ||
                    this.TransactionId != null &&
                    this.TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    this.AddressId == other.AddressId ||
                    this.AddressId != null &&
                    this.AddressId.Equals(other.AddressId)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.Region == other.Region ||
                    this.Region != null &&
                    this.Region.Equals(other.Region)
                ) && 
                (
                    this.CountyFIPS == other.CountyFIPS ||
                    this.CountyFIPS != null &&
                    this.CountyFIPS.Equals(other.CountyFIPS)
                ) && 
                (
                    this.StateFIPS == other.StateFIPS ||
                    this.StateFIPS != null &&
                    this.StateFIPS.Equals(other.StateFIPS)
                ) && 
                (
                    this.ExemptAmount == other.ExemptAmount ||
                    this.ExemptAmount != null &&
                    this.ExemptAmount.Equals(other.ExemptAmount)
                ) && 
                (
                    this.ExemptReasonId == other.ExemptReasonId ||
                    this.ExemptReasonId != null &&
                    this.ExemptReasonId.Equals(other.ExemptReasonId)
                ) && 
                (
                    this.InState == other.InState ||
                    this.InState != null &&
                    this.InState.Equals(other.InState)
                ) && 
                (
                    this.JurisCode == other.JurisCode ||
                    this.JurisCode != null &&
                    this.JurisCode.Equals(other.JurisCode)
                ) && 
                (
                    this.JurisName == other.JurisName ||
                    this.JurisName != null &&
                    this.JurisName.Equals(other.JurisName)
                ) && 
                (
                    this.JurisdictionId == other.JurisdictionId ||
                    this.JurisdictionId != null &&
                    this.JurisdictionId.Equals(other.JurisdictionId)
                ) && 
                (
                    this.SignatureCode == other.SignatureCode ||
                    this.SignatureCode != null &&
                    this.SignatureCode.Equals(other.SignatureCode)
                ) && 
                (
                    this.StateAssignedNo == other.StateAssignedNo ||
                    this.StateAssignedNo != null &&
                    this.StateAssignedNo.Equals(other.StateAssignedNo)
                ) && 
                (
                    this.JurisType == other.JurisType ||
                    this.JurisType != null &&
                    this.JurisType.Equals(other.JurisType)
                ) && 
                (
                    this.NonTaxableAmount == other.NonTaxableAmount ||
                    this.NonTaxableAmount != null &&
                    this.NonTaxableAmount.Equals(other.NonTaxableAmount)
                ) && 
                (
                    this.NonTaxableRuleId == other.NonTaxableRuleId ||
                    this.NonTaxableRuleId != null &&
                    this.NonTaxableRuleId.Equals(other.NonTaxableRuleId)
                ) && 
                (
                    this.NonTaxableType == other.NonTaxableType ||
                    this.NonTaxableType != null &&
                    this.NonTaxableType.Equals(other.NonTaxableType)
                ) && 
                (
                    this.Rate == other.Rate ||
                    this.Rate != null &&
                    this.Rate.Equals(other.Rate)
                ) && 
                (
                    this.RateRuleId == other.RateRuleId ||
                    this.RateRuleId != null &&
                    this.RateRuleId.Equals(other.RateRuleId)
                ) && 
                (
                    this.RateSourceId == other.RateSourceId ||
                    this.RateSourceId != null &&
                    this.RateSourceId.Equals(other.RateSourceId)
                ) && 
                (
                    this.SerCode == other.SerCode ||
                    this.SerCode != null &&
                    this.SerCode.Equals(other.SerCode)
                ) && 
                (
                    this.Sourcing == other.Sourcing ||
                    this.Sourcing != null &&
                    this.Sourcing.Equals(other.Sourcing)
                ) && 
                (
                    this.Tax == other.Tax ||
                    this.Tax != null &&
                    this.Tax.Equals(other.Tax)
                ) && 
                (
                    this.TaxableAmount == other.TaxableAmount ||
                    this.TaxableAmount != null &&
                    this.TaxableAmount.Equals(other.TaxableAmount)
                ) && 
                (
                    this.TaxType == other.TaxType ||
                    this.TaxType != null &&
                    this.TaxType.Equals(other.TaxType)
                ) && 
                (
                    this.TaxName == other.TaxName ||
                    this.TaxName != null &&
                    this.TaxName.Equals(other.TaxName)
                ) && 
                (
                    this.TaxAuthorityTypeId == other.TaxAuthorityTypeId ||
                    this.TaxAuthorityTypeId != null &&
                    this.TaxAuthorityTypeId.Equals(other.TaxAuthorityTypeId)
                ) && 
                (
                    this.TaxRegionId == other.TaxRegionId ||
                    this.TaxRegionId != null &&
                    this.TaxRegionId.Equals(other.TaxRegionId)
                ) && 
                (
                    this.TaxCalculated == other.TaxCalculated ||
                    this.TaxCalculated != null &&
                    this.TaxCalculated.Equals(other.TaxCalculated)
                ) && 
                (
                    this.TaxOverride == other.TaxOverride ||
                    this.TaxOverride != null &&
                    this.TaxOverride.Equals(other.TaxOverride)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.TaxableUnits == other.TaxableUnits ||
                    this.TaxableUnits != null &&
                    this.TaxableUnits.Equals(other.TaxableUnits)
                ) && 
                (
                    this.NonTaxableUnits == other.NonTaxableUnits ||
                    this.NonTaxableUnits != null &&
                    this.NonTaxableUnits.Equals(other.NonTaxableUnits)
                ) && 
                (
                    this.ExemptUnits == other.ExemptUnits ||
                    this.ExemptUnits != null &&
                    this.ExemptUnits.Equals(other.ExemptUnits)
                ) && 
                (
                    this.UnitOfBasis == other.UnitOfBasis ||
                    this.UnitOfBasis != null &&
                    this.UnitOfBasis.Equals(other.UnitOfBasis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.TransactionLineId != null)
                    hash = hash * 59 + this.TransactionLineId.GetHashCode();
                if (this.TransactionId != null)
                    hash = hash * 59 + this.TransactionId.GetHashCode();
                if (this.AddressId != null)
                    hash = hash * 59 + this.AddressId.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.Region != null)
                    hash = hash * 59 + this.Region.GetHashCode();
                if (this.CountyFIPS != null)
                    hash = hash * 59 + this.CountyFIPS.GetHashCode();
                if (this.StateFIPS != null)
                    hash = hash * 59 + this.StateFIPS.GetHashCode();
                if (this.ExemptAmount != null)
                    hash = hash * 59 + this.ExemptAmount.GetHashCode();
                if (this.ExemptReasonId != null)
                    hash = hash * 59 + this.ExemptReasonId.GetHashCode();
                if (this.InState != null)
                    hash = hash * 59 + this.InState.GetHashCode();
                if (this.JurisCode != null)
                    hash = hash * 59 + this.JurisCode.GetHashCode();
                if (this.JurisName != null)
                    hash = hash * 59 + this.JurisName.GetHashCode();
                if (this.JurisdictionId != null)
                    hash = hash * 59 + this.JurisdictionId.GetHashCode();
                if (this.SignatureCode != null)
                    hash = hash * 59 + this.SignatureCode.GetHashCode();
                if (this.StateAssignedNo != null)
                    hash = hash * 59 + this.StateAssignedNo.GetHashCode();
                if (this.JurisType != null)
                    hash = hash * 59 + this.JurisType.GetHashCode();
                if (this.NonTaxableAmount != null)
                    hash = hash * 59 + this.NonTaxableAmount.GetHashCode();
                if (this.NonTaxableRuleId != null)
                    hash = hash * 59 + this.NonTaxableRuleId.GetHashCode();
                if (this.NonTaxableType != null)
                    hash = hash * 59 + this.NonTaxableType.GetHashCode();
                if (this.Rate != null)
                    hash = hash * 59 + this.Rate.GetHashCode();
                if (this.RateRuleId != null)
                    hash = hash * 59 + this.RateRuleId.GetHashCode();
                if (this.RateSourceId != null)
                    hash = hash * 59 + this.RateSourceId.GetHashCode();
                if (this.SerCode != null)
                    hash = hash * 59 + this.SerCode.GetHashCode();
                if (this.Sourcing != null)
                    hash = hash * 59 + this.Sourcing.GetHashCode();
                if (this.Tax != null)
                    hash = hash * 59 + this.Tax.GetHashCode();
                if (this.TaxableAmount != null)
                    hash = hash * 59 + this.TaxableAmount.GetHashCode();
                if (this.TaxType != null)
                    hash = hash * 59 + this.TaxType.GetHashCode();
                if (this.TaxName != null)
                    hash = hash * 59 + this.TaxName.GetHashCode();
                if (this.TaxAuthorityTypeId != null)
                    hash = hash * 59 + this.TaxAuthorityTypeId.GetHashCode();
                if (this.TaxRegionId != null)
                    hash = hash * 59 + this.TaxRegionId.GetHashCode();
                if (this.TaxCalculated != null)
                    hash = hash * 59 + this.TaxCalculated.GetHashCode();
                if (this.TaxOverride != null)
                    hash = hash * 59 + this.TaxOverride.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.TaxableUnits != null)
                    hash = hash * 59 + this.TaxableUnits.GetHashCode();
                if (this.NonTaxableUnits != null)
                    hash = hash * 59 + this.NonTaxableUnits.GetHashCode();
                if (this.ExemptUnits != null)
                    hash = hash * 59 + this.ExemptUnits.GetHashCode();
                if (this.UnitOfBasis != null)
                    hash = hash * 59 + this.UnitOfBasis.GetHashCode();
                return hash;
            }
        }
    }

}
