/* 
 * AvaTax API
 *
 * REST interface to Avalara's enterprise tax service, AvaTax.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Avalara.AvaTax.RestClient.Model
{
    /// <summary>
    /// One Universal Product Code object as defined for your company.
    /// </summary>
    [DataContract]
    public partial class UPCModel :  IEquatable<UPCModel>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UPCModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UPCModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UPCModel" /> class.
        /// </summary>
        /// <param name="Upc">The 12-14 character Universal Product Code, European Article Number, or Global Trade Identification Number. (required).</param>
        /// <param name="LegacyTaxCode">Legacy Tax Code applied to any product sold with this UPC..</param>
        /// <param name="Description">Description of the product to which this UPC applies. (required).</param>
        /// <param name="EffectiveDate">If this UPC became effective on a certain date, this contains the first date on which the UPC was effective..</param>
        /// <param name="EndDate">If this UPC expired or will expire on a certain date, this contains the last date on which the UPC was effective..</param>
        /// <param name="Usage">A usage identifier for this UPC code..</param>
        /// <param name="IsSystem">A flag indicating whether this UPC code is attached to the AvaTax system or to a company..</param>
        public UPCModel(string Upc = null, string LegacyTaxCode = null, string Description = null, DateTime? EffectiveDate = null, DateTime? EndDate = null, int? Usage = null, int? IsSystem = null)
        {
            // to ensure "Upc" is required (not null)
            if (Upc == null)
            {
                throw new InvalidDataException("Upc is a required property for UPCModel and cannot be null");
            }
            else
            {
                this.Upc = Upc;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for UPCModel and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            this.LegacyTaxCode = LegacyTaxCode;
            this.EffectiveDate = EffectiveDate;
            this.EndDate = EndDate;
            this.Usage = Usage;
            this.IsSystem = IsSystem;
        }
        
        /// <summary>
        /// The unique ID number for this UPC.
        /// </summary>
        /// <value>The unique ID number for this UPC.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }
        /// <summary>
        /// The unique ID number of the company to which this UPC belongs.
        /// </summary>
        /// <value>The unique ID number of the company to which this UPC belongs.</value>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public int? CompanyId { get; private set; }
        /// <summary>
        /// The 12-14 character Universal Product Code, European Article Number, or Global Trade Identification Number.
        /// </summary>
        /// <value>The 12-14 character Universal Product Code, European Article Number, or Global Trade Identification Number.</value>
        [DataMember(Name="upc", EmitDefaultValue=false)]
        public string Upc { get; set; }
        /// <summary>
        /// Legacy Tax Code applied to any product sold with this UPC.
        /// </summary>
        /// <value>Legacy Tax Code applied to any product sold with this UPC.</value>
        [DataMember(Name="legacyTaxCode", EmitDefaultValue=false)]
        public string LegacyTaxCode { get; set; }
        /// <summary>
        /// Description of the product to which this UPC applies.
        /// </summary>
        /// <value>Description of the product to which this UPC applies.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// If this UPC became effective on a certain date, this contains the first date on which the UPC was effective.
        /// </summary>
        /// <value>If this UPC became effective on a certain date, this contains the first date on which the UPC was effective.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }
        /// <summary>
        /// If this UPC expired or will expire on a certain date, this contains the last date on which the UPC was effective.
        /// </summary>
        /// <value>If this UPC expired or will expire on a certain date, this contains the last date on which the UPC was effective.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// A usage identifier for this UPC code.
        /// </summary>
        /// <value>A usage identifier for this UPC code.</value>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public int? Usage { get; set; }
        /// <summary>
        /// A flag indicating whether this UPC code is attached to the AvaTax system or to a company.
        /// </summary>
        /// <value>A flag indicating whether this UPC code is attached to the AvaTax system or to a company.</value>
        [DataMember(Name="isSystem", EmitDefaultValue=false)]
        public int? IsSystem { get; set; }
        /// <summary>
        /// The date when this record was created.
        /// </summary>
        /// <value>The date when this record was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; private set; }
        /// <summary>
        /// The User ID of the user who created this record.
        /// </summary>
        /// <value>The User ID of the user who created this record.</value>
        [DataMember(Name="createdUserId", EmitDefaultValue=false)]
        public int? CreatedUserId { get; private set; }
        /// <summary>
        /// The date/time when this record was last modified.
        /// </summary>
        /// <value>The date/time when this record was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; private set; }
        /// <summary>
        /// The user ID of the user who last modified this record.
        /// </summary>
        /// <value>The user ID of the user who last modified this record.</value>
        [DataMember(Name="modifiedUserId", EmitDefaultValue=false)]
        public int? ModifiedUserId { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UPCModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Upc: ").Append(Upc).Append("\n");
            sb.Append("  LegacyTaxCode: ").Append(LegacyTaxCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  IsSystem: ").Append(IsSystem).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedUserId: ").Append(CreatedUserId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ModifiedUserId: ").Append(ModifiedUserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UPCModel);
        }

        /// <summary>
        /// Returns true if UPCModel instances are equal
        /// </summary>
        /// <param name="other">Instance of UPCModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UPCModel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.CompanyId == other.CompanyId ||
                    this.CompanyId != null &&
                    this.CompanyId.Equals(other.CompanyId)
                ) && 
                (
                    this.Upc == other.Upc ||
                    this.Upc != null &&
                    this.Upc.Equals(other.Upc)
                ) && 
                (
                    this.LegacyTaxCode == other.LegacyTaxCode ||
                    this.LegacyTaxCode != null &&
                    this.LegacyTaxCode.Equals(other.LegacyTaxCode)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.EffectiveDate == other.EffectiveDate ||
                    this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(other.EffectiveDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Usage == other.Usage ||
                    this.Usage != null &&
                    this.Usage.Equals(other.Usage)
                ) && 
                (
                    this.IsSystem == other.IsSystem ||
                    this.IsSystem != null &&
                    this.IsSystem.Equals(other.IsSystem)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.CreatedUserId == other.CreatedUserId ||
                    this.CreatedUserId != null &&
                    this.CreatedUserId.Equals(other.CreatedUserId)
                ) && 
                (
                    this.ModifiedDate == other.ModifiedDate ||
                    this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(other.ModifiedDate)
                ) && 
                (
                    this.ModifiedUserId == other.ModifiedUserId ||
                    this.ModifiedUserId != null &&
                    this.ModifiedUserId.Equals(other.ModifiedUserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.CompanyId != null)
                    hash = hash * 59 + this.CompanyId.GetHashCode();
                if (this.Upc != null)
                    hash = hash * 59 + this.Upc.GetHashCode();
                if (this.LegacyTaxCode != null)
                    hash = hash * 59 + this.LegacyTaxCode.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.EffectiveDate != null)
                    hash = hash * 59 + this.EffectiveDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Usage != null)
                    hash = hash * 59 + this.Usage.GetHashCode();
                if (this.IsSystem != null)
                    hash = hash * 59 + this.IsSystem.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.CreatedUserId != null)
                    hash = hash * 59 + this.CreatedUserId.GetHashCode();
                if (this.ModifiedDate != null)
                    hash = hash * 59 + this.ModifiedDate.GetHashCode();
                if (this.ModifiedUserId != null)
                    hash = hash * 59 + this.ModifiedUserId.GetHashCode();
                return hash;
            }
        }
    }

}
